

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon May  6 15:24:06 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F25K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    56                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    57                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    58  0000                     
    59                           ; Version 2.05
    60                           ; Generated 20/12/2018 GMT
    61                           ; 
    62                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC18F25K80 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     
    94                           	psect	idataBANK0
    95  002BCA                     __pidataBANK0:
    96                           	opt callstack 0
    97                           
    98                           ;initializer for uds_get_vin@F12348
    99  002BCA  30                 	db	48
   100  002BCB  FF                 	db	255
   101  002BCC  01                 	db	1
   102  002BCD  55                 	db	85
   103  002BCE  55                 	db	85
   104  002BCF  55                 	db	85
   105  002BD0  55                 	db	85
   106  002BD1  55                 	db	85
   107                           
   108                           ;initializer for uds_get_vin@F12346
   109  002BD2  03                 	db	3
   110  002BD3  22                 	db	34
   111  002BD4  F1                 	db	241
   112  002BD5  90                 	db	144
   113  002BD6  55                 	db	85
   114  002BD7  55                 	db	85
   115  002BD8  55                 	db	85
   116  002BD9  55                 	db	85
   117                           
   118                           	psect	idataBANK1
   119  002BDA                     __pidataBANK1:
   120                           	opt callstack 0
   121                           
   122                           ;initializer for uds_get_soc@F12336
   123  002BDA  03                 	db	3
   124  002BDB  22                 	db	34
   125  002BDC  1D                 	db	29
   126  002BDD  D0                 	db	208
   127  002BDE  55                 	db	85
   128  002BDF  55                 	db	85
   129  002BE0  55                 	db	85
   130  002BE1  55                 	db	85
   131                           
   132                           	psect	mediumconst
   133  007EF2                     __pmediumconst:
   134                           	opt callstack 0
   135  007EF2  00                 	db	0
   136  007EF3                     __powers_:
   137                           	opt callstack 0
   138  007EF3  0000               	dw	0
   139  007EF5  3F80               	dw	16256
   140  007EF7  0000               	dw	0
   141  007EF9  4120               	dw	16672
   142  007EFB  0000               	dw	0
   143  007EFD  42C8               	dw	17096
   144  007EFF  0000               	dw	0
   145  007F01  447A               	dw	17530
   146  007F03  4000               	dw	16384
   147  007F05  461C               	dw	17948
   148  007F07  5000               	dw	20480
   149  007F09  47C3               	dw	18371
   150  007F0B  2400               	dw	9216
   151  007F0D  4974               	dw	18804
   152  007F0F  9680               	dw	38528
   153  007F11  4B18               	dw	19224
   154  007F13  BC20               	dw	48160
   155  007F15  4CBE               	dw	19646
   156  007F17  6B28               	dw	27432
   157  007F19  4E6E               	dw	20078
   158  007F1B  02F9               	dw	761
   159  007F1D  5015               	dw	20501
   160  007F1F  78EC               	dw	30956
   161  007F21  60AD               	dw	24749
   162  007F23  F2CA               	dw	62154
   163  007F25  7149               	dw	29001
   164  007F27                     __end_of__powers_:
   165                           	opt callstack 0
   166  007F27                     __npowers_:
   167                           	opt callstack 0
   168  007F27  0000               	dw	0
   169  007F29  3F80               	dw	16256
   170  007F2B  CCCD               	dw	52429
   171  007F2D  3DCC               	dw	15820
   172  007F2F  D70A               	dw	55050
   173  007F31  3C23               	dw	15395
   174  007F33  126F               	dw	4719
   175  007F35  3A83               	dw	14979
   176  007F37  B717               	dw	46871
   177  007F39  38D1               	dw	14545
   178  007F3B  C5AC               	dw	50604
   179  007F3D  3727               	dw	14119
   180  007F3F  37BD               	dw	14269
   181  007F41  3586               	dw	13702
   182  007F43  BF95               	dw	49045
   183  007F45  33D6               	dw	13270
   184  007F47  CC77               	dw	52343
   185  007F49  322B               	dw	12843
   186  007F4B  705F               	dw	28767
   187  007F4D  3089               	dw	12425
   188  007F4F  E6FF               	dw	59135
   189  007F51  2EDB               	dw	11995
   190  007F53  E508               	dw	58632
   191  007F55  1E3C               	dw	7740
   192  007F57  4260               	dw	16992
   193  007F59  0DA2               	dw	3490
   194  007F5B                     __end_of__npowers_:
   195                           	opt callstack 0
   196  007F5B                     _dpowers:
   197                           	opt callstack 0
   198  007F5B  0001               	dw	1
   199  007F5D  0000               	dw	0
   200  007F5F  000A               	dw	10
   201  007F61  0000               	dw	0
   202  007F63  0064               	dw	100
   203  007F65  0000               	dw	0
   204  007F67  03E8               	dw	1000
   205  007F69  0000               	dw	0
   206  007F6B  2710               	dw	10000
   207  007F6D  0000               	dw	0
   208  007F6F  86A0               	dw	34464
   209  007F71  0001               	dw	1
   210  007F73  4240               	dw	16960
   211  007F75  000F               	dw	15
   212  007F77  9680               	dw	38528
   213  007F79  0098               	dw	152
   214  007F7B  E100               	dw	57600
   215  007F7D  05F5               	dw	1525
   216  007F7F  CA00               	dw	51712
   217  007F81  3B9A               	dw	15258
   218  007F83                     __end_of_dpowers:
   219                           	opt callstack 0
   220  0000                     _B1CONbits	set	3728
   221  0000                     _RXM1SIDL	set	3837
   222  0000                     _RXM1SIDH	set	3836
   223  0000                     _RXM0SIDL	set	3833
   224  0000                     _RXM0SIDH	set	3832
   225  0000                     _RXF5SIDL	set	3829
   226  0000                     _RXF5SIDH	set	3828
   227  0000                     _RXF4SIDL	set	3825
   228  0000                     _RXF4SIDH	set	3824
   229  0000                     _RXF3SIDL	set	3821
   230  0000                     _RXF3SIDH	set	3820
   231  0000                     _RXF2SIDL	set	3817
   232  0000                     _RXF2SIDH	set	3816
   233  0000                     _RXF1SIDL	set	3813
   234  0000                     _RXF1SIDH	set	3812
   235  0000                     _RXF0SIDL	set	3809
   236  0000                     _RXF0SIDH	set	3808
   237  0000                     _BRGCON3	set	3653
   238  0000                     _BRGCON2	set	3652
   239  0000                     _BRGCON1	set	3651
   240  0000                     _RXM1EXIDEN	set	30699
   241  0000                     _RXM0EXIDM	set	30667
   242  0000                     _TXB2CON	set	3840
   243  0000                     _TXB1CON	set	3856
   244  0000                     _TXB0CON	set	3872
   245  0000                     _RXB1CON	set	3888
   246  0000                     _CANSTAT	set	3950
   247  0000                     _CANCON	set	3951
   248  0000                     _CIOCON	set	3952
   249  0000                     _TXREG1	set	4013
   250  0000                     _RCREG1	set	4014
   251  0000                     _SPBRGH1	set	3965
   252  0000                     _RCSTA1bits	set	4011
   253  0000                     _PIE1	set	3997
   254  0000                     _PIR1bits	set	3998
   255  0000                     _TXSTA1bits	set	4012
   256  0000                     _PIE1bits	set	3997
   257  0000                     _SPBRG1	set	4015
   258  0000                     _BAUDCON1	set	4007
   259  0000                     _RCSTA1	set	4011
   260  0000                     _TXSTA1	set	4012
   261  0000                     _TRISCbits	set	3988
   262  0000                     _RXB0CON	set	3936
   263  0000                     _IRXIF	set	31679
   264  0000                     _RXB1OVFL	set	31630
   265  0000                     _RXB1IF	set	31673
   266  0000                     _RXB0FILHIT0	set	31488
   267  0000                     _RXB0OVFL	set	31631
   268  0000                     _RXB0IF	set	31672
   269  0000                     _RXB0FUL	set	31495
   270  0000                     _MDSEL0	set	31638
   271  0000                     _MDSEL1	set	31639
   272  0000                     _PEIE	set	32662
   273  0000                     _RCIE	set	31981
   274  0000                     _GIE	set	32663
   275  0000                     _RB7	set	31759
   276  0000                     _TRISB7	set	31903
   277  007F83                     STR_7:
   278                           
   279                           ; BSR set to: 0
   280  007F83  0A                 	db	10
   281  007F84  65                 	db	101	;'e'
   282  007F85  72                 	db	114	;'r'
   283  007F86  72                 	db	114	;'r'
   284  007F87  6F                 	db	111	;'o'
   285  007F88  72                 	db	114	;'r'
   286  007F89  3A                 	db	58	;':'
   287  007F8A  20                 	db	32
   288  007F8B  63                 	db	99	;'c'
   289  007F8C  61                 	db	97	;'a'
   290  007F8D  6E                 	db	110	;'n'
   291  007F8E  20                 	db	32
   292  007F8F  73                 	db	115	;'s'
   293  007F90  65                 	db	101	;'e'
   294  007F91  6E                 	db	110	;'n'
   295  007F92  64                 	db	100	;'d'
   296  007F93  20                 	db	32
   297  007F94  66                 	db	102	;'f'
   298  007F95  61                 	db	97	;'a'
   299  007F96  69                 	db	105	;'i'
   300  007F97  6C                 	db	108	;'l'
   301  007F98  65                 	db	101	;'e'
   302  007F99  64                 	db	100	;'d'
   303  007F9A  0A                 	db	10
   304  007F9B  00                 	db	0
   305  007F9C                     STR_3:
   306                           
   307                           ; BSR set to: 0
   308  007F9C  76                 	db	118	;'v'
   309  007F9D  61                 	db	97	;'a'
   310  007F9E  6C                 	db	108	;'l'
   311  007F9F  75                 	db	117	;'u'
   312  007FA0  65                 	db	101	;'e'
   313  007FA1  20                 	db	32
   314  007FA2  73                 	db	115	;'s'
   315  007FA3  6F                 	db	111	;'o'
   316  007FA4  63                 	db	99	;'c'
   317  007FA5  3A                 	db	58	;':'
   318  007FA6  20                 	db	32
   319  007FA7  25                 	db	37
   320  007FA8  2E                 	db	46
   321  007FA9  31                 	db	49	;'1'
   322  007FAA  66                 	db	102	;'f'
   323  007FAB  20                 	db	32
   324  007FAC  25                 	db	37
   325  007FAD  25                 	db	37
   326  007FAE  0A                 	db	10
   327  007FAF  00                 	db	0
   328  007FB0                     STR_11:
   329                           
   330                           ; BSR set to: 0
   331  007FB0  65                 	db	101	;'e'
   332  007FB1  72                 	db	114	;'r'
   333  007FB2  72                 	db	114	;'r'
   334  007FB3  6F                 	db	111	;'o'
   335  007FB4  72                 	db	114	;'r'
   336  007FB5  3A                 	db	58	;':'
   337  007FB6  20                 	db	32
   338  007FB7  69                 	db	105	;'i'
   339  007FB8  6E                 	db	110	;'n'
   340  007FB9  76                 	db	118	;'v'
   341  007FBA  61                 	db	97	;'a'
   342  007FBB  6C                 	db	108	;'l'
   343  007FBC  69                 	db	105	;'i'
   344  007FBD  64                 	db	100	;'d'
   345  007FBE  20                 	db	32
   346  007FBF  63                 	db	99	;'c'
   347  007FC0  6D                 	db	109	;'m'
   348  007FC1  64                 	db	100	;'d'
   349  007FC2  20                 	db	32
   350  007FC3  00                 	db	0
   351  007FC4                     STR_9:
   352                           
   353                           ; BSR set to: 0
   354  007FC4  0A                 	db	10
   355  007FC5  65                 	db	101	;'e'
   356  007FC6  72                 	db	114	;'r'
   357  007FC7  72                 	db	114	;'r'
   358  007FC8  6F                 	db	111	;'o'
   359  007FC9  72                 	db	114	;'r'
   360  007FCA  3A                 	db	58	;':'
   361  007FCB  20                 	db	32
   362  007FCC  74                 	db	116	;'t'
   363  007FCD  69                 	db	105	;'i'
   364  007FCE  6D                 	db	109	;'m'
   365  007FCF  65                 	db	101	;'e'
   366  007FD0  6F                 	db	111	;'o'
   367  007FD1  75                 	db	117	;'u'
   368  007FD2  74                 	db	116	;'t'
   369  007FD3  0A                 	db	10
   370  007FD4  00                 	db	0
   371  007FD5                     STR_12:
   372                           
   373                           ; BSR set to: 0
   374  007FD5  73                 	db	115	;'s'
   375  007FD6  74                 	db	116	;'t'
   376  007FD7  61                 	db	97	;'a'
   377  007FD8  74                 	db	116	;'t'
   378  007FD9  75                 	db	117	;'u'
   379  007FDA  73                 	db	115	;'s'
   380  007FDB  3A                 	db	58	;':'
   381  007FDC  20                 	db	32
   382  007FDD  72                 	db	114	;'r'
   383  007FDE  65                 	db	101	;'e'
   384  007FDF  61                 	db	97	;'a'
   385  007FE0  64                 	db	100	;'d'
   386  007FE1  79                 	db	121	;'y'
   387  007FE2  0A                 	db	10
   388  007FE3  00                 	db	0
   389  007FE4                     STR_1:
   390                           
   391                           ; BSR set to: 0
   392  007FE4  73                 	db	115	;'s'
   393  007FE5  74                 	db	116	;'t'
   394  007FE6  61                 	db	97	;'a'
   395  007FE7  74                 	db	116	;'t'
   396  007FE8  75                 	db	117	;'u'
   397  007FE9  73                 	db	115	;'s'
   398  007FEA  3A                 	db	58	;':'
   399  007FEB  20                 	db	32
   400  007FEC  62                 	db	98	;'b'
   401  007FED  75                 	db	117	;'u'
   402  007FEE  73                 	db	115	;'s'
   403  007FEF  79                 	db	121	;'y'
   404  007FF0  0A                 	db	10
   405  007FF1  00                 	db	0
   406  007FF2                     STR_8:
   407                           
   408                           ; BSR set to: 0
   409  007FF2  76                 	db	118	;'v'
   410  007FF3  61                 	db	97	;'a'
   411  007FF4  6C                 	db	108	;'l'
   412  007FF5  75                 	db	117	;'u'
   413  007FF6  65                 	db	101	;'e'
   414  007FF7  20                 	db	32
   415  007FF8  76                 	db	118	;'v'
   416  007FF9  69                 	db	105	;'i'
   417  007FFA  6E                 	db	110	;'n'
   418  007FFB  3A                 	db	58	;':'
   419  007FFC  20                 	db	32
   420  007FFD  00                 	db	0
   421  0000                     
   422                           ; #config settings
   423  007FFE  00                 	db	0	; dummy byte at the end
   424  0000                     
   425                           	psect	cinit
   426  0028CA                     __pcinit:
   427                           	opt callstack 0
   428  0028CA                     start_initialization:
   429                           	opt callstack 0
   430  0028CA                     __initialization:
   431                           	opt callstack 0
   432                           
   433                           ; Initialize objects allocated to BANK1 (8 bytes)
   434                           ; load TBLPTR registers with __pidataBANK1
   435  0028CA  0EDA               	movlw	low __pidataBANK1
   436  0028CC  6EF6               	movwf	tblptrl,c
   437  0028CE  0E2B               	movlw	high __pidataBANK1
   438  0028D0  6EF7               	movwf	tblptrh,c
   439  0028D2  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   440  0028D4  6EF8               	movwf	tblptru,c
   441  0028D6  EE01  F0B4         	lfsr	0,__pdataBANK1
   442  0028DA  EE10 F008          	lfsr	1,8
   443  0028DE                     copy_data0:
   444  0028DE  0009               	tblrd		*+
   445  0028E0  CFF5 FFEE          	movff	tablat,postinc0
   446  0028E4  50E5               	movf	postdec1,w,c
   447  0028E6  50E1               	movf	fsr1l,w,c
   448  0028E8  E1FA               	bnz	copy_data0
   449                           
   450                           ; Initialize objects allocated to BANK0 (16 bytes)
   451                           ; load TBLPTR registers with __pidataBANK0
   452  0028EA  0ECA               	movlw	low __pidataBANK0
   453  0028EC  6EF6               	movwf	tblptrl,c
   454  0028EE  0E2B               	movlw	high __pidataBANK0
   455  0028F0  6EF7               	movwf	tblptrh,c
   456  0028F2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   457  0028F4  6EF8               	movwf	tblptru,c
   458  0028F6  EE00  F0CC         	lfsr	0,__pdataBANK0
   459  0028FA  EE10 F010          	lfsr	1,16
   460  0028FE                     copy_data1:
   461  0028FE  0009               	tblrd		*+
   462  002900  CFF5 FFEE          	movff	tablat,postinc0
   463  002904  50E5               	movf	postdec1,w,c
   464  002906  50E1               	movf	fsr1l,w,c
   465  002908  E1FA               	bnz	copy_data1
   466                           
   467                           ; Clear objects allocated to BANK0 (38 bytes)
   468  00290A  EE00  F0A6         	lfsr	0,__pbssBANK0
   469  00290E  0E26               	movlw	38
   470  002910                     clear_0:
   471  002910  6AEE               	clrf	postinc0,c
   472  002912  06E8               	decf	wreg,f,c
   473  002914  E1FD               	bnz	clear_0
   474                           
   475                           ; Clear objects allocated to COMRAM (2 bytes)
   476  002916  6A5C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   477  002918  6A5B               	clrf	__pbssCOMRAM& (0+255),c
   478  00291A                     end_of_initialization:
   479                           	opt callstack 0
   480  00291A                     __end_of__initialization:
   481                           	opt callstack 0
   482  00291A  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   483  00291C  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   484  00291E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   485  002920  6EF8               	movwf	tblptru,c
   486  002922  0100               	movlb	0
   487  002924  EF85  F013         	goto	_main	;jump to C main() function
   488                           
   489                           	psect	bssCOMRAM
   490  00005B                     __pbssCOMRAM:
   491                           	opt callstack 0
   492  00005B                     _ctmp:
   493                           	opt callstack 0
   494  00005B                     	ds	1
   495  00005C                     _cmd:
   496                           	opt callstack 0
   497  00005C                     	ds	1
   498                           
   499                           	psect	bssBANK0
   500  0000A6                     __pbssBANK0:
   501                           	opt callstack 0
   502  0000A6                     _RxBuffer:
   503                           	opt callstack 0
   504  0000A6                     	ds	32
   505  0000C6                     _outIndex:
   506                           	opt callstack 0
   507  0000C6                     	ds	2
   508  0000C8                     _inIndex:
   509                           	opt callstack 0
   510  0000C8                     	ds	2
   511  0000CA                     __ECANRxFilterHitInfo:
   512                           	opt callstack 0
   513  0000CA                     	ds	1
   514  0000CB                     _USART1_Status:
   515                           	opt callstack 0
   516  0000CB                     	ds	1
   517                           
   518                           	psect	dataBANK0
   519  0000CC                     __pdataBANK0:
   520                           	opt callstack 0
   521  0000CC                     uds_get_vin@F12348:
   522                           	opt callstack 0
   523  0000CC                     	ds	8
   524  0000D4                     uds_get_vin@F12346:
   525                           	opt callstack 0
   526  0000D4                     	ds	8
   527                           
   528                           	psect	dataBANK1
   529  0001B4                     __pdataBANK1:
   530                           	opt callstack 0
   531  0001B4                     uds_get_soc@F12336:
   532                           	opt callstack 0
   533  0001B4                     	ds	8
   534                           
   535                           	psect	cstackBANK1
   536  000100                     __pcstackBANK1:
   537                           	opt callstack 0
   538  000100                     uds_get_soc@buf:
   539                           	opt callstack 0
   540                           
   541                           ; 128 bytes @ 0x0
   542  000100                     	ds	128
   543  000180                     uds_get_soc@msg2:
   544                           	opt callstack 0
   545                           
   546                           ; 32 bytes @ 0x80
   547  000180                     	ds	32
   548  0001A0                     uds_get_soc@msg:
   549                           	opt callstack 0
   550                           
   551                           ; 8 bytes @ 0xA0
   552  0001A0                     	ds	8
   553  0001A8                     _uds_get_soc$1883:
   554                           	opt callstack 0
   555                           
   556                           ; 4 bytes @ 0xA8
   557  0001A8                     	ds	4
   558  0001AC                     uds_get_soc@len:
   559                           	opt callstack 0
   560                           
   561                           ; 1 bytes @ 0xAC
   562  0001AC                     	ds	1
   563  0001AD                     uds_get_soc@i:
   564                           	opt callstack 0
   565                           
   566                           ; 2 bytes @ 0xAD
   567  0001AD                     	ds	2
   568  0001AF                     uds_get_soc@flags:
   569                           	opt callstack 0
   570                           
   571                           ; 1 bytes @ 0xAF
   572  0001AF                     	ds	1
   573  0001B0                     uds_get_soc@id:
   574                           	opt callstack 0
   575                           
   576                           ; 4 bytes @ 0xB0
   577  0001B0                     	ds	4
   578                           
   579                           	psect	cstackBANK0
   580  000060                     __pcstackBANK0:
   581                           	opt callstack 0
   582  000060                     _sprintf$1887:
   583                           	opt callstack 0
   584  000060                     uds_get_vin@msg_start:
   585                           	opt callstack 0
   586                           
   587                           ; 8 bytes @ 0x0
   588  000060                     	ds	4
   589  000064                     sprintf@ap:
   590                           	opt callstack 0
   591                           
   592                           ; 2 bytes @ 0x4
   593  000064                     	ds	2
   594  000066                     sprintf@cp:
   595                           	opt callstack 0
   596                           
   597                           ; 2 bytes @ 0x6
   598  000066                     	ds	2
   599  000068                     sprintf@len:
   600                           	opt callstack 0
   601  000068                     uds_get_vin@msg_continue:
   602                           	opt callstack 0
   603                           
   604                           ; 8 bytes @ 0x8
   605  000068                     	ds	2
   606  00006A                     sprintf@flag:
   607                           	opt callstack 0
   608                           
   609                           ; 2 bytes @ 0xA
   610  00006A                     	ds	2
   611  00006C                     sprintf@val:
   612                           	opt callstack 0
   613                           
   614                           ; 4 bytes @ 0xC
   615  00006C                     	ds	4
   616  000070                     sprintf@eexp:
   617                           	opt callstack 0
   618  000070                     uds_get_vin@msg2:
   619                           	opt callstack 0
   620                           
   621                           ; 32 bytes @ 0x10
   622  000070                     	ds	2
   623  000072                     sprintf@tmpval:
   624                           	opt callstack 0
   625                           
   626                           ; 4 bytes @ 0x12
   627  000072                     	ds	4
   628  000076                     sprintf@fval:
   629                           	opt callstack 0
   630                           
   631                           ; 4 bytes @ 0x16
   632  000076                     	ds	4
   633  00007A                     sprintf@prec:
   634                           	opt callstack 0
   635                           
   636                           ; 2 bytes @ 0x1A
   637  00007A                     	ds	2
   638  00007C                     sprintf@c:
   639                           	opt callstack 0
   640                           
   641                           ; 1 bytes @ 0x1C
   642  00007C                     	ds	20
   643  000090                     uds_get_vin@total_size:
   644                           	opt callstack 0
   645                           
   646                           ; 2 bytes @ 0x30
   647  000090                     	ds	2
   648  000092                     uds_get_vin@i:
   649                           	opt callstack 0
   650                           
   651                           ; 2 bytes @ 0x32
   652  000092                     	ds	2
   653  000094                     uds_get_vin@t:
   654                           	opt callstack 0
   655                           
   656                           ; 2 bytes @ 0x34
   657  000094                     	ds	2
   658  000096                     uds_get_vin@len:
   659                           	opt callstack 0
   660                           
   661                           ; 1 bytes @ 0x36
   662  000096                     	ds	1
   663  000097                     uds_get_vin@i_332:
   664                           	opt callstack 0
   665                           
   666                           ; 1 bytes @ 0x37
   667  000097                     	ds	1
   668  000098                     uds_get_vin@flags:
   669                           	opt callstack 0
   670                           
   671                           ; 1 bytes @ 0x38
   672  000098                     	ds	1
   673  000099                     uds_get_vin@id:
   674                           	opt callstack 0
   675                           
   676                           ; 4 bytes @ 0x39
   677  000099                     	ds	4
   678  00009D                     ??_shell:
   679                           
   680                           ; 1 bytes @ 0x3D
   681  00009D                     	ds	1
   682  00009E                     
   683                           ; 2 bytes @ 0x3E
   684  00009E                     	ds	2
   685  0000A0                     
   686                           ; 3 bytes @ 0x40
   687  0000A0                     	ds	3
   688  0000A3                     ??_main:
   689                           
   690                           ; 1 bytes @ 0x43
   691  0000A3                     	ds	1
   692  0000A4                     main@i:
   693                           	opt callstack 0
   694                           
   695                           ; 2 bytes @ 0x44
   696  0000A4                     	ds	2
   697                           
   698                           	psect	cstackCOMRAM
   699  000001                     __pcstackCOMRAM:
   700                           	opt callstack 0
   701  000001                     Read1USART@data:
   702                           	opt callstack 0
   703                           
   704                           ; 1 bytes @ 0x0
   705  000001                     	ds	1
   706  000002                     ISR@c2:
   707                           	opt callstack 0
   708                           
   709                           ; 1 bytes @ 0x1
   710  000002                     	ds	1
   711  000003                     ??_isdigit:
   712  000003                     ?___wmul:
   713                           	opt callstack 0
   714  000003                     ?___awmod:
   715                           	opt callstack 0
   716  000003                     ?___lwmod:
   717                           	opt callstack 0
   718  000003                     ?__tdiv_to_l_:
   719                           	opt callstack 0
   720  000003                     ?__div_to_l_:
   721                           	opt callstack 0
   722  000003                     ?___lldiv:
   723                           	opt callstack 0
   724  000003                     ?___flneg:
   725                           	opt callstack 0
   726  000003                     ?___llmod:
   727                           	opt callstack 0
   728  000003                     ?___xxtofl:
   729                           	opt callstack 0
   730  000003                     Write1USART@data:
   731                           	opt callstack 0
   732  000003                     ECANSetOperationMode@mode:
   733                           	opt callstack 0
   734  000003                     alive@j:
   735                           	opt callstack 0
   736  000003                     Open1USART@spbrg:
   737                           	opt callstack 0
   738  000003                     __CANIDToRegs@ptr:
   739                           	opt callstack 0
   740  000003                     __RegsToCANID@ptr:
   741                           	opt callstack 0
   742  000003                     ___wmul@multiplier:
   743                           	opt callstack 0
   744  000003                     ___awmod@dividend:
   745                           	opt callstack 0
   746  000003                     ___lwmod@dividend:
   747                           	opt callstack 0
   748  000003                     ___lldiv@dividend:
   749                           	opt callstack 0
   750  000003                     __div_to_l_@f1:
   751                           	opt callstack 0
   752  000003                     ___fleq@ff1:
   753                           	opt callstack 0
   754  000003                     ___flge@ff1:
   755                           	opt callstack 0
   756  000003                     ___flneg@f1:
   757                           	opt callstack 0
   758  000003                     __tdiv_to_l_@f1:
   759                           	opt callstack 0
   760  000003                     ___llmod@dividend:
   761                           	opt callstack 0
   762  000003                     ___xxtofl@val:
   763                           	opt callstack 0
   764                           
   765                           ; 4 bytes @ 0x2
   766  000003                     	ds	1
   767  000004                     Putchar@send_data:
   768                           	opt callstack 0
   769  000004                     _isdigit$1659:
   770                           	opt callstack 0
   771                           
   772                           ; 1 bytes @ 0x3
   773  000004                     	ds	1
   774  000005                     ??_alive:
   775  000005                     Open1USART@config:
   776                           	opt callstack 0
   777  000005                     isdigit@c:
   778                           	opt callstack 0
   779  000005                     PutString@mess:
   780                           	opt callstack 0
   781  000005                     __RegsToCANID@val:
   782                           	opt callstack 0
   783  000005                     ___wmul@multiplicand:
   784                           	opt callstack 0
   785  000005                     ___awmod@divisor:
   786                           	opt callstack 0
   787  000005                     ___lwmod@divisor:
   788                           	opt callstack 0
   789  000005                     __CANIDToRegs@val:
   790                           	opt callstack 0
   791                           
   792                           ; 4 bytes @ 0x4
   793  000005                     	ds	2
   794  000007                     ??___xxtofl:
   795  000007                     __RegsToCANID@type:
   796                           	opt callstack 0
   797  000007                     ___awmod@counter:
   798                           	opt callstack 0
   799  000007                     ___lwmod@counter:
   800                           	opt callstack 0
   801  000007                     alive@i:
   802                           	opt callstack 0
   803  000007                     ___wmul@product:
   804                           	opt callstack 0
   805  000007                     ___lldiv@divisor:
   806                           	opt callstack 0
   807  000007                     __div_to_l_@f2:
   808                           	opt callstack 0
   809  000007                     ___fleq@ff2:
   810                           	opt callstack 0
   811  000007                     ___flge@ff2:
   812                           	opt callstack 0
   813  000007                     __tdiv_to_l_@f2:
   814                           	opt callstack 0
   815  000007                     ___llmod@divisor:
   816                           	opt callstack 0
   817                           
   818                           ; 4 bytes @ 0x6
   819  000007                     	ds	1
   820  000008                     ??__RegsToCANID:
   821  000008                     ?___lwdiv:
   822                           	opt callstack 0
   823  000008                     ___awmod@sign:
   824                           	opt callstack 0
   825  000008                     ___lwdiv@dividend:
   826                           	opt callstack 0
   827                           
   828                           ; 2 bytes @ 0x7
   829  000008                     	ds	1
   830  000009                     ?___awdiv:
   831                           	opt callstack 0
   832  000009                     __CANIDToRegs@type:
   833                           	opt callstack 0
   834  000009                     ___awdiv@dividend:
   835                           	opt callstack 0
   836                           
   837                           ; 2 bytes @ 0x8
   838  000009                     	ds	1
   839  00000A                     ??__CANIDToRegs:
   840  00000A                     __RegsToCANID@Value:
   841                           	opt callstack 0
   842  00000A                     ___lwdiv@divisor:
   843                           	opt callstack 0
   844                           
   845                           ; 2 bytes @ 0x9
   846  00000A                     	ds	1
   847  00000B                     ??__tdiv_to_l_:
   848  00000B                     ??___fleq:
   849  00000B                     ??___flge:
   850  00000B                     ___llmod@counter:
   851                           	opt callstack 0
   852  00000B                     ___xxtofl@sign:
   853                           	opt callstack 0
   854  00000B                     ___awdiv@divisor:
   855                           	opt callstack 0
   856  00000B                     ___lldiv@quotient:
   857                           	opt callstack 0
   858  00000B                     __div_to_l_@quot:
   859                           	opt callstack 0
   860                           
   861                           ; 4 bytes @ 0xA
   862  00000B                     	ds	1
   863  00000C                     ___xxtofl@exp:
   864                           	opt callstack 0
   865  00000C                     ECANReceiveMessage@id:
   866                           	opt callstack 0
   867  00000C                     __CANIDToRegs@Value:
   868                           	opt callstack 0
   869  00000C                     ___lwdiv@quotient:
   870                           	opt callstack 0
   871                           
   872                           ; 2 bytes @ 0xB
   873  00000C                     	ds	1
   874  00000D                     ___awdiv@counter:
   875                           	opt callstack 0
   876  00000D                     ___xxtofl@arg:
   877                           	opt callstack 0
   878                           
   879                           ; 4 bytes @ 0xC
   880  00000D                     	ds	1
   881  00000E                     ___awdiv@sign:
   882                           	opt callstack 0
   883  00000E                     ___lwdiv@counter:
   884                           	opt callstack 0
   885  00000E                     ECANReceiveMessage@data:
   886                           	opt callstack 0
   887  00000E                     ECANSendMessage@id:
   888                           	opt callstack 0
   889  00000E                     __tdiv_to_l_@quot:
   890                           	opt callstack 0
   891                           
   892                           ; 4 bytes @ 0xD
   893  00000E                     	ds	1
   894  00000F                     ___lldiv@counter:
   895                           	opt callstack 0
   896  00000F                     __div_to_l_@cntr:
   897                           	opt callstack 0
   898  00000F                     ___awdiv@quotient:
   899                           	opt callstack 0
   900                           
   901                           ; 2 bytes @ 0xE
   902  00000F                     	ds	1
   903  000010                     __div_to_l_@exp1:
   904                           	opt callstack 0
   905  000010                     ECANReceiveMessage@dataLen:
   906                           	opt callstack 0
   907                           
   908                           ; 2 bytes @ 0xF
   909  000010                     	ds	1
   910  000011                     ?___fldiv:
   911                           	opt callstack 0
   912  000011                     ?___flmul:
   913                           	opt callstack 0
   914  000011                     ___fldiv@b:
   915                           	opt callstack 0
   916  000011                     ___flmul@b:
   917                           	opt callstack 0
   918                           
   919                           ; 4 bytes @ 0x10
   920  000011                     	ds	1
   921  000012                     __tdiv_to_l_@cntr:
   922                           	opt callstack 0
   923  000012                     ECANSendMessage@data:
   924                           	opt callstack 0
   925  000012                     ECANReceiveMessage@msgFlags:
   926                           	opt callstack 0
   927                           
   928                           ; 2 bytes @ 0x11
   929  000012                     	ds	1
   930  000013                     __tdiv_to_l_@exp1:
   931                           	opt callstack 0
   932                           
   933                           ; 1 bytes @ 0x12
   934  000013                     	ds	1
   935  000014                     ECANSendMessage@dataLen:
   936                           	opt callstack 0
   937  000014                     ECANReceiveMessage@savedPtr:
   938                           	opt callstack 0
   939                           
   940                           ; 2 bytes @ 0x13
   941  000014                     	ds	1
   942  000015                     ECANSendMessage@msgFlags:
   943                           	opt callstack 0
   944  000015                     ___fldiv@a:
   945                           	opt callstack 0
   946  000015                     ___flmul@a:
   947                           	opt callstack 0
   948                           
   949                           ; 4 bytes @ 0x14
   950  000015                     	ds	1
   951  000016                     ??_ECANSendMessage:
   952  000016                     ECANReceiveMessage@i:
   953                           	opt callstack 0
   954                           
   955                           ; 1 bytes @ 0x15
   956  000016                     	ds	1
   957  000017                     ECANReceiveMessage@ptr:
   958                           	opt callstack 0
   959  000017                     ECANSendMessage@pb:
   960                           	opt callstack 0
   961                           
   962                           ; 18 bytes @ 0x16
   963  000017                     	ds	2
   964  000019                     ??___fldiv:
   965  000019                     ??___flmul:
   966  000019                     ECANReceiveMessage@temp:
   967                           	opt callstack 0
   968                           
   969                           ; 1 bytes @ 0x18
   970  000019                     	ds	4
   971  00001D                     ___flmul@sign:
   972                           	opt callstack 0
   973  00001D                     ___fldiv@rem:
   974                           	opt callstack 0
   975                           
   976                           ; 4 bytes @ 0x1C
   977  00001D                     	ds	1
   978  00001E                     ___flmul@grs:
   979                           	opt callstack 0
   980                           
   981                           ; 4 bytes @ 0x1D
   982  00001E                     	ds	3
   983  000021                     ___fldiv@sign:
   984                           	opt callstack 0
   985                           
   986                           ; 1 bytes @ 0x20
   987  000021                     	ds	1
   988  000022                     ___flmul@aexp:
   989                           	opt callstack 0
   990  000022                     ___fldiv@new_exp:
   991                           	opt callstack 0
   992                           
   993                           ; 2 bytes @ 0x21
   994  000022                     	ds	1
   995  000023                     ___flmul@bexp:
   996                           	opt callstack 0
   997                           
   998                           ; 1 bytes @ 0x22
   999  000023                     	ds	1
  1000  000024                     ___fldiv@grs:
  1001                           	opt callstack 0
  1002  000024                     ___flmul@prod:
  1003                           	opt callstack 0
  1004                           
  1005                           ; 4 bytes @ 0x23
  1006  000024                     	ds	4
  1007  000028                     ___fldiv@bexp:
  1008                           	opt callstack 0
  1009  000028                     ___flmul@temp:
  1010                           	opt callstack 0
  1011                           
  1012                           ; 2 bytes @ 0x27
  1013  000028                     	ds	1
  1014  000029                     ECANSendMessage@j:
  1015                           	opt callstack 0
  1016  000029                     ___fldiv@aexp:
  1017                           	opt callstack 0
  1018                           
  1019                           ; 1 bytes @ 0x28
  1020  000029                     	ds	1
  1021  00002A                     ?_fround:
  1022                           	opt callstack 0
  1023  00002A                     ?_scale:
  1024                           	opt callstack 0
  1025  00002A                     ?___fltol:
  1026                           	opt callstack 0
  1027  00002A                     ECANSendMessage@tempPtr:
  1028                           	opt callstack 0
  1029  00002A                     ___fltol@f1:
  1030                           	opt callstack 0
  1031                           
  1032                           ; 4 bytes @ 0x29
  1033  00002A                     	ds	2
  1034  00002C                     ECANSendMessage@temp:
  1035                           	opt callstack 0
  1036                           
  1037                           ; 1 bytes @ 0x2B
  1038  00002C                     	ds	1
  1039  00002D                     ECANSendMessage@i:
  1040                           	opt callstack 0
  1041                           
  1042                           ; 1 bytes @ 0x2C
  1043  00002D                     	ds	1
  1044  00002E                     ??___fltol:
  1045  00002E                     ECANSendMessage@ptr:
  1046                           	opt callstack 0
  1047  00002E                     _fround$1885:
  1048                           	opt callstack 0
  1049  00002E                     _scale$1886:
  1050                           	opt callstack 0
  1051                           
  1052                           ; 4 bytes @ 0x2D
  1053  00002E                     	ds	2
  1054  000030                     ?_uds_get_vin:
  1055                           	opt callstack 0
  1056                           
  1057                           ; 1 bytes @ 0x2F
  1058  000030                     	ds	2
  1059  000032                     scale@scl:
  1060                           	opt callstack 0
  1061  000032                     ___fltol@sign1:
  1062                           	opt callstack 0
  1063  000032                     _fround$1884:
  1064                           	opt callstack 0
  1065                           
  1066                           ; 4 bytes @ 0x31
  1067  000032                     	ds	1
  1068  000033                     ___fltol@exp1:
  1069                           	opt callstack 0
  1070                           
  1071                           ; 1 bytes @ 0x32
  1072  000033                     	ds	1
  1073  000034                     ??_uds_get_vin:
  1074                           
  1075                           ; 1 bytes @ 0x33
  1076  000034                     	ds	2
  1077  000036                     fround@prec:
  1078                           	opt callstack 0
  1079                           
  1080                           ; 1 bytes @ 0x35
  1081  000036                     	ds	1
  1082  000037                     ?___fladd:
  1083                           	opt callstack 0
  1084  000037                     ___fladd@b:
  1085                           	opt callstack 0
  1086                           
  1087                           ; 4 bytes @ 0x36
  1088  000037                     	ds	4
  1089  00003B                     ___fladd@a:
  1090                           	opt callstack 0
  1091                           
  1092                           ; 4 bytes @ 0x3A
  1093  00003B                     	ds	4
  1094  00003F                     ??___fladd:
  1095                           
  1096                           ; 1 bytes @ 0x3E
  1097  00003F                     	ds	4
  1098  000043                     ___fladd@signs:
  1099                           	opt callstack 0
  1100                           
  1101                           ; 1 bytes @ 0x42
  1102  000043                     	ds	1
  1103  000044                     ___fladd@aexp:
  1104                           	opt callstack 0
  1105                           
  1106                           ; 1 bytes @ 0x43
  1107  000044                     	ds	1
  1108  000045                     ___fladd@bexp:
  1109                           	opt callstack 0
  1110                           
  1111                           ; 1 bytes @ 0x44
  1112  000045                     	ds	1
  1113  000046                     ___fladd@grs:
  1114                           	opt callstack 0
  1115                           
  1116                           ; 1 bytes @ 0x45
  1117  000046                     	ds	1
  1118  000047                     ?___flsub:
  1119                           	opt callstack 0
  1120  000047                     ___flsub@b:
  1121                           	opt callstack 0
  1122                           
  1123                           ; 4 bytes @ 0x46
  1124  000047                     	ds	4
  1125  00004B                     ___flsub@a:
  1126                           	opt callstack 0
  1127                           
  1128                           ; 4 bytes @ 0x4A
  1129  00004B                     	ds	4
  1130  00004F                     ?_sprintf:
  1131                           	opt callstack 0
  1132  00004F                     sprintf@sp:
  1133                           	opt callstack 0
  1134                           
  1135                           ; 2 bytes @ 0x4E
  1136  00004F                     	ds	2
  1137  000051                     sprintf@f:
  1138                           	opt callstack 0
  1139                           
  1140                           ; 2 bytes @ 0x50
  1141  000051                     	ds	6
  1142  000057                     ??_sprintf:
  1143                           
  1144                           ; 1 bytes @ 0x56
  1145  000057                     	ds	3
  1146  00005A                     ??_uds_get_soc:
  1147                           
  1148                           ; 1 bytes @ 0x59
  1149  00005A                     	ds	1
  1150                           
  1151 ;;
  1152 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1153 ;;
  1154 ;; *************** function _main *****************
  1155 ;; Defined at:
  1156 ;;		line 188 in file "main.c"
  1157 ;; Parameters:    Size  Location     Type
  1158 ;;  argc            2   62[BANK0 ] int 
  1159 ;;  argv            3   64[BANK0 ] PTR PTR unsigned char 
  1160 ;; Auto vars:     Size  Location     Type
  1161 ;;  i               2   68[BANK0 ] int 
  1162 ;; Return value:  Size  Location     Type
  1163 ;;                  2   62[BANK0 ] int 
  1164 ;; Registers used:
  1165 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1166 ;; Tracked objects:
  1167 ;;		On entry : 0/0
  1168 ;;		On exit  : 0/0
  1169 ;;		Unchanged: 0/0
  1170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1171 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1172 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1173 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1174 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1175 ;;Total ram usage:        8 bytes
  1176 ;; Hardware stack levels required when called:    7
  1177 ;; This function calls:
  1178 ;;		_ECANInitialize
  1179 ;;		_Open1USART
  1180 ;;		_PutString
  1181 ;;		_alive
  1182 ;;		_shell
  1183 ;; This function is called by:
  1184 ;;		Startup code after reset
  1185 ;; This function uses a non-reentrant model
  1186 ;;
  1187                           
  1188                           	psect	text0
  1189  00270A                     __ptext0:
  1190                           	opt callstack 0
  1191  00270A                     _main:
  1192                           	opt callstack 24
  1193                           
  1194                           ;main.c: 191: alive(2);
  1195                           
  1196                           ;incstack = 0
  1197  00270A  0E00               	movlw	0
  1198  00270C  6E04               	movwf	alive@j+1,c
  1199  00270E  0E02               	movlw	2
  1200  002710  6E03               	movwf	alive@j,c
  1201  002712  EC94  F014         	call	_alive	;wreg free
  1202                           
  1203                           ;main.c: 192: ECANInitialize();
  1204  002716  ECC0  F013         	call	_ECANInitialize	;wreg free
  1205                           
  1206                           ;main.c: 195: Open1USART(0b01111111 & 0b11111111 & 0b11111110 & 0b11111101 & 0b11111111 
      +                          & 0b11111111 , 26);
  1207  00271A  0E00               	movlw	0
  1208  00271C  6E04               	movwf	Open1USART@spbrg+1,c
  1209  00271E  0E1A               	movlw	26
  1210  002720  6E03               	movwf	Open1USART@spbrg,c
  1211  002722  0E7C               	movlw	124
  1212  002724  EC13  F015         	call	_Open1USART
  1213                           
  1214                           ;main.c: 196: alive(2);
  1215  002728  0E00               	movlw	0
  1216  00272A  6E04               	movwf	alive@j+1,c
  1217  00272C  0E02               	movlw	2
  1218  00272E  6E03               	movwf	alive@j,c
  1219  002730  EC94  F014         	call	_alive	;wreg free
  1220                           
  1221                           ;main.c: 200: GIE=1;
  1222  002734  8EF2               	bsf	4082,7,c	;volatile
  1223                           
  1224                           ;main.c: 202: PEIE=1;
  1225  002736  8CF2               	bsf	4082,6,c	;volatile
  1226                           
  1227                           ;main.c: 205: PutString("status: ready\n");
  1228  002738  0ED5               	movlw	low STR_12
  1229  00273A  6E05               	movwf	PutString@mess,c
  1230  00273C  0E7F               	movlw	high STR_12
  1231  00273E  6E06               	movwf	PutString@mess+1,c
  1232  002740  ECEA  F014         	call	_PutString	;wreg free
  1233                           
  1234                           ;main.c: 206: for (int i = 0; i < 10000; i++) {
  1235  002744  0E00               	movlw	0
  1236  002746  0100               	movlb	0	; () banked
  1237  002748  6FA5               	movwf	(main@i+1)& (0+255),b
  1238  00274A  0E00               	movlw	0
  1239  00274C  6FA4               	movwf	main@i& (0+255),b
  1240  00274E                     l5001:
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;main.c: 207: _delay((unsigned long)((1)*(16000000/4000.0)));
  1244  00274E  0E06               	movlw	6
  1245  002750  0100               	movlb	0	; () banked
  1246  002752  6FA3               	movwf	??_main& (0+255),b
  1247  002754  0E30               	movlw	48
  1248  002756                     u5587:
  1249  002756  2EE8               	decfsz	wreg,f,c
  1250  002758  D7FE               	bra	u5587
  1251  00275A  2FA3               	decfsz	??_main& (0+255),f,b
  1252  00275C  D7FC               	bra	u5587
  1253  00275E  F000               	nop	
  1254                           
  1255                           ;main.c: 208: shell();
  1256  002760  EC47  F013         	call	_shell	;wreg free
  1257  002764  0100               	movlb	0	; () banked
  1258  002766  4BA4               	infsnz	main@i& (0+255),f,b
  1259  002768  2BA5               	incf	(main@i+1)& (0+255),f,b
  1260                           
  1261                           ; BSR set to: 0
  1262  00276A  BFA5               	btfsc	(main@i+1)& (0+255),7,b
  1263  00276C  D7F0               	goto	l5001
  1264  00276E  0E10               	movlw	16
  1265  002770  5DA4               	subwf	main@i& (0+255),w,b
  1266  002772  0E27               	movlw	39
  1267  002774  59A5               	subwfb	(main@i+1)& (0+255),w,b
  1268  002776  A0D8               	btfss	status,0,c
  1269  002778  D7EA               	goto	l5001
  1270                           
  1271                           ; BSR set to: 0
  1272  00277A  00FF               	reset		;# 
  1273  00277C  EF1E  F000         	goto	start
  1274  002780                     __end_of_main:
  1275                           	opt callstack 0
  1276                           
  1277 ;; *************** function _shell *****************
  1278 ;; Defined at:
  1279 ;;		line 166 in file "main.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;		None
  1282 ;; Auto vars:     Size  Location     Type
  1283 ;;		None
  1284 ;; Return value:  Size  Location     Type
  1285 ;;                  1    wreg      void 
  1286 ;; Registers used:
  1287 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1288 ;; Tracked objects:
  1289 ;;		On entry : 0/0
  1290 ;;		On exit  : 0/0
  1291 ;;		Unchanged: 0/0
  1292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1295 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1296 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1297 ;;Total ram usage:        1 bytes
  1298 ;; Hardware stack levels used:    1
  1299 ;; Hardware stack levels required when called:    6
  1300 ;; This function calls:
  1301 ;;		_PutString
  1302 ;;		_Putchar
  1303 ;;		_alive
  1304 ;;		_uds_get_soc
  1305 ;;		_uds_get_vin
  1306 ;; This function is called by:
  1307 ;;		_main
  1308 ;; This function uses a non-reentrant model
  1309 ;;
  1310                           
  1311                           	psect	text1
  1312  00268E                     __ptext1:
  1313                           	opt callstack 0
  1314  00268E                     _shell:
  1315                           	opt callstack 24
  1316                           
  1317                           ;main.c: 167: if (cmd != 0) {
  1318                           
  1319                           ;incstack = 0
  1320  00268E  505C               	movf	_cmd,w,c
  1321  002690  B4D8               	btfsc	status,2,c
  1322  002692  D038               	goto	l4981
  1323                           
  1324                           ;main.c: 168: alive(1);
  1325  002694  0E00               	movlw	0
  1326  002696  6E04               	movwf	alive@j+1,c
  1327  002698  0E01               	movlw	1
  1328  00269A  6E03               	movwf	alive@j,c
  1329  00269C  EC94  F014         	call	_alive	;wreg free
  1330                           
  1331                           ;main.c: 169: if (cmd == 's') {
  1332  0026A0  0E73               	movlw	115
  1333  0026A2  185C               	xorwf	_cmd,w,c
  1334  0026A4  A4D8               	btfss	status,2,c
  1335  0026A6  D003               	goto	l4965
  1336                           
  1337                           ;main.c: 170: uds_get_soc();
  1338  0026A8  EC84  F00D         	call	_uds_get_soc	;wreg free
  1339                           
  1340                           ;main.c: 171: } else if (cmd == 'r') {
  1341  0026AC  D021               	goto	l4979
  1342  0026AE                     l4965:
  1343  0026AE  0E72               	movlw	114
  1344  0026B0  185C               	xorwf	_cmd,w,c
  1345  0026B2  A4D8               	btfss	status,2,c
  1346  0026B4  D002               	goto	l4969
  1347  0026B6  00FF               	reset		;# 
  1348                           
  1349                           ;main.c: 173: } else if (cmd == 'v') {
  1350  0026B8  D01B               	goto	l4979
  1351  0026BA                     l4969:
  1352  0026BA  0E76               	movlw	118
  1353  0026BC  185C               	xorwf	_cmd,w,c
  1354  0026BE  A4D8               	btfss	status,2,c
  1355  0026C0  D00B               	goto	l4973
  1356                           
  1357                           ;main.c: 174: uds_get_vin(0,1);
  1358  0026C2  0E00               	movlw	0
  1359  0026C4  6E31               	movwf	?_uds_get_vin+1,c
  1360  0026C6  0E00               	movlw	0
  1361  0026C8  6E30               	movwf	?_uds_get_vin,c
  1362  0026CA  0E00               	movlw	0
  1363  0026CC  6E33               	movwf	?_uds_get_vin+3,c
  1364  0026CE  0E01               	movlw	1
  1365  0026D0  6E32               	movwf	?_uds_get_vin+2,c
  1366  0026D2  ECAF  F00B         	call	_uds_get_vin	;wreg free
  1367                           
  1368                           ;main.c: 175: } else {
  1369  0026D6  D00C               	goto	l4979
  1370  0026D8                     l4973:
  1371                           
  1372                           ;main.c: 176: PutString("error: invalid cmd ");
  1373  0026D8  0EB0               	movlw	low STR_11
  1374  0026DA  6E05               	movwf	PutString@mess,c
  1375  0026DC  0E7F               	movlw	high STR_11
  1376  0026DE  6E06               	movwf	PutString@mess+1,c
  1377  0026E0  ECEA  F014         	call	_PutString	;wreg free
  1378                           
  1379                           ;main.c: 177: Putchar(cmd);
  1380  0026E4  505C               	movf	_cmd,w,c
  1381  0026E6  ECDC  F015         	call	_Putchar
  1382                           
  1383                           ;main.c: 178: Putchar('\n');
  1384  0026EA  0E0A               	movlw	10
  1385  0026EC  ECDC  F015         	call	_Putchar
  1386  0026F0                     l4979:
  1387                           
  1388                           ;main.c: 179: };main.c: 180: _delay((unsigned long)((1)*(16000000/4000.0)));
  1389  0026F0  0E06               	movlw	6
  1390  0026F2  0100               	movlb	0	; () banked
  1391  0026F4  6F9D               	movwf	??_shell& (0+255),b
  1392  0026F6  0E30               	movlw	48
  1393  0026F8                     u5597:
  1394  0026F8  2EE8               	decfsz	wreg,f,c
  1395  0026FA  D7FE               	bra	u5597
  1396  0026FC  2F9D               	decfsz	??_shell& (0+255),f,b
  1397  0026FE  D7FC               	bra	u5597
  1398  002700  F000               	nop	
  1399  002702  00FF               	reset		;# 
  1400  002704                     l4981:
  1401                           
  1402                           ;main.c: 182: };main.c: 184: cmd = 0;
  1403  002704  0E00               	movlw	0
  1404  002706  6E5C               	movwf	_cmd,c
  1405  002708  0012               	return		;funcret
  1406  00270A                     __end_of_shell:
  1407                           	opt callstack 0
  1408                           
  1409 ;; *************** function _uds_get_vin *****************
  1410 ;; Defined at:
  1411 ;;		line 70 in file "main.c"
  1412 ;; Parameters:    Size  Location     Type
  1413 ;;		None
  1414 ;; Auto vars:     Size  Location     Type
  1415 ;;  i               1   55[BANK0 ] unsigned char 
  1416 ;;  t               2   52[BANK0 ] int 
  1417 ;;  i               2   50[BANK0 ] int 
  1418 ;;  buf           128    0        unsigned char [128]
  1419 ;;  msg2           32   16[BANK0 ] unsigned char [32]
  1420 ;;  msg_continue    8    8[BANK0 ] unsigned char [8]
  1421 ;;  msg_start       8    0[BANK0 ] unsigned char [8]
  1422 ;;  id              4   57[BANK0 ] unsigned long 
  1423 ;;  total_size      2   48[BANK0 ] int 
  1424 ;;  flags           1   56[BANK0 ] enum E12300
  1425 ;;  len             1   54[BANK0 ] unsigned char 
  1426 ;; Return value:  Size  Location     Type
  1427 ;;                  1    wreg      void 
  1428 ;; Registers used:
  1429 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1430 ;; Tracked objects:
  1431 ;;		On entry : 0/0
  1432 ;;		On exit  : 0/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1435 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1436 ;;      Locals:         0      61       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1437 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1438 ;;      Totals:         5      61       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1439 ;;Total ram usage:       66 bytes
  1440 ;; Hardware stack levels used:    1
  1441 ;; Hardware stack levels required when called:    5
  1442 ;; This function calls:
  1443 ;;		_ECANReceiveMessage
  1444 ;;		_ECANSendMessage
  1445 ;;		_PutString
  1446 ;;		_Putchar
  1447 ;; This function is called by:
  1448 ;;		_shell
  1449 ;; This function uses a non-reentrant model
  1450 ;;
  1451                           
  1452                           	psect	text2
  1453  00175E                     __ptext2:
  1454                           	opt callstack 0
  1455  00175E                     _uds_get_vin:
  1456                           	opt callstack 24
  1457                           
  1458                           ;main.c: 71: PutString("status: busy\n");
  1459                           
  1460                           ;incstack = 0
  1461  00175E  0EE4               	movlw	low STR_1
  1462  001760  6E05               	movwf	PutString@mess,c
  1463  001762  0E7F               	movlw	high STR_1
  1464  001764  6E06               	movwf	PutString@mess+1,c
  1465  001766  ECEA  F014         	call	_PutString	;wreg free
  1466                           
  1467                           ;main.c: 72: BYTE msg_start[] = {0x03, 0x22, 0xF1, 0x90, 0x55, 0x55, 0x55, 0x55};
  1468  00176A  EE20  F0D4         	lfsr	2,uds_get_vin@F12346
  1469  00176E  EE10  F060         	lfsr	1,uds_get_vin@msg_start
  1470  001772  0E07               	movlw	7
  1471  001774                     u5051:
  1472  001774  CFDB FFE3          	movff	plusw2,plusw1
  1473  001778  06E8               	decf	wreg,f,c
  1474  00177A  E2FC               	bc	u5051
  1475                           
  1476                           ;main.c: 73: BYTE msg_continue[] = {0x30, 0xff, 0x01, 0x55, 0x55, 0x55, 0x55, 0x55};
  1477  00177C  EE20  F0CC         	lfsr	2,uds_get_vin@F12348
  1478  001780  EE10  F068         	lfsr	1,uds_get_vin@msg_continue
  1479  001784  0E07               	movlw	7
  1480  001786                     u5061:
  1481  001786  CFDB FFE3          	movff	plusw2,plusw1
  1482  00178A  06E8               	decf	wreg,f,c
  1483  00178C  E2FC               	bc	u5061
  1484                           
  1485                           ;main.c: 74: if (!ECANSendMessage(0x7E0, msg_start, 8, 0)) {
  1486  00178E  0EE0               	movlw	224
  1487  001790  6E0E               	movwf	ECANSendMessage@id,c
  1488  001792  0E07               	movlw	7
  1489  001794  6E0F               	movwf	ECANSendMessage@id+1,c
  1490  001796  0E00               	movlw	0
  1491  001798  6E10               	movwf	ECANSendMessage@id+2,c
  1492  00179A  0E00               	movlw	0
  1493  00179C  6E11               	movwf	ECANSendMessage@id+3,c
  1494  00179E  0E60               	movlw	low uds_get_vin@msg_start
  1495  0017A0  6E12               	movwf	ECANSendMessage@data,c
  1496  0017A2  0E00               	movlw	high uds_get_vin@msg_start
  1497  0017A4  6E13               	movwf	ECANSendMessage@data+1,c
  1498  0017A6  0E08               	movlw	8
  1499  0017A8  6E14               	movwf	ECANSendMessage@dataLen,c
  1500  0017AA  0E00               	movlw	0
  1501  0017AC  6E15               	movwf	ECANSendMessage@msgFlags,c
  1502  0017AE  EC37  F010         	call	_ECANSendMessage	;wreg free
  1503  0017B2  0900               	iorlw	0
  1504  0017B4  A4D8               	btfss	status,2,c
  1505  0017B6  D006               	goto	l4623
  1506                           
  1507                           ;main.c: 75: PutString("error: can send failed\n");
  1508  0017B8  0E84               	movlw	low (STR_7+1)
  1509  0017BA  6E05               	movwf	PutString@mess,c
  1510  0017BC  0E7F               	movlw	high (STR_7+1)
  1511  0017BE  6E06               	movwf	PutString@mess+1,c
  1512  0017C0  ECEA  F014         	call	_PutString	;wreg free
  1513  0017C4                     l4623:
  1514                           
  1515                           ;main.c: 76: };main.c: 78: unsigned long id = 0;
  1516  0017C4  0E00               	movlw	0
  1517  0017C6  0100               	movlb	0	; () banked
  1518  0017C8  6F99               	movwf	uds_get_vin@id& (0+255),b
  1519  0017CA  0E00               	movlw	0
  1520  0017CC  6F9A               	movwf	(uds_get_vin@id+1)& (0+255),b
  1521  0017CE  0E00               	movlw	0
  1522  0017D0  6F9B               	movwf	(uds_get_vin@id+2)& (0+255),b
  1523  0017D2  0E00               	movlw	0
  1524  0017D4  6F9C               	movwf	(uds_get_vin@id+3)& (0+255),b
  1525                           
  1526                           ; BSR set to: 0
  1527                           ;main.c: 79: BYTE len = 32;
  1528  0017D6  0E20               	movlw	32
  1529  0017D8  6F96               	movwf	uds_get_vin@len& (0+255),b
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;main.c: 80: ECAN_RX_MSG_FLAGS flags = 0;
  1533  0017DA  0E00               	movlw	0
  1534  0017DC  6F98               	movwf	uds_get_vin@flags& (0+255),b
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;main.c: 89: for(int i = 0; i < 100; i++) {
  1538                           
  1539                           ; BSR set to: 0
  1540  0017DE  0E00               	movlw	0
  1541  0017E0  6F93               	movwf	(uds_get_vin@i+1)& (0+255),b
  1542  0017E2  0E00               	movlw	0
  1543  0017E4  6F92               	movwf	uds_get_vin@i& (0+255),b
  1544  0017E6                     l4637:
  1545                           
  1546                           ; BSR set to: 0
  1547                           ;main.c: 90: _delay((unsigned long)((5)*(16000000/4000.0)));
  1548  0017E6  0E1A               	movlw	26
  1549  0017E8  6E34               	movwf	??_uds_get_vin& (0+255),c
  1550  0017EA  0EF8               	movlw	248
  1551  0017EC                     u5607:
  1552  0017EC  2EE8               	decfsz	wreg,f,c
  1553  0017EE  D7FE               	bra	u5607
  1554  0017F0  2E34               	decfsz	??_uds_get_vin& (0+255),f,c
  1555  0017F2  D7FC               	bra	u5607
  1556  0017F4  D000               	nop2	
  1557                           
  1558                           ;main.c: 91: if (ECANReceiveMessage(&id, msg2, &len, &flags)) {
  1559  0017F6  0E99               	movlw	low uds_get_vin@id
  1560  0017F8  6E0C               	movwf	ECANReceiveMessage@id,c
  1561  0017FA  0E00               	movlw	high uds_get_vin@id
  1562  0017FC  6E0D               	movwf	ECANReceiveMessage@id+1,c
  1563  0017FE  0E70               	movlw	low uds_get_vin@msg2
  1564  001800  6E0E               	movwf	ECANReceiveMessage@data,c
  1565  001802  0E00               	movlw	high uds_get_vin@msg2
  1566  001804  6E0F               	movwf	ECANReceiveMessage@data+1,c
  1567  001806  0E96               	movlw	low uds_get_vin@len
  1568  001808  6E10               	movwf	ECANReceiveMessage@dataLen,c
  1569  00180A  0E00               	movlw	high uds_get_vin@len
  1570  00180C  6E11               	movwf	ECANReceiveMessage@dataLen+1,c
  1571  00180E  0E98               	movlw	low uds_get_vin@flags
  1572  001810  6E12               	movwf	ECANReceiveMessage@msgFlags,c
  1573  001812  0E00               	movlw	high uds_get_vin@flags
  1574  001814  6E13               	movwf	ECANReceiveMessage@msgFlags+1,c
  1575  001816  ECEA  F00E         	call	_ECANReceiveMessage	;wreg free
  1576  00181A  0900               	iorlw	0
  1577  00181C  B4D8               	btfsc	status,2,c
  1578  00181E  D04B               	goto	l4663
  1579                           
  1580                           ;main.c: 92: if (id == 0x7E8 && msg2[0] == 0x10 && msg2[2] == 0x62 && msg2[3] == 0xF1) {
  1581  001820  0EE8               	movlw	232
  1582  001822  0100               	movlb	0	; () banked
  1583  001824  1999               	xorwf	uds_get_vin@id& (0+255),w,b
  1584  001826  E147               	bnz	l4663
  1585  001828  0E07               	movlw	7
  1586  00182A  199A               	xorwf	(uds_get_vin@id+1)& (0+255),w,b
  1587  00182C  119B               	iorwf	(uds_get_vin@id+2)& (0+255),w,b
  1588  00182E  119C               	iorwf	(uds_get_vin@id+3)& (0+255),w,b
  1589  001830  A4D8               	btfss	status,2,c
  1590  001832  D041               	goto	l4663
  1591                           
  1592                           ; BSR set to: 0
  1593  001834  0E10               	movlw	16
  1594  001836  1970               	xorwf	uds_get_vin@msg2& (0+255),w,b
  1595  001838  A4D8               	btfss	status,2,c
  1596  00183A  D03D               	goto	l4663
  1597                           
  1598                           ; BSR set to: 0
  1599  00183C  0E62               	movlw	98
  1600  00183E  1972               	xorwf	(uds_get_vin@msg2+2)& (0+255),w,b
  1601  001840  A4D8               	btfss	status,2,c
  1602  001842  D039               	goto	l4663
  1603                           
  1604                           ; BSR set to: 0
  1605  001844  0EF1               	movlw	241
  1606  001846  1973               	xorwf	(uds_get_vin@msg2+3)& (0+255),w,b
  1607  001848  A4D8               	btfss	status,2,c
  1608  00184A  D035               	goto	l4663
  1609                           
  1610                           ; BSR set to: 0
  1611                           ;main.c: 96: if (!ECANSendMessage(0x7E0, msg_continue, 8, 0)) {
  1612  00184C  0EE0               	movlw	224
  1613  00184E  6E0E               	movwf	ECANSendMessage@id,c
  1614  001850  0E07               	movlw	7
  1615  001852  6E0F               	movwf	ECANSendMessage@id+1,c
  1616  001854  0E00               	movlw	0
  1617  001856  6E10               	movwf	ECANSendMessage@id+2,c
  1618  001858  0E00               	movlw	0
  1619  00185A  6E11               	movwf	ECANSendMessage@id+3,c
  1620  00185C  0E68               	movlw	low uds_get_vin@msg_continue
  1621  00185E  6E12               	movwf	ECANSendMessage@data,c
  1622  001860  0E00               	movlw	high uds_get_vin@msg_continue
  1623  001862  6E13               	movwf	ECANSendMessage@data+1,c
  1624  001864  0E08               	movlw	8
  1625  001866  6E14               	movwf	ECANSendMessage@dataLen,c
  1626  001868  0E00               	movlw	0
  1627  00186A  6E15               	movwf	ECANSendMessage@msgFlags,c
  1628  00186C  EC37  F010         	call	_ECANSendMessage	;wreg free
  1629  001870  0900               	iorlw	0
  1630  001872  A4D8               	btfss	status,2,c
  1631  001874  D006               	goto	l4653
  1632                           
  1633                           ;main.c: 97: PutString("\nerror: can send failed\n");
  1634  001876  0E83               	movlw	low STR_7
  1635  001878  6E05               	movwf	PutString@mess,c
  1636  00187A  0E7F               	movlw	high STR_7
  1637  00187C  6E06               	movwf	PutString@mess+1,c
  1638  00187E  ECEA  F014         	call	_PutString	;wreg free
  1639  001882                     l4653:
  1640                           
  1641                           ;main.c: 98: };main.c: 100: total_size = msg2[1] - 6;
  1642  001882  0EFA               	movlw	250
  1643  001884  0100               	movlb	0	; () banked
  1644  001886  2571               	addwf	(uds_get_vin@msg2+1)& (0+255),w,b
  1645  001888  6F90               	movwf	uds_get_vin@total_size& (0+255),b
  1646  00188A  6B91               	clrf	(uds_get_vin@total_size+1)& (0+255),b
  1647  00188C  0EFF               	movlw	255
  1648  00188E  2391               	addwfc	(uds_get_vin@total_size+1)& (0+255),f,b
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;main.c: 102: PutString("value vin: ");
  1652  001890  0EF2               	movlw	low STR_8
  1653  001892  6E05               	movwf	PutString@mess,c
  1654  001894  0E7F               	movlw	high STR_8
  1655  001896  6E06               	movwf	PutString@mess+1,c
  1656  001898  ECEA  F014         	call	_PutString	;wreg free
  1657                           
  1658                           ;main.c: 103: Putchar(msg2[5]);
  1659  00189C  0100               	movlb	0	; () banked
  1660  00189E  5175               	movf	(uds_get_vin@msg2+5)& (0+255),w,b
  1661  0018A0  ECDC  F015         	call	_Putchar
  1662                           
  1663                           ;main.c: 104: Putchar(msg2[6]);
  1664  0018A4  0100               	movlb	0	; () banked
  1665  0018A6  5176               	movf	(uds_get_vin@msg2+6)& (0+255),w,b
  1666  0018A8  ECDC  F015         	call	_Putchar
  1667                           
  1668                           ;main.c: 105: Putchar(msg2[7]);
  1669  0018AC  0100               	movlb	0	; () banked
  1670  0018AE  5177               	movf	(uds_get_vin@msg2+7)& (0+255),w,b
  1671  0018B0  ECDC  F015         	call	_Putchar
  1672                           
  1673                           ;main.c: 106: goto ok1;
  1674  0018B4  D012               	goto	l4671
  1675  0018B6                     l4663:
  1676  0018B6  0100               	movlb	0	; () banked
  1677  0018B8  4B92               	infsnz	uds_get_vin@i& (0+255),f,b
  1678  0018BA  2B93               	incf	(uds_get_vin@i+1)& (0+255),f,b
  1679                           
  1680                           ; BSR set to: 0
  1681  0018BC  BF93               	btfsc	(uds_get_vin@i+1)& (0+255),7,b
  1682  0018BE  D793               	goto	l4637
  1683  0018C0  5193               	movf	(uds_get_vin@i+1)& (0+255),w,b
  1684  0018C2  E104               	bnz	u5140
  1685  0018C4  0E64               	movlw	100
  1686  0018C6  5D92               	subwf	uds_get_vin@i& (0+255),w,b
  1687  0018C8  A0D8               	btfss	status,0,c
  1688  0018CA  D78D               	goto	l4637
  1689  0018CC                     u5140:
  1690                           
  1691                           ; BSR set to: 0
  1692                           ;main.c: 107: };main.c: 108: };main.c: 109: };main.c: 111: PutString("\nerror: timeout\n
      +                          ");
  1693  0018CC  0EC4               	movlw	low STR_9
  1694  0018CE  6E05               	movwf	PutString@mess,c
  1695  0018D0  0E7F               	movlw	high STR_9
  1696  0018D2  6E06               	movwf	PutString@mess+1,c
  1697  0018D4  ECEA  F014         	call	_PutString	;wreg free
  1698  0018D8  0012               	return	
  1699  0018DA                     l4671:
  1700                           
  1701                           ;main.c: 116: for(int t = 0; t < 100; t++) {
  1702  0018DA  0E00               	movlw	0
  1703  0018DC  0100               	movlb	0	; () banked
  1704  0018DE  6F95               	movwf	(uds_get_vin@t+1)& (0+255),b
  1705  0018E0  0E00               	movlw	0
  1706  0018E2  6F94               	movwf	uds_get_vin@t& (0+255),b
  1707  0018E4                     l4677:
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;main.c: 117: _delay((unsigned long)((5)*(16000000/4000.0)));
  1711  0018E4  0E1A               	movlw	26
  1712  0018E6  6E34               	movwf	??_uds_get_vin& (0+255),c
  1713  0018E8  0EF8               	movlw	248
  1714  0018EA                     u5617:
  1715  0018EA  2EE8               	decfsz	wreg,f,c
  1716  0018EC  D7FE               	bra	u5617
  1717  0018EE  2E34               	decfsz	??_uds_get_vin& (0+255),f,c
  1718  0018F0  D7FC               	bra	u5617
  1719  0018F2  D000               	nop2	
  1720                           
  1721                           ;main.c: 118: if (ECANReceiveMessage(&id, msg2, &len, &flags)) {
  1722  0018F4  0E99               	movlw	low uds_get_vin@id
  1723  0018F6  6E0C               	movwf	ECANReceiveMessage@id,c
  1724  0018F8  0E00               	movlw	high uds_get_vin@id
  1725  0018FA  6E0D               	movwf	ECANReceiveMessage@id+1,c
  1726  0018FC  0E70               	movlw	low uds_get_vin@msg2
  1727  0018FE  6E0E               	movwf	ECANReceiveMessage@data,c
  1728  001900  0E00               	movlw	high uds_get_vin@msg2
  1729  001902  6E0F               	movwf	ECANReceiveMessage@data+1,c
  1730  001904  0E96               	movlw	low uds_get_vin@len
  1731  001906  6E10               	movwf	ECANReceiveMessage@dataLen,c
  1732  001908  0E00               	movlw	high uds_get_vin@len
  1733  00190A  6E11               	movwf	ECANReceiveMessage@dataLen+1,c
  1734  00190C  0E98               	movlw	low uds_get_vin@flags
  1735  00190E  6E12               	movwf	ECANReceiveMessage@msgFlags,c
  1736  001910  0E00               	movlw	high uds_get_vin@flags
  1737  001912  6E13               	movwf	ECANReceiveMessage@msgFlags+1,c
  1738  001914  ECEA  F00E         	call	_ECANReceiveMessage	;wreg free
  1739  001918  0900               	iorlw	0
  1740  00191A  B4D8               	btfsc	status,2,c
  1741  00191C  D024               	goto	u5180
  1742                           
  1743                           ;main.c: 119: if (id == 0x7E8 ) {
  1744  00191E  0EE8               	movlw	232
  1745  001920  0100               	movlb	0	; () banked
  1746  001922  1999               	xorwf	uds_get_vin@id& (0+255),w,b
  1747  001924  E120               	bnz	l4701
  1748  001926  0E07               	movlw	7
  1749  001928  199A               	xorwf	(uds_get_vin@id+1)& (0+255),w,b
  1750  00192A  119B               	iorwf	(uds_get_vin@id+2)& (0+255),w,b
  1751  00192C  119C               	iorwf	(uds_get_vin@id+3)& (0+255),w,b
  1752  00192E  A4D8               	btfss	status,2,c
  1753  001930  D01A               	goto	u5180
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;main.c: 120: for (unsigned char i = 1; i < 8; i++) {
  1757  001932  0E01               	movlw	1
  1758  001934  6F97               	movwf	uds_get_vin@i_332& (0+255),b
  1759  001936                     l4689:
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;main.c: 121: Putchar(msg2[i]);
  1763  001936  0E70               	movlw	low uds_get_vin@msg2
  1764  001938  2597               	addwf	uds_get_vin@i_332& (0+255),w,b
  1765  00193A  6ED9               	movwf	fsr2l,c
  1766  00193C  6ADA               	clrf	fsr2h,c
  1767  00193E  0E00               	movlw	high uds_get_vin@msg2
  1768  001940  22DA               	addwfc	fsr2h,f,c
  1769  001942  50DF               	movf	indf2,w,c
  1770  001944  ECDC  F015         	call	_Putchar
  1771                           
  1772                           ;main.c: 122: total_size -= 1;
  1773  001948  0100               	movlb	0	; () banked
  1774  00194A  0790               	decf	uds_get_vin@total_size& (0+255),f,b
  1775  00194C  A0D8               	btfss	status,0,c
  1776  00194E  0791               	decf	(uds_get_vin@total_size+1)& (0+255),f,b
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;main.c: 123: if (total_size <=0) {
  1780  001950  BF91               	btfsc	(uds_get_vin@total_size+1)& (0+255),7,b
  1781  001952  D01B               	goto	l4709
  1782  001954  5191               	movf	(uds_get_vin@total_size+1)& (0+255),w,b
  1783  001956  E103               	bnz	l4697
  1784  001958  0590               	decf	uds_get_vin@total_size& (0+255),w,b
  1785  00195A  A0D8               	btfss	status,0,c
  1786  00195C  D016               	goto	l4709
  1787  00195E                     l4697:
  1788                           
  1789                           ; BSR set to: 0
  1790  00195E  2B97               	incf	uds_get_vin@i_332& (0+255),f,b
  1791                           
  1792                           ; BSR set to: 0
  1793  001960  0E07               	movlw	7
  1794  001962  6597               	cpfsgt	uds_get_vin@i_332& (0+255),b
  1795  001964  D7E8               	goto	l4689
  1796  001966                     u5180:
  1797  001966                     l4701:
  1798  001966  0100               	movlb	0	; () banked
  1799  001968  4B94               	infsnz	uds_get_vin@t& (0+255),f,b
  1800  00196A  2B95               	incf	(uds_get_vin@t+1)& (0+255),f,b
  1801                           
  1802                           ; BSR set to: 0
  1803  00196C  BF95               	btfsc	(uds_get_vin@t+1)& (0+255),7,b
  1804  00196E  D7BA               	goto	l4677
  1805  001970  5195               	movf	(uds_get_vin@t+1)& (0+255),w,b
  1806  001972  E104               	bnz	u5190
  1807  001974  0E64               	movlw	100
  1808  001976  5D94               	subwf	uds_get_vin@t& (0+255),w,b
  1809  001978  A0D8               	btfss	status,0,c
  1810  00197A  D7B4               	goto	l4677
  1811  00197C                     u5190:
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;main.c: 125: };main.c: 126: };main.c: 127: };main.c: 128: };main.c: 129: };main.c: 131:
      +                           PutString("\nerror: timeout\n");
  1815  00197C  0EC4               	movlw	low STR_9
  1816  00197E  6E05               	movwf	PutString@mess,c
  1817  001980  0E7F               	movlw	high STR_9
  1818  001982  6E06               	movwf	PutString@mess+1,c
  1819  001984  ECEA  F014         	call	_PutString	;wreg free
  1820  001988  0012               	return	
  1821  00198A                     l4709:
  1822                           
  1823                           ; BSR set to: 0
  1824                           ;main.c: 135: Putchar('\n');
  1825  00198A  0E0A               	movlw	10
  1826  00198C  ECDC  F015         	call	_Putchar
  1827  001990  0012               	return		;funcret
  1828  001992                     __end_of_uds_get_vin:
  1829                           	opt callstack 0
  1830                           
  1831 ;; *************** function _uds_get_soc *****************
  1832 ;; Defined at:
  1833 ;;		line 39 in file "main.c"
  1834 ;; Parameters:    Size  Location     Type
  1835 ;;		None
  1836 ;; Auto vars:     Size  Location     Type
  1837 ;;  i               2  173[BANK1 ] int 
  1838 ;;  buf           128    0[BANK1 ] unsigned char [128]
  1839 ;;  msg2           32  128[BANK1 ] unsigned char [32]
  1840 ;;  msg             8  160[BANK1 ] unsigned char [8]
  1841 ;;  id              4  176[BANK1 ] unsigned long 
  1842 ;;  flags           1  175[BANK1 ] enum E12300
  1843 ;;  len             1  172[BANK1 ] unsigned char 
  1844 ;; Return value:  Size  Location     Type
  1845 ;;                  1    wreg      void 
  1846 ;; Registers used:
  1847 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1848 ;; Tracked objects:
  1849 ;;		On entry : 0/0
  1850 ;;		On exit  : 0/0
  1851 ;;		Unchanged: 0/0
  1852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1854 ;;      Locals:         0       0     180       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1855 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1856 ;;      Totals:         1       0     180       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1857 ;;Total ram usage:      181 bytes
  1858 ;; Hardware stack levels used:    1
  1859 ;; Hardware stack levels required when called:    5
  1860 ;; This function calls:
  1861 ;;		_ECANReceiveMessage
  1862 ;;		_ECANSendMessage
  1863 ;;		_PutString
  1864 ;;		___fldiv
  1865 ;;		___xxtofl
  1866 ;;		_sprintf
  1867 ;; This function is called by:
  1868 ;;		_shell
  1869 ;; This function uses a non-reentrant model
  1870 ;;
  1871                           
  1872                           	psect	text3
  1873  001B08                     __ptext3:
  1874                           	opt callstack 0
  1875  001B08                     _uds_get_soc:
  1876                           	opt callstack 24
  1877                           
  1878                           ;main.c: 40: PutString("status: busy\n");
  1879                           
  1880                           ;incstack = 0
  1881  001B08  0EE4               	movlw	low STR_1
  1882  001B0A  6E05               	movwf	PutString@mess,c
  1883  001B0C  0E7F               	movlw	high STR_1
  1884  001B0E  6E06               	movwf	PutString@mess+1,c
  1885  001B10  ECEA  F014         	call	_PutString	;wreg free
  1886                           
  1887                           ;main.c: 41: BYTE msg[] = {0x03, 0x22, 0x1D, 0xD0, 0x55, 0x55, 0x55, 0x55};
  1888  001B14  EE21  F0B4         	lfsr	2,uds_get_soc@F12336
  1889  001B18  EE11  F0A0         	lfsr	1,uds_get_soc@msg
  1890  001B1C  0E07               	movlw	7
  1891  001B1E                     u4981:
  1892  001B1E  CFDB FFE3          	movff	plusw2,plusw1
  1893  001B22  06E8               	decf	wreg,f,c
  1894  001B24  E2FC               	bc	u4981
  1895                           
  1896                           ;main.c: 42: if (!ECANSendMessage(0x765, msg, 8, 0)) {
  1897  001B26  0E65               	movlw	101
  1898  001B28  6E0E               	movwf	ECANSendMessage@id,c
  1899  001B2A  0E07               	movlw	7
  1900  001B2C  6E0F               	movwf	ECANSendMessage@id+1,c
  1901  001B2E  0E00               	movlw	0
  1902  001B30  6E10               	movwf	ECANSendMessage@id+2,c
  1903  001B32  0E00               	movlw	0
  1904  001B34  6E11               	movwf	ECANSendMessage@id+3,c
  1905  001B36  0EA0               	movlw	low uds_get_soc@msg
  1906  001B38  6E12               	movwf	ECANSendMessage@data,c
  1907  001B3A  0E01               	movlw	high uds_get_soc@msg
  1908  001B3C  6E13               	movwf	ECANSendMessage@data+1,c
  1909  001B3E  0E08               	movlw	8
  1910  001B40  6E14               	movwf	ECANSendMessage@dataLen,c
  1911  001B42  0E00               	movlw	0
  1912  001B44  6E15               	movwf	ECANSendMessage@msgFlags,c
  1913  001B46  EC37  F010         	call	_ECANSendMessage	;wreg free
  1914  001B4A  0900               	iorlw	0
  1915  001B4C  A4D8               	btfss	status,2,c
  1916  001B4E  D006               	goto	l4577
  1917                           
  1918                           ;main.c: 43: PutString("error: can send failed\n");
  1919  001B50  0E84               	movlw	low (STR_7+1)
  1920  001B52  6E05               	movwf	PutString@mess,c
  1921  001B54  0E7F               	movlw	high (STR_7+1)
  1922  001B56  6E06               	movwf	PutString@mess+1,c
  1923  001B58  ECEA  F014         	call	_PutString	;wreg free
  1924  001B5C                     l4577:
  1925                           
  1926                           ;main.c: 44: };main.c: 46: unsigned long id = 0;
  1927  001B5C  0E00               	movlw	0
  1928  001B5E  0101               	movlb	1	; () banked
  1929  001B60  6FB0               	movwf	uds_get_soc@id& (0+255),b
  1930  001B62  0E00               	movlw	0
  1931  001B64  6FB1               	movwf	(uds_get_soc@id+1)& (0+255),b
  1932  001B66  0E00               	movlw	0
  1933  001B68  6FB2               	movwf	(uds_get_soc@id+2)& (0+255),b
  1934  001B6A  0E00               	movlw	0
  1935  001B6C  6FB3               	movwf	(uds_get_soc@id+3)& (0+255),b
  1936                           
  1937                           ; BSR set to: 1
  1938                           ;main.c: 47: BYTE len = 32;
  1939  001B6E  0E20               	movlw	32
  1940  001B70  6FAC               	movwf	uds_get_soc@len& (0+255),b
  1941                           
  1942                           ; BSR set to: 1
  1943                           ;main.c: 48: ECAN_RX_MSG_FLAGS flags = 0;
  1944  001B72  0E00               	movlw	0
  1945  001B74  6FAF               	movwf	uds_get_soc@flags& (0+255),b
  1946                           
  1947                           ; BSR set to: 1
  1948                           ;main.c: 49: BYTE msg2[32];;main.c: 50: BYTE buf[128];;main.c: 53: for(int i = 0; i < 10
      +                          0; i++) {
  1949  001B76  0E00               	movlw	0
  1950  001B78  6FAE               	movwf	(uds_get_soc@i+1)& (0+255),b
  1951  001B7A  0E00               	movlw	0
  1952  001B7C  6FAD               	movwf	uds_get_soc@i& (0+255),b
  1953  001B7E                     l4589:
  1954                           
  1955                           ; BSR set to: 1
  1956                           ;main.c: 54: _delay((unsigned long)((10)*(16000000/4000.0)));
  1957  001B7E  0E34               	movlw	52
  1958  001B80  6E5A               	movwf	??_uds_get_soc& (0+255),c
  1959  001B82  0EF2               	movlw	242
  1960  001B84                     u5627:
  1961  001B84  2EE8               	decfsz	wreg,f,c
  1962  001B86  D7FE               	bra	u5627
  1963  001B88  2E5A               	decfsz	??_uds_get_soc& (0+255),f,c
  1964  001B8A  D7FC               	bra	u5627
  1965                           
  1966                           ;main.c: 55: if (ECANReceiveMessage(&id, msg2, &len, &flags)) {
  1967  001B8C  0EB0               	movlw	low uds_get_soc@id
  1968  001B8E  6E0C               	movwf	ECANReceiveMessage@id,c
  1969  001B90  0E01               	movlw	high uds_get_soc@id
  1970  001B92  6E0D               	movwf	ECANReceiveMessage@id+1,c
  1971  001B94  0E80               	movlw	low uds_get_soc@msg2
  1972  001B96  6E0E               	movwf	ECANReceiveMessage@data,c
  1973  001B98  0E01               	movlw	high uds_get_soc@msg2
  1974  001B9A  6E0F               	movwf	ECANReceiveMessage@data+1,c
  1975  001B9C  0EAC               	movlw	low uds_get_soc@len
  1976  001B9E  6E10               	movwf	ECANReceiveMessage@dataLen,c
  1977  001BA0  0E01               	movlw	high uds_get_soc@len
  1978  001BA2  6E11               	movwf	ECANReceiveMessage@dataLen+1,c
  1979  001BA4  0EAF               	movlw	low uds_get_soc@flags
  1980  001BA6  6E12               	movwf	ECANReceiveMessage@msgFlags,c
  1981  001BA8  0E01               	movlw	high uds_get_soc@flags
  1982  001BAA  6E13               	movwf	ECANReceiveMessage@msgFlags+1,c
  1983  001BAC  ECEA  F00E         	call	_ECANReceiveMessage	;wreg free
  1984  001BB0  0900               	iorlw	0
  1985  001BB2  B4D8               	btfsc	status,2,c
  1986  001BB4  D04D               	goto	l4607
  1987                           
  1988                           ;main.c: 56: if (id == 0x7CF && msg2[0] == 0x04 && msg2[1] == 0x62) {
  1989  001BB6  0ECF               	movlw	207
  1990  001BB8  0101               	movlb	1	; () banked
  1991  001BBA  19B0               	xorwf	uds_get_soc@id& (0+255),w,b
  1992  001BBC  E149               	bnz	l4607
  1993  001BBE  0E07               	movlw	7
  1994  001BC0  19B1               	xorwf	(uds_get_soc@id+1)& (0+255),w,b
  1995  001BC2  11B2               	iorwf	(uds_get_soc@id+2)& (0+255),w,b
  1996  001BC4  11B3               	iorwf	(uds_get_soc@id+3)& (0+255),w,b
  1997  001BC6  A4D8               	btfss	status,2,c
  1998  001BC8  D043               	goto	l4607
  1999                           
  2000                           ; BSR set to: 1
  2001  001BCA  0E04               	movlw	4
  2002  001BCC  1980               	xorwf	uds_get_soc@msg2& (0+255),w,b
  2003  001BCE  A4D8               	btfss	status,2,c
  2004  001BD0  D03F               	goto	l4607
  2005                           
  2006                           ; BSR set to: 1
  2007  001BD2  0E62               	movlw	98
  2008  001BD4  1981               	xorwf	(uds_get_soc@msg2+1)& (0+255),w,b
  2009  001BD6  A4D8               	btfss	status,2,c
  2010  001BD8  D03B               	goto	l4607
  2011                           
  2012                           ; BSR set to: 1
  2013                           ;main.c: 57: sprintf(buf, "value soc: %.1f %%\n", (msg2[4] / 2.0));
  2014  001BDA  5184               	movf	(uds_get_soc@msg2+4)& (0+255),w,b
  2015  001BDC  6E03               	movwf	___xxtofl@val,c
  2016  001BDE  6A04               	clrf	___xxtofl@val+1,c
  2017  001BE0  6A05               	clrf	___xxtofl@val+2,c
  2018  001BE2  6A06               	clrf	___xxtofl@val+3,c
  2019  001BE4  0E00               	movlw	0
  2020  001BE6  EC97  F00F         	call	___xxtofl
  2021  001BEA  C003  F011         	movff	?___xxtofl,___fldiv@b
  2022  001BEE  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  2023  001BF2  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  2024  001BF6  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  2025  001BFA  0E00               	movlw	0
  2026  001BFC  6E15               	movwf	___fldiv@a,c
  2027  001BFE  0E00               	movlw	0
  2028  001C00  6E16               	movwf	___fldiv@a+1,c
  2029  001C02  0E00               	movlw	0
  2030  001C04  6E17               	movwf	___fldiv@a+2,c
  2031  001C06  0E40               	movlw	64
  2032  001C08  6E18               	movwf	___fldiv@a+3,c
  2033  001C0A  EC6B  F00A         	call	___fldiv	;wreg free
  2034  001C0E  C011  F1A8         	movff	?___fldiv,_uds_get_soc$1883
  2035  001C12  C012  F1A9         	movff	?___fldiv+1,_uds_get_soc$1883+1
  2036  001C16  C013  F1AA         	movff	?___fldiv+2,_uds_get_soc$1883+2
  2037  001C1A  C014  F1AB         	movff	?___fldiv+3,_uds_get_soc$1883+3
  2038                           
  2039                           ;main.c: 57: sprintf(buf, "value soc: %.1f %%\n", (msg2[4] / 2.0));
  2040  001C1E  0E00               	movlw	low uds_get_soc@buf
  2041  001C20  6E4F               	movwf	sprintf@sp,c
  2042  001C22  0E01               	movlw	high uds_get_soc@buf
  2043  001C24  6E50               	movwf	sprintf@sp+1,c
  2044  001C26  0E9C               	movlw	low STR_3
  2045  001C28  6E51               	movwf	sprintf@f,c
  2046  001C2A  0E7F               	movlw	high STR_3
  2047  001C2C  6E52               	movwf	sprintf@f+1,c
  2048  001C2E  C1A8  F053         	movff	_uds_get_soc$1883,?_sprintf+4
  2049  001C32  C1A9  F054         	movff	_uds_get_soc$1883+1,?_sprintf+5
  2050  001C36  C1AA  F055         	movff	_uds_get_soc$1883+2,?_sprintf+6
  2051  001C3A  C1AB  F056         	movff	_uds_get_soc$1883+3,?_sprintf+7
  2052  001C3E  EC20  F000         	call	_sprintf	;wreg free
  2053                           
  2054                           ;main.c: 58: PutString(buf);
  2055  001C42  0E00               	movlw	low uds_get_soc@buf
  2056  001C44  6E05               	movwf	PutString@mess,c
  2057  001C46  0E01               	movlw	high uds_get_soc@buf
  2058  001C48  6E06               	movwf	PutString@mess+1,c
  2059  001C4A  ECEA  F014         	call	_PutString	;wreg free
  2060  001C4E  0012               	return	
  2061  001C50                     l4607:
  2062  001C50  0101               	movlb	1	; () banked
  2063  001C52  4BAD               	infsnz	uds_get_soc@i& (0+255),f,b
  2064  001C54  2BAE               	incf	(uds_get_soc@i+1)& (0+255),f,b
  2065                           
  2066                           ; BSR set to: 1
  2067  001C56  BFAE               	btfsc	(uds_get_soc@i+1)& (0+255),7,b
  2068  001C58  D792               	goto	l4589
  2069  001C5A  51AE               	movf	(uds_get_soc@i+1)& (0+255),w,b
  2070  001C5C  E104               	bnz	u5040
  2071  001C5E  0E64               	movlw	100
  2072  001C60  5DAD               	subwf	uds_get_soc@i& (0+255),w,b
  2073  001C62  A0D8               	btfss	status,0,c
  2074  001C64  D78C               	goto	l4589
  2075  001C66                     u5040:
  2076                           
  2077                           ; BSR set to: 1
  2078                           ;main.c: 60: };main.c: 61: };main.c: 62: };main.c: 63: PutString("error: timeout\n");
  2079  001C66  0EC5               	movlw	low (STR_9+1)
  2080  001C68  6E05               	movwf	PutString@mess,c
  2081  001C6A  0E7F               	movlw	high (STR_9+1)
  2082  001C6C  6E06               	movwf	PutString@mess+1,c
  2083  001C6E  ECEA  F014         	call	_PutString	;wreg free
  2084  001C72  0012               	return		;funcret
  2085  001C74                     __end_of_uds_get_soc:
  2086                           	opt callstack 0
  2087                           
  2088 ;; *************** function _sprintf *****************
  2089 ;; Defined at:
  2090 ;;		line 500 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/doprnt.c"
  2091 ;; Parameters:    Size  Location     Type
  2092 ;;  sp              2   78[COMRAM] PTR unsigned char 
  2093 ;;		 -> uds_get_soc@buf(128), 
  2094 ;;  f               2   80[COMRAM] PTR const unsigned char 
  2095 ;;		 -> STR_3(20), 
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;  fval            4   22[BANK0 ] PTR const unsigned char 
  2098 ;;  tmpval          4   18[BANK0 ] struct .
  2099 ;;  val             4   12[BANK0 ] unsigned long 
  2100 ;;  prec            2   26[BANK0 ] int 
  2101 ;;  eexp            2   16[BANK0 ] int 
  2102 ;;  flag            2   10[BANK0 ] unsigned short 
  2103 ;;  len             2    8[BANK0 ] unsigned int 
  2104 ;;  cp              2    6[BANK0 ] PTR const unsigned char 
  2105 ;;		 -> sprintf@c(1), 
  2106 ;;  ap              2    4[BANK0 ] PTR void [1]
  2107 ;;		 -> ?_sprintf(2), 
  2108 ;;  width           2    0        int 
  2109 ;;  c               1   28[BANK0 ] unsigned char 
  2110 ;;  d               1    0        unsigned char 
  2111 ;; Return value:  Size  Location     Type
  2112 ;;                  2   78[COMRAM] int 
  2113 ;; Registers used:
  2114 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2115 ;; Tracked objects:
  2116 ;;		On entry : 0/0
  2117 ;;		On exit  : 0/0
  2118 ;;		Unchanged: 0/0
  2119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2120 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2121 ;;      Locals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2122 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2123 ;;      Totals:        11      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2124 ;;Total ram usage:       40 bytes
  2125 ;; Hardware stack levels used:    1
  2126 ;; Hardware stack levels required when called:    4
  2127 ;; This function calls:
  2128 ;;		___awdiv
  2129 ;;		___fladd
  2130 ;;		___fleq
  2131 ;;		___flge
  2132 ;;		___flmul
  2133 ;;		___flneg
  2134 ;;		___flsub
  2135 ;;		___fltol
  2136 ;;		___lldiv
  2137 ;;		___llmod
  2138 ;;		___wmul
  2139 ;;		___xxtofl
  2140 ;;		__div_to_l_
  2141 ;;		__tdiv_to_l_
  2142 ;;		_fround
  2143 ;;		_isdigit
  2144 ;;		_scale
  2145 ;; This function is called by:
  2146 ;;		_uds_get_soc
  2147 ;; This function uses a non-reentrant model
  2148 ;;
  2149                           
  2150                           	psect	text4
  2151  000040                     __ptext4:
  2152                           	opt callstack 0
  2153  000040                     _sprintf:
  2154                           	opt callstack 24
  2155                           
  2156                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          12: int prec;;doprnt.c: 520: unsigned short flag;;doprnt.c: 527: char d;;doprnt.c: 528: 
      +                          double fval;;doprnt.c: 529: int eexp;;doprnt.c: 535: union {;doprnt.c: 536: unsigned lon
      +                          g vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: unsigned long
      +                           val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 545: *ap = 
      +                          __va_start();
  2157                           
  2158                           ;incstack = 0
  2159  000040  0E53               	movlw	low (?_sprintf+4)
  2160  000042  0100               	movlb	0	; () banked
  2161  000044  6F64               	movwf	sprintf@ap& (0+255),b
  2162  000046  0E00               	movlw	high (?_sprintf+4)
  2163  000048  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  2164                           
  2165                           ;doprnt.c: 548: while((c = *f++)) {
  2166  00004A  D3D6               	goto	l4415
  2167  00004C                     l4199:
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;doprnt.c: 550: if(c != '%')
  2171  00004C  0E25               	movlw	37
  2172  00004E  197C               	xorwf	sprintf@c& (0+255),w,b
  2173  000050  B4D8               	btfsc	status,2,c
  2174  000052  D009               	goto	l4205
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  2178  000054  C04F  FFD9         	movff	sprintf@sp,fsr2l
  2179  000058  C050  FFDA         	movff	sprintf@sp+1,fsr2h
  2180  00005C  C07C  FFDF         	movff	sprintf@c,indf2
  2181  000060                     l4203:
  2182                           
  2183                           ; BSR set to: 0
  2184  000060  4A4F               	infsnz	sprintf@sp,f,c
  2185  000062  2A50               	incf	sprintf@sp+1,f,c
  2186                           
  2187                           ;doprnt.c: 554: continue;
  2188  000064  D3C9               	goto	l4415
  2189  000066                     l4205:
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;doprnt.c: 555: };doprnt.c: 560: flag = 0;
  2193  000066  0E00               	movlw	0
  2194  000068  6F6B               	movwf	(sprintf@flag+1)& (0+255),b
  2195  00006A  0E00               	movlw	0
  2196  00006C  6F6A               	movwf	sprintf@flag& (0+255),b
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;doprnt.c: 623: if(*f == '.') {
  2200  00006E  C051  FFF6         	movff	sprintf@f,tblptrl
  2201  000072  C052  FFF7         	movff	sprintf@f+1,tblptrh
  2202  000076                     	if	0	;tblptru may be non-zero
  2203  000076                     	endif
  2204  000076                     	if	0	;tblptru may be non-zero
  2205  000076                     	endif
  2206  000076  0008               	tblrd		*
  2207  000078  50F5               	movf	tablat,w,c
  2208  00007A  0A2E               	xorlw	46
  2209  00007C  A4D8               	btfss	status,2,c
  2210  00007E  D02F               	goto	l4219
  2211                           
  2212                           ; BSR set to: 0
  2213                           ;doprnt.c: 624: flag |= 0x4000;
  2214  000080  8D6B               	bsf	(sprintf@flag+1)& (0+255),6,b
  2215                           
  2216                           ;doprnt.c: 625: f++;
  2217  000082  4A51               	infsnz	sprintf@f,f,c
  2218  000084  2A52               	incf	sprintf@f+1,f,c
  2219                           
  2220                           ; BSR set to: 0
  2221                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  2222  000086  0E00               	movlw	0
  2223  000088  6F7B               	movwf	(sprintf@prec+1)& (0+255),b
  2224  00008A  0E00               	movlw	0
  2225  00008C  6F7A               	movwf	sprintf@prec& (0+255),b
  2226                           
  2227                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  2228  00008E  D01C               	goto	l4217
  2229  000090                     l4213:
  2230                           
  2231                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  2232  000090  C07A  F003         	movff	sprintf@prec,___wmul@multiplier
  2233  000094  C07B  F004         	movff	sprintf@prec+1,___wmul@multiplier+1
  2234  000098  0E00               	movlw	0
  2235  00009A  6E06               	movwf	___wmul@multiplicand+1,c
  2236  00009C  0E0A               	movlw	10
  2237  00009E  6E05               	movwf	___wmul@multiplicand,c
  2238  0000A0  EC95  F015         	call	___wmul	;wreg free
  2239  0000A4  C051  FFF6         	movff	sprintf@f,tblptrl
  2240  0000A8  C052  FFF7         	movff	sprintf@f+1,tblptrh
  2241  0000AC                     	if	0	;tblptru may be non-zero
  2242  0000AC                     	endif
  2243  0000AC                     	if	0	;tblptru may be non-zero
  2244  0000AC                     	endif
  2245  0000AC  0008               	tblrd		*
  2246  0000AE  50F5               	movf	tablat,w,c
  2247  0000B0  2603               	addwf	?___wmul,f,c
  2248  0000B2  0E00               	movlw	0
  2249  0000B4  2204               	addwfc	?___wmul+1,f,c
  2250  0000B6  0ED0               	movlw	208
  2251  0000B8  2403               	addwf	?___wmul,w,c
  2252  0000BA  0100               	movlb	0	; () banked
  2253  0000BC  6F7A               	movwf	sprintf@prec& (0+255),b
  2254  0000BE  0EFF               	movlw	255
  2255  0000C0  2004               	addwfc	?___wmul+1,w,c
  2256  0000C2  6F7B               	movwf	(sprintf@prec+1)& (0+255),b
  2257                           
  2258                           ; BSR set to: 0
  2259  0000C4  4A51               	infsnz	sprintf@f,f,c
  2260  0000C6  2A52               	incf	sprintf@f+1,f,c
  2261  0000C8                     l4217:
  2262                           
  2263                           ; BSR set to: 0
  2264  0000C8  C051  FFF6         	movff	sprintf@f,tblptrl
  2265  0000CC  C052  FFF7         	movff	sprintf@f+1,tblptrh
  2266  0000D0                     	if	0	;tblptru may be non-zero
  2267  0000D0                     	endif
  2268  0000D0                     	if	0	;tblptru may be non-zero
  2269  0000D0                     	endif
  2270  0000D0  0008               	tblrd		*
  2271  0000D2  50F5               	movf	tablat,w,c
  2272  0000D4  ECB8  F015         	call	_isdigit
  2273  0000D8  A0D8               	btfss	status,0,c
  2274  0000DA  D036               	goto	l4245
  2275  0000DC  D7D9               	goto	l4213
  2276  0000DE                     l4219:
  2277                           
  2278                           ; BSR set to: 0
  2279                           ;doprnt.c: 645: prec = 0;
  2280  0000DE  0E00               	movlw	0
  2281  0000E0  6F7B               	movwf	(sprintf@prec+1)& (0+255),b
  2282  0000E2  0E00               	movlw	0
  2283  0000E4  6F7A               	movwf	sprintf@prec& (0+255),b
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;doprnt.c: 647: flag |= 0x1000;
  2287  0000E6  896B               	bsf	(sprintf@flag+1)& (0+255),4,b
  2288  0000E8  D02F               	goto	l4245
  2289  0000EA                     l4223:
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;doprnt.c: 682: flag |= 0x400;
  2293  0000EA  856B               	bsf	(sprintf@flag+1)& (0+255),2,b
  2294                           
  2295                           ;doprnt.c: 683: break;
  2296  0000EC  D03F               	goto	l4247
  2297  0000EE                     l4225:
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;doprnt.c: 772: if(prec && prec < len)
  2301  0000EE  517A               	movf	sprintf@prec& (0+255),w,b
  2302  0000F0  117B               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2303  0000F2  B4D8               	btfsc	status,2,c
  2304  0000F4  D017               	goto	l4237
  2305                           
  2306                           ; BSR set to: 0
  2307  0000F6  517A               	movf	sprintf@prec& (0+255),w,b
  2308  0000F8  117B               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2309  0000FA  A4D8               	btfss	status,2,c
  2310  0000FC  D013               	goto	l4237
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;doprnt.c: 773: len = prec;
  2314  0000FE  C07A  F068         	movff	sprintf@prec,sprintf@len
  2315  000102  C07B  F069         	movff	sprintf@prec+1,sprintf@len+1
  2316  000106  D00E               	goto	l4237
  2317  000108                     l4231:
  2318                           
  2319                           ; BSR set to: 0
  2320                           ;doprnt.c: 787: ((*sp++ = (*cp++)));
  2321  000108  C066  FFD9         	movff	sprintf@cp,fsr2l
  2322  00010C  C067  FFDA         	movff	sprintf@cp+1,fsr2h
  2323  000110  C04F  FFE1         	movff	sprintf@sp,fsr1l
  2324  000114  C050  FFE2         	movff	sprintf@sp+1,fsr1h
  2325  000118  CFDF FFE7          	movff	indf2,indf1
  2326                           
  2327                           ; BSR set to: 0
  2328  00011C  4B66               	infsnz	sprintf@cp& (0+255),f,b
  2329  00011E  2B67               	incf	(sprintf@cp+1)& (0+255),f,b
  2330                           
  2331                           ; BSR set to: 0
  2332  000120  4A4F               	infsnz	sprintf@sp,f,c
  2333  000122  2A50               	incf	sprintf@sp+1,f,c
  2334  000124                     l4237:
  2335                           
  2336                           ; BSR set to: 0
  2337  000124  0768               	decf	sprintf@len& (0+255),f,b
  2338  000126  A0D8               	btfss	status,0,c
  2339  000128  0769               	decf	(sprintf@len+1)& (0+255),f,b
  2340  00012A  2968               	incf	sprintf@len& (0+255),w,b
  2341  00012C  E1ED               	bnz	l4231
  2342  00012E  2969               	incf	(sprintf@len+1)& (0+255),w,b
  2343  000130  B4D8               	btfsc	status,2,c
  2344  000132  D362               	goto	l4415
  2345  000134  D7E9               	goto	l4231
  2346  000136                     l4239:
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;doprnt.c: 824: cp = (char *)&c;
  2350  000136  0E7C               	movlw	low sprintf@c
  2351  000138  6F66               	movwf	sprintf@cp& (0+255),b
  2352  00013A  0E00               	movlw	high sprintf@c
  2353  00013C  6F67               	movwf	(sprintf@cp+1)& (0+255),b
  2354                           
  2355                           ; BSR set to: 0
  2356                           ;doprnt.c: 825: len = 1;
  2357  00013E  0E00               	movlw	0
  2358  000140  6F69               	movwf	(sprintf@len+1)& (0+255),b
  2359  000142  0E01               	movlw	1
  2360  000144  6F68               	movwf	sprintf@len& (0+255),b
  2361                           
  2362                           ;doprnt.c: 826: goto dostring;
  2363  000146  D7D3               	goto	l4225
  2364  000148                     l4245:
  2365  000148  C051  FFF6         	movff	sprintf@f,tblptrl
  2366  00014C  C052  FFF7         	movff	sprintf@f+1,tblptrh
  2367  000150  4A51               	infsnz	sprintf@f,f,c
  2368  000152  2A52               	incf	sprintf@f+1,f,c
  2369  000154                     	if	0	;tblptru may be non-zero
  2370  000154                     	endif
  2371  000154                     	if	0	;tblptru may be non-zero
  2372  000154                     	endif
  2373  000154  0008               	tblrd		*
  2374  000156  CFF5 F07C          	movff	tablat,sprintf@c
  2375  00015A  0100               	movlb	0	; () banked
  2376  00015C  517C               	movf	sprintf@c& (0+255),w,b
  2377                           
  2378                           ; Switch size 1, requested type "simple"
  2379                           ; Number of cases is 2, Range of values is 0 to 102
  2380                           ; switch strategies available:
  2381                           ; Name         Instructions Cycles
  2382                           ; simple_byte            7     4 (average)
  2383                           ;	Chosen strategy is simple_byte
  2384  00015E  0A00               	xorlw	0	; case 0
  2385  000160  B4D8               	btfsc	status,2,c
  2386  000162  D356               	goto	u4730
  2387  000164  0A66               	xorlw	102	; case 102
  2388  000166  B4D8               	btfsc	status,2,c
  2389  000168  D7C0               	goto	l4223
  2390  00016A  D7E5               	goto	l4239
  2391  00016C                     l4247:
  2392                           
  2393                           ; BSR set to: 0
  2394                           ;doprnt.c: 844: if(flag & (0x700)) {
  2395  00016C  0E07               	movlw	7
  2396  00016E  156B               	andwf	(sprintf@flag+1)& (0+255),w,b
  2397  000170  B4D8               	btfsc	status,2,c
  2398  000172  D30D               	goto	l4395
  2399                           
  2400                           ; BSR set to: 0
  2401                           ;doprnt.c: 846: if(flag & 0x1000)
  2402  000174  A96B               	btfss	(sprintf@flag+1)& (0+255),4,b
  2403  000176  D004               	goto	l4253
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;doprnt.c: 848: prec = 6;
  2407  000178  0E00               	movlw	0
  2408  00017A  6F7B               	movwf	(sprintf@prec+1)& (0+255),b
  2409  00017C  0E06               	movlw	6
  2410  00017E  6F7A               	movwf	sprintf@prec& (0+255),b
  2411  000180                     l4253:
  2412                           
  2413                           ; BSR set to: 0
  2414                           ;doprnt.c: 849: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2415  000180  C064  FFD9         	movff	sprintf@ap,fsr2l
  2416  000184  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  2417  000188  CFDE F076          	movff	postinc2,sprintf@fval
  2418  00018C  CFDE F077          	movff	postinc2,sprintf@fval+1
  2419  000190  CFDE F078          	movff	postinc2,sprintf@fval+2
  2420  000194  CFDE F079          	movff	postinc2,sprintf@fval+3
  2421                           
  2422                           ; BSR set to: 0
  2423  000198  0E04               	movlw	4
  2424  00019A  2764               	addwf	sprintf@ap& (0+255),f,b
  2425  00019C  0E00               	movlw	0
  2426  00019E  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2427                           
  2428                           ; BSR set to: 0
  2429                           ;doprnt.c: 850: if(fval < 0.0) {
  2430  0001A0  AF79               	btfss	(sprintf@fval+3)& (0+255),7,b
  2431  0001A2  D015               	goto	l4263
  2432                           
  2433                           ; BSR set to: 0
  2434                           ;doprnt.c: 851: fval = -fval;
  2435  0001A4  C076  F003         	movff	sprintf@fval,___flneg@f1
  2436  0001A8  C077  F004         	movff	sprintf@fval+1,___flneg@f1+1
  2437  0001AC  C078  F005         	movff	sprintf@fval+2,___flneg@f1+2
  2438  0001B0  C079  F006         	movff	sprintf@fval+3,___flneg@f1+3
  2439  0001B4  EC7E  F015         	call	___flneg	;wreg free
  2440  0001B8  C003  F076         	movff	?___flneg,sprintf@fval
  2441  0001BC  C004  F077         	movff	?___flneg+1,sprintf@fval+1
  2442  0001C0  C005  F078         	movff	?___flneg+2,sprintf@fval+2
  2443  0001C4  C006  F079         	movff	?___flneg+3,sprintf@fval+3
  2444                           
  2445                           ;doprnt.c: 852: flag |= 0x03;
  2446  0001C8  0E03               	movlw	3
  2447  0001CA  0100               	movlb	0	; () banked
  2448  0001CC  136A               	iorwf	sprintf@flag& (0+255),f,b
  2449  0001CE                     l4263:
  2450                           
  2451                           ; BSR set to: 0
  2452                           ;doprnt.c: 853: };doprnt.c: 854: eexp = 0;
  2453  0001CE  0E00               	movlw	0
  2454  0001D0  6F71               	movwf	(sprintf@eexp+1)& (0+255),b
  2455  0001D2  0E00               	movlw	0
  2456  0001D4  6F70               	movwf	sprintf@eexp& (0+255),b
  2457                           
  2458                           ; BSR set to: 0
  2459                           ;doprnt.c: 855: if( fval!=0) {
  2460  0001D6  C076  F003         	movff	sprintf@fval,___fleq@ff1
  2461  0001DA  C077  F004         	movff	sprintf@fval+1,___fleq@ff1+1
  2462  0001DE  C078  F005         	movff	sprintf@fval+2,___fleq@ff1+2
  2463  0001E2  C079  F006         	movff	sprintf@fval+3,___fleq@ff1+3
  2464  0001E6  0E00               	movlw	0
  2465  0001E8  6E07               	movwf	___fleq@ff2,c
  2466  0001EA  0E00               	movlw	0
  2467  0001EC  6E08               	movwf	___fleq@ff2+1,c
  2468  0001EE  0E00               	movlw	0
  2469  0001F0  6E09               	movwf	___fleq@ff2+2,c
  2470  0001F2  0E00               	movlw	0
  2471  0001F4  6E0A               	movwf	___fleq@ff2+3,c
  2472  0001F6  EC7F  F012         	call	___fleq	;wreg free
  2473  0001FA  B0D8               	btfsc	status,0,c
  2474  0001FC  D083               	goto	l4291
  2475                           
  2476                           ;doprnt.c: 856: (void)(*(&eexp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255)
      +                           - 126);
  2477  0001FE  0100               	movlb	0	; () banked
  2478  000200  3578               	rlcf	(sprintf@fval+2)& (0+255),w,b
  2479  000202  3579               	rlcf	(sprintf@fval+3)& (0+255),w,b
  2480  000204  0F82               	addlw	130
  2481  000206  6F70               	movwf	sprintf@eexp& (0+255),b
  2482  000208  6B71               	clrf	(sprintf@eexp+1)& (0+255),b
  2483  00020A  0EFF               	movlw	255
  2484  00020C  2371               	addwfc	(sprintf@eexp+1)& (0+255),f,b
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;doprnt.c: 857: eexp--;
  2488  00020E  0770               	decf	sprintf@eexp& (0+255),f,b
  2489  000210  A0D8               	btfss	status,0,c
  2490  000212  0771               	decf	(sprintf@eexp+1)& (0+255),f,b
  2491                           
  2492                           ; BSR set to: 0
  2493                           ;doprnt.c: 858: eexp *= 3;
  2494  000214  C070  F003         	movff	sprintf@eexp,___wmul@multiplier
  2495  000218  C071  F004         	movff	sprintf@eexp+1,___wmul@multiplier+1
  2496  00021C  0E00               	movlw	0
  2497  00021E  6E06               	movwf	___wmul@multiplicand+1,c
  2498  000220  0E03               	movlw	3
  2499  000222  6E05               	movwf	___wmul@multiplicand,c
  2500  000224  EC95  F015         	call	___wmul	;wreg free
  2501  000228  C003  F070         	movff	?___wmul,sprintf@eexp
  2502  00022C  C004  F071         	movff	?___wmul+1,sprintf@eexp+1
  2503                           
  2504                           ;doprnt.c: 859: eexp /= 10;
  2505  000230  C070  F009         	movff	sprintf@eexp,___awdiv@dividend
  2506  000234  C071  F00A         	movff	sprintf@eexp+1,___awdiv@dividend+1
  2507  000238  0E00               	movlw	0
  2508  00023A  6E0C               	movwf	___awdiv@divisor+1,c
  2509  00023C  0E0A               	movlw	10
  2510  00023E  6E0B               	movwf	___awdiv@divisor,c
  2511  000240  ECC4  F012         	call	___awdiv	;wreg free
  2512  000244  C009  F070         	movff	?___awdiv,sprintf@eexp
  2513  000248  C00A  F071         	movff	?___awdiv+1,sprintf@eexp+1
  2514                           
  2515                           ;doprnt.c: 860: if(eexp < 0)
  2516  00024C  0100               	movlb	0	; () banked
  2517  00024E  AF71               	btfss	(sprintf@eexp+1)& (0+255),7,b
  2518  000250  D003               	goto	l4279
  2519                           
  2520                           ; BSR set to: 0
  2521                           ;doprnt.c: 861: eexp--;
  2522  000252  0770               	decf	sprintf@eexp& (0+255),f,b
  2523  000254  A0D8               	btfss	status,0,c
  2524  000256  0771               	decf	(sprintf@eexp+1)& (0+255),f,b
  2525  000258                     l4279:
  2526                           
  2527                           ; BSR set to: 0
  2528                           ;doprnt.c: 865: tmpval.integ = scale(-eexp);
  2529  000258  5170               	movf	sprintf@eexp& (0+255),w,b
  2530  00025A  0800               	sublw	0
  2531  00025C  EC0F  F004         	call	_scale
  2532  000260  C02A  F072         	movff	?_scale,sprintf@tmpval
  2533  000264  C02B  F073         	movff	?_scale+1,sprintf@tmpval+1
  2534  000268  C02C  F074         	movff	?_scale+2,sprintf@tmpval+2
  2535  00026C  C02D  F075         	movff	?_scale+3,sprintf@tmpval+3
  2536                           
  2537                           ;doprnt.c: 866: tmpval.integ *= fval;
  2538  000270  C072  F011         	movff	sprintf@tmpval,___flmul@b
  2539  000274  C073  F012         	movff	sprintf@tmpval+1,___flmul@b+1
  2540  000278  C074  F013         	movff	sprintf@tmpval+2,___flmul@b+2
  2541  00027C  C075  F014         	movff	sprintf@tmpval+3,___flmul@b+3
  2542  000280  C076  F015         	movff	sprintf@fval,___flmul@a
  2543  000284  C077  F016         	movff	sprintf@fval+1,___flmul@a+1
  2544  000288  C078  F017         	movff	sprintf@fval+2,___flmul@a+2
  2545  00028C  C079  F018         	movff	sprintf@fval+3,___flmul@a+3
  2546  000290  ECF7  F005         	call	___flmul	;wreg free
  2547  000294  C011  F072         	movff	?___flmul,sprintf@tmpval
  2548  000298  C012  F073         	movff	?___flmul+1,sprintf@tmpval+1
  2549  00029C  C013  F074         	movff	?___flmul+2,sprintf@tmpval+2
  2550  0002A0  C014  F075         	movff	?___flmul+3,sprintf@tmpval+3
  2551                           
  2552                           ;doprnt.c: 867: if(tmpval.integ < 1.0)
  2553  0002A4  C072  F003         	movff	sprintf@tmpval,___flge@ff1
  2554  0002A8  C073  F004         	movff	sprintf@tmpval+1,___flge@ff1+1
  2555  0002AC  C074  F005         	movff	sprintf@tmpval+2,___flge@ff1+2
  2556  0002B0  C075  F006         	movff	sprintf@tmpval+3,___flge@ff1+3
  2557  0002B4  0E00               	movlw	0
  2558  0002B6  6E07               	movwf	___flge@ff2,c
  2559  0002B8  0E00               	movlw	0
  2560  0002BA  6E08               	movwf	___flge@ff2+1,c
  2561  0002BC  0E80               	movlw	128
  2562  0002BE  6E09               	movwf	___flge@ff2+2,c
  2563  0002C0  0E3F               	movlw	63
  2564  0002C2  6E0A               	movwf	___flge@ff2+3,c
  2565  0002C4  ECBA  F011         	call	___flge	;wreg free
  2566  0002C8  B0D8               	btfsc	status,0,c
  2567  0002CA  D005               	goto	l4287
  2568                           
  2569                           ;doprnt.c: 868: eexp--;
  2570  0002CC  0100               	movlb	0	; () banked
  2571  0002CE  0770               	decf	sprintf@eexp& (0+255),f,b
  2572  0002D0  A0D8               	btfss	status,0,c
  2573  0002D2  0771               	decf	(sprintf@eexp+1)& (0+255),f,b
  2574  0002D4  D017               	goto	l4291
  2575  0002D6                     l4287:
  2576                           
  2577                           ;doprnt.c: 869: else if(tmpval.integ >= 10.0)
  2578  0002D6  C072  F003         	movff	sprintf@tmpval,___flge@ff1
  2579  0002DA  C073  F004         	movff	sprintf@tmpval+1,___flge@ff1+1
  2580  0002DE  C074  F005         	movff	sprintf@tmpval+2,___flge@ff1+2
  2581  0002E2  C075  F006         	movff	sprintf@tmpval+3,___flge@ff1+3
  2582  0002E6  0E00               	movlw	0
  2583  0002E8  6E07               	movwf	___flge@ff2,c
  2584  0002EA  0E00               	movlw	0
  2585  0002EC  6E08               	movwf	___flge@ff2+1,c
  2586  0002EE  0E20               	movlw	32
  2587  0002F0  6E09               	movwf	___flge@ff2+2,c
  2588  0002F2  0E41               	movlw	65
  2589  0002F4  6E0A               	movwf	___flge@ff2+3,c
  2590  0002F6  ECBA  F011         	call	___flge	;wreg free
  2591  0002FA  A0D8               	btfss	status,0,c
  2592  0002FC  D003               	goto	l4291
  2593                           
  2594                           ;doprnt.c: 870: eexp++;
  2595  0002FE  0100               	movlb	0	; () banked
  2596  000300  4B70               	infsnz	sprintf@eexp& (0+255),f,b
  2597  000302  2B71               	incf	(sprintf@eexp+1)& (0+255),f,b
  2598  000304                     l4291:
  2599                           
  2600                           ;doprnt.c: 871: };doprnt.c: 1131: if(prec <= 12)
  2601  000304  0100               	movlb	0	; () banked
  2602  000306  BF7B               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2603  000308  D006               	goto	u4530
  2604  00030A  517B               	movf	(sprintf@prec+1)& (0+255),w,b
  2605  00030C  E121               	bnz	l4295
  2606  00030E  0E0D               	movlw	13
  2607  000310  5D7A               	subwf	sprintf@prec& (0+255),w,b
  2608  000312  B0D8               	btfsc	status,0,c
  2609  000314  D01D               	goto	l4295
  2610  000316                     u4530:
  2611                           
  2612                           ; BSR set to: 0
  2613                           ;doprnt.c: 1132: fval += fround((unsigned int)prec);
  2614  000316  C076  F037         	movff	sprintf@fval,___fladd@b
  2615  00031A  C077  F038         	movff	sprintf@fval+1,___fladd@b+1
  2616  00031E  C078  F039         	movff	sprintf@fval+2,___fladd@b+2
  2617  000322  C079  F03A         	movff	sprintf@fval+3,___fladd@b+3
  2618  000326  517A               	movf	sprintf@prec& (0+255),w,b
  2619  000328  EC26  F009         	call	_fround
  2620  00032C  C02A  F03B         	movff	?_fround,___fladd@a
  2621  000330  C02B  F03C         	movff	?_fround+1,___fladd@a+1
  2622  000334  C02C  F03D         	movff	?_fround+2,___fladd@a+2
  2623  000338  C02D  F03E         	movff	?_fround+3,___fladd@a+3
  2624  00033C  ECA0  F007         	call	___fladd	;wreg free
  2625  000340  C037  F076         	movff	?___fladd,sprintf@fval
  2626  000344  C038  F077         	movff	?___fladd+1,sprintf@fval+1
  2627  000348  C039  F078         	movff	?___fladd+2,sprintf@fval+2
  2628  00034C  C03A  F079         	movff	?___fladd+3,sprintf@fval+3
  2629  000350                     l4295:
  2630                           
  2631                           ;doprnt.c: 1135: if((eexp > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
  2632  000350  0100               	movlb	0	; () banked
  2633  000352  BF71               	btfsc	(sprintf@eexp+1)& (0+255),7,b
  2634  000354  D006               	goto	u4540
  2635  000356  5171               	movf	(sprintf@eexp+1)& (0+255),w,b
  2636  000358  E131               	bnz	l4303
  2637  00035A  0E0A               	movlw	10
  2638  00035C  5D70               	subwf	sprintf@eexp& (0+255),w,b
  2639  00035E  B0D8               	btfsc	status,0,c
  2640  000360  D02D               	goto	u4570
  2641  000362                     u4540:
  2642                           
  2643                           ; BSR set to: 0
  2644  000362  C076  F003         	movff	sprintf@fval,___fleq@ff1
  2645  000366  C077  F004         	movff	sprintf@fval+1,___fleq@ff1+1
  2646  00036A  C078  F005         	movff	sprintf@fval+2,___fleq@ff1+2
  2647  00036E  C079  F006         	movff	sprintf@fval+3,___fleq@ff1+3
  2648  000372  0E00               	movlw	0
  2649  000374  6E07               	movwf	___fleq@ff2,c
  2650  000376  0E00               	movlw	0
  2651  000378  6E08               	movwf	___fleq@ff2+1,c
  2652  00037A  0E00               	movlw	0
  2653  00037C  6E09               	movwf	___fleq@ff2+2,c
  2654  00037E  0E00               	movlw	0
  2655  000380  6E0A               	movwf	___fleq@ff2+3,c
  2656  000382  EC7F  F012         	call	___fleq	;wreg free
  2657  000386  B0D8               	btfsc	status,0,c
  2658  000388  D064               	goto	l4317
  2659  00038A  C076  F02A         	movff	sprintf@fval,___fltol@f1
  2660  00038E  C077  F02B         	movff	sprintf@fval+1,___fltol@f1+1
  2661  000392  C078  F02C         	movff	sprintf@fval+2,___fltol@f1+2
  2662  000396  C079  F02D         	movff	sprintf@fval+3,___fltol@f1+3
  2663  00039A  EC22  F012         	call	___fltol	;wreg free
  2664  00039E  502A               	movf	?___fltol,w,c
  2665  0003A0  102B               	iorwf	?___fltol+1,w,c
  2666  0003A2  102C               	iorwf	?___fltol+2,w,c
  2667  0003A4  102D               	iorwf	?___fltol+3,w,c
  2668  0003A6  A4D8               	btfss	status,2,c
  2669  0003A8  D054               	goto	l4317
  2670  0003AA  0100               	movlb	0	; () banked
  2671  0003AC  BF71               	btfsc	(sprintf@eexp+1)& (0+255),7,b
  2672  0003AE  D051               	goto	l4317
  2673  0003B0  5171               	movf	(sprintf@eexp+1)& (0+255),w,b
  2674  0003B2  E104               	bnz	u4570
  2675  0003B4  0E02               	movlw	2
  2676  0003B6  5D70               	subwf	sprintf@eexp& (0+255),w,b
  2677  0003B8  A0D8               	btfss	status,0,c
  2678  0003BA  D04B               	goto	l4317
  2679  0003BC                     u4570:
  2680  0003BC                     l4303:
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;doprnt.c: 1139: if(tmpval.integ < 4.294967296){
  2684  0003BC  C072  F003         	movff	sprintf@tmpval,___flge@ff1
  2685  0003C0  C073  F004         	movff	sprintf@tmpval+1,___flge@ff1+1
  2686  0003C4  C074  F005         	movff	sprintf@tmpval+2,___flge@ff1+2
  2687  0003C8  C075  F006         	movff	sprintf@tmpval+3,___flge@ff1+3
  2688  0003CC  0E5F               	movlw	95
  2689  0003CE  6E07               	movwf	___flge@ff2,c
  2690  0003D0  0E70               	movlw	112
  2691  0003D2  6E08               	movwf	___flge@ff2+1,c
  2692  0003D4  0E89               	movlw	137
  2693  0003D6  6E09               	movwf	___flge@ff2+2,c
  2694  0003D8  0E40               	movlw	64
  2695  0003DA  6E0A               	movwf	___flge@ff2+3,c
  2696  0003DC  ECBA  F011         	call	___flge	;wreg free
  2697  0003E0  B0D8               	btfsc	status,0,c
  2698  0003E2  D003               	goto	l4307
  2699                           
  2700                           ;doprnt.c: 1140: eexp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2701  0003E4  0100               	movlb	0	; () banked
  2702  0003E6  0EF7               	movlw	247
  2703  0003E8  D002               	goto	L1
  2704  0003EA                     l4307:
  2705                           
  2706                           ;doprnt.c: 1142: eexp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2707  0003EA  0100               	movlb	0	; () banked
  2708  0003EC  0EF8               	movlw	248
  2709  0003EE                     L1:
  2710  0003EE  2770               	addwf	sprintf@eexp& (0+255),f,b
  2711  0003F0  0EFF               	movlw	255
  2712  0003F2  2371               	addwfc	(sprintf@eexp+1)& (0+255),f,b
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;doprnt.c: 1145: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2716  0003F4  5170               	movf	sprintf@eexp& (0+255),w,b
  2717  0003F6  EC0F  F004         	call	_scale
  2718  0003FA  C02A  F072         	movff	?_scale,sprintf@tmpval
  2719  0003FE  C02B  F073         	movff	?_scale+1,sprintf@tmpval+1
  2720  000402  C02C  F074         	movff	?_scale+2,sprintf@tmpval+2
  2721  000406  C02D  F075         	movff	?_scale+3,sprintf@tmpval+3
  2722  00040A  C076  F003         	movff	sprintf@fval,__div_to_l_@f1
  2723  00040E  C077  F004         	movff	sprintf@fval+1,__div_to_l_@f1+1
  2724  000412  C078  F005         	movff	sprintf@fval+2,__div_to_l_@f1+2
  2725  000416  C079  F006         	movff	sprintf@fval+3,__div_to_l_@f1+3
  2726  00041A  C072  F007         	movff	sprintf@tmpval,__div_to_l_@f2
  2727  00041E  C073  F008         	movff	sprintf@tmpval+1,__div_to_l_@f2+1
  2728  000422  C074  F009         	movff	sprintf@tmpval+2,__div_to_l_@f2+2
  2729  000426  C075  F00A         	movff	sprintf@tmpval+3,__div_to_l_@f2+3
  2730  00042A  EC40  F011         	call	__div_to_l_	;wreg free
  2731  00042E  C003  F06C         	movff	?__div_to_l_,sprintf@val
  2732  000432  C004  F06D         	movff	?__div_to_l_+1,sprintf@val+1
  2733  000436  C005  F06E         	movff	?__div_to_l_+2,sprintf@val+2
  2734  00043A  C006  F06F         	movff	?__div_to_l_+3,sprintf@val+3
  2735                           
  2736                           ;doprnt.c: 1148: fval = 0.0;
  2737  00043E  0E00               	movlw	0
  2738  000440  0100               	movlb	0	; () banked
  2739  000442  6F76               	movwf	sprintf@fval& (0+255),b
  2740  000444  0E00               	movlw	0
  2741  000446  6F77               	movwf	(sprintf@fval+1)& (0+255),b
  2742  000448  0E00               	movlw	0
  2743  00044A  6F78               	movwf	(sprintf@fval+2)& (0+255),b
  2744  00044C  0E00               	movlw	0
  2745  00044E  6F79               	movwf	(sprintf@fval+3)& (0+255),b
  2746                           
  2747                           ;doprnt.c: 1149: } else {
  2748  000450  D03C               	goto	l4321
  2749  000452                     l4317:
  2750                           
  2751                           ;doprnt.c: 1150: val = (unsigned long)fval;
  2752  000452  C076  F02A         	movff	sprintf@fval,___fltol@f1
  2753  000456  C077  F02B         	movff	sprintf@fval+1,___fltol@f1+1
  2754  00045A  C078  F02C         	movff	sprintf@fval+2,___fltol@f1+2
  2755  00045E  C079  F02D         	movff	sprintf@fval+3,___fltol@f1+3
  2756  000462  EC22  F012         	call	___fltol	;wreg free
  2757  000466  C02A  F06C         	movff	?___fltol,sprintf@val
  2758  00046A  C02B  F06D         	movff	?___fltol+1,sprintf@val+1
  2759  00046E  C02C  F06E         	movff	?___fltol+2,sprintf@val+2
  2760  000472  C02D  F06F         	movff	?___fltol+3,sprintf@val+3
  2761                           
  2762                           ;doprnt.c: 1151: fval -= (double)val;
  2763  000476  C076  F047         	movff	sprintf@fval,___flsub@b
  2764  00047A  C077  F048         	movff	sprintf@fval+1,___flsub@b+1
  2765  00047E  C078  F049         	movff	sprintf@fval+2,___flsub@b+2
  2766  000482  C079  F04A         	movff	sprintf@fval+3,___flsub@b+3
  2767  000486  C06C  F003         	movff	sprintf@val,___xxtofl@val
  2768  00048A  C06D  F004         	movff	sprintf@val+1,___xxtofl@val+1
  2769  00048E  C06E  F005         	movff	sprintf@val+2,___xxtofl@val+2
  2770  000492  C06F  F006         	movff	sprintf@val+3,___xxtofl@val+3
  2771  000496  0E00               	movlw	0
  2772  000498  EC97  F00F         	call	___xxtofl
  2773  00049C  C003  F04B         	movff	?___xxtofl,___flsub@a
  2774  0004A0  C004  F04C         	movff	?___xxtofl+1,___flsub@a+1
  2775  0004A4  C005  F04D         	movff	?___xxtofl+2,___flsub@a+2
  2776  0004A8  C006  F04E         	movff	?___xxtofl+3,___flsub@a+3
  2777  0004AC  EC3A  F015         	call	___flsub	;wreg free
  2778  0004B0  C047  F076         	movff	?___flsub,sprintf@fval
  2779  0004B4  C048  F077         	movff	?___flsub+1,sprintf@fval+1
  2780  0004B8  C049  F078         	movff	?___flsub+2,sprintf@fval+2
  2781  0004BC  C04A  F079         	movff	?___flsub+3,sprintf@fval+3
  2782                           
  2783                           ;doprnt.c: 1152: eexp = 0;
  2784  0004C0  0E00               	movlw	0
  2785  0004C2  0100               	movlb	0	; () banked
  2786  0004C4  6F71               	movwf	(sprintf@eexp+1)& (0+255),b
  2787  0004C6  0E00               	movlw	0
  2788  0004C8  6F70               	movwf	sprintf@eexp& (0+255),b
  2789  0004CA                     l4321:
  2790                           
  2791                           ; BSR set to: 0
  2792                           ;doprnt.c: 1153: };doprnt.c: 1155: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ;
      +                           c++)
  2793  0004CA  0E01               	movlw	1
  2794  0004CC  6F7C               	movwf	sprintf@c& (0+255),b
  2795  0004CE                     l4323:
  2796                           
  2797                           ; BSR set to: 0
  2798  0004CE  0E0A               	movlw	10
  2799  0004D0  197C               	xorwf	sprintf@c& (0+255),w,b
  2800  0004D2  B4D8               	btfsc	status,2,c
  2801  0004D4  D018               	goto	l4335
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;doprnt.c: 1156: if(val < dpowers[c])
  2805  0004D6  517C               	movf	sprintf@c& (0+255),w,b
  2806  0004D8  0D04               	mullw	4
  2807  0004DA  0E5B               	movlw	low _dpowers
  2808  0004DC  24F3               	addwf	prodl,w,c
  2809  0004DE  6EF6               	movwf	tblptrl,c
  2810  0004E0  0E7F               	movlw	high _dpowers
  2811  0004E2  20F4               	addwfc	prodh,w,c
  2812  0004E4  6EF7               	movwf	tblptrh,c
  2813  0004E6                     	if	0	;There are less than 3 active tblptr bytes
  2814  0004E6                     	endif
  2815  0004E6  0009               	tblrd		*+
  2816  0004E8  50F5               	movf	tablat,w,c
  2817  0004EA  5D6C               	subwf	sprintf@val& (0+255),w,b
  2818  0004EC  0009               	tblrd		*+
  2819  0004EE  50F5               	movf	tablat,w,c
  2820  0004F0  596D               	subwfb	(sprintf@val+1)& (0+255),w,b
  2821  0004F2  0009               	tblrd		*+
  2822  0004F4  50F5               	movf	tablat,w,c
  2823  0004F6  596E               	subwfb	(sprintf@val+2)& (0+255),w,b
  2824  0004F8  0009               	tblrd		*+
  2825  0004FA  50F5               	movf	tablat,w,c
  2826  0004FC  596F               	subwfb	(sprintf@val+3)& (0+255),w,b
  2827  0004FE  A0D8               	btfss	status,0,c
  2828  000500  D002               	goto	l4335
  2829                           
  2830                           ; BSR set to: 0
  2831  000502  2B7C               	incf	sprintf@c& (0+255),f,b
  2832  000504  D7E4               	goto	l4323
  2833  000506                     l4335:
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;doprnt.c: 1194: {;doprnt.c: 1207: if(flag & 0x03)
  2837  000506  0E03               	movlw	3
  2838  000508  156A               	andwf	sprintf@flag& (0+255),w,b
  2839  00050A  6E57               	movwf	??_sprintf& (0+255),c
  2840  00050C  0E00               	movlw	0
  2841  00050E  156B               	andwf	(sprintf@flag+1)& (0+255),w,b
  2842  000510  6E58               	movwf	(??_sprintf+1)& (0+255),c
  2843  000512  5057               	movf	??_sprintf,w,c
  2844  000514  1058               	iorwf	??_sprintf+1,w,c
  2845  000516  B4D8               	btfsc	status,2,c
  2846  000518  D051               	goto	l4349
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;doprnt.c: 1209: ((*sp++ = ('-')));
  2850  00051A  C04F  FFD9         	movff	sprintf@sp,fsr2l
  2851  00051E  C050  FFDA         	movff	sprintf@sp+1,fsr2h
  2852  000522  0E2D               	movlw	45
  2853  000524  6EDF               	movwf	indf2,c
  2854                           
  2855                           ; BSR set to: 0
  2856  000526  4A4F               	infsnz	sprintf@sp,f,c
  2857  000528  2A50               	incf	sprintf@sp+1,f,c
  2858  00052A  D048               	goto	l4349
  2859  00052C                     l4341:
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;doprnt.c: 1219: {;doprnt.c: 1220: tmpval.vd = val/dpowers[c];
  2863  00052C  C06C  F003         	movff	sprintf@val,___lldiv@dividend
  2864  000530  C06D  F004         	movff	sprintf@val+1,___lldiv@dividend+1
  2865  000534  C06E  F005         	movff	sprintf@val+2,___lldiv@dividend+2
  2866  000538  C06F  F006         	movff	sprintf@val+3,___lldiv@dividend+3
  2867  00053C  517C               	movf	sprintf@c& (0+255),w,b
  2868  00053E  0D04               	mullw	4
  2869  000540  0E5B               	movlw	low _dpowers
  2870  000542  24F3               	addwf	prodl,w,c
  2871  000544  6EF6               	movwf	tblptrl,c
  2872  000546  0E7F               	movlw	high _dpowers
  2873  000548  20F4               	addwfc	prodh,w,c
  2874  00054A  6EF7               	movwf	tblptrh,c
  2875  00054C                     	if	0	;There are less than 3 active tblptr bytes
  2876  00054C                     	endif
  2877  00054C  0009               	tblrd		*+
  2878  00054E  CFF5 F007          	movff	tablat,___lldiv@divisor
  2879  000552  0009               	tblrd		*+
  2880  000554  CFF5 F008          	movff	tablat,___lldiv@divisor+1
  2881  000558  0009               	tblrd		*+
  2882  00055A  CFF5 F009          	movff	tablat,___lldiv@divisor+2
  2883  00055E  000A               	tblrd		*-
  2884  000560  CFF5 F00A          	movff	tablat,___lldiv@divisor+3
  2885  000564  EC06  F013         	call	___lldiv	;wreg free
  2886  000568  C003  F072         	movff	?___lldiv,sprintf@tmpval
  2887  00056C  C004  F073         	movff	?___lldiv+1,sprintf@tmpval+1
  2888  000570  C005  F074         	movff	?___lldiv+2,sprintf@tmpval+2
  2889  000574  C006  F075         	movff	?___lldiv+3,sprintf@tmpval+3
  2890                           
  2891                           ;doprnt.c: 1221: tmpval.vd %= 10;
  2892  000578  C072  F003         	movff	sprintf@tmpval,___llmod@dividend
  2893  00057C  C073  F004         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2894  000580  C074  F005         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2895  000584  C075  F006         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2896  000588  0E0A               	movlw	10
  2897  00058A  6E07               	movwf	___llmod@divisor,c
  2898  00058C  0E00               	movlw	0
  2899  00058E  6E08               	movwf	___llmod@divisor+1,c
  2900  000590  0E00               	movlw	0
  2901  000592  6E09               	movwf	___llmod@divisor+2,c
  2902  000594  0E00               	movlw	0
  2903  000596  6E0A               	movwf	___llmod@divisor+3,c
  2904  000598  EC32  F014         	call	___llmod	;wreg free
  2905  00059C  C003  F072         	movff	?___llmod,sprintf@tmpval
  2906  0005A0  C004  F073         	movff	?___llmod+1,sprintf@tmpval+1
  2907  0005A4  C005  F074         	movff	?___llmod+2,sprintf@tmpval+2
  2908  0005A8  C006  F075         	movff	?___llmod+3,sprintf@tmpval+3
  2909                           
  2910                           ;doprnt.c: 1222: ((*sp++ = ('0' + tmpval.vd)));
  2911  0005AC  0100               	movlb	0	; () banked
  2912  0005AE  5172               	movf	sprintf@tmpval& (0+255),w,b
  2913  0005B0  0F30               	addlw	48
  2914  0005B2  C04F  FFD9         	movff	sprintf@sp,fsr2l
  2915  0005B6  C050  FFDA         	movff	sprintf@sp+1,fsr2h
  2916  0005BA  D7B4               	goto	L2
  2917  0005BC                     l4349:
  2918                           
  2919                           ; BSR set to: 0
  2920  0005BC  077C               	decf	sprintf@c& (0+255),f,b
  2921  0005BE  297C               	incf	sprintf@c& (0+255),w,b
  2922  0005C0  B4D8               	btfsc	status,2,c
  2923  0005C2  D00C               	goto	l4357
  2924  0005C4  D7B3               	goto	l4341
  2925  0005C6                     l4351:
  2926                           
  2927                           ; BSR set to: 0
  2928                           ;doprnt.c: 1227: ((*sp++ = ('0')));
  2929  0005C6  C04F  FFD9         	movff	sprintf@sp,fsr2l
  2930  0005CA  C050  FFDA         	movff	sprintf@sp+1,fsr2h
  2931  0005CE  0E30               	movlw	48
  2932  0005D0  6EDF               	movwf	indf2,c
  2933                           
  2934                           ; BSR set to: 0
  2935  0005D2  4A4F               	infsnz	sprintf@sp,f,c
  2936  0005D4  2A50               	incf	sprintf@sp+1,f,c
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;doprnt.c: 1228: eexp--;
  2940  0005D6  0770               	decf	sprintf@eexp& (0+255),f,b
  2941  0005D8  A0D8               	btfss	status,0,c
  2942  0005DA  0771               	decf	(sprintf@eexp+1)& (0+255),f,b
  2943  0005DC                     l4357:
  2944                           
  2945                           ; BSR set to: 0
  2946  0005DC  BF71               	btfsc	(sprintf@eexp+1)& (0+255),7,b
  2947  0005DE  D005               	goto	u4630
  2948  0005E0  5171               	movf	(sprintf@eexp+1)& (0+255),w,b
  2949  0005E2  E1F1               	bnz	l4351
  2950  0005E4  0570               	decf	sprintf@eexp& (0+255),w,b
  2951  0005E6  B0D8               	btfsc	status,0,c
  2952  0005E8  D7EE               	goto	l4351
  2953  0005EA                     u4630:
  2954                           
  2955                           ; BSR set to: 0
  2956                           ;doprnt.c: 1229: };doprnt.c: 1230: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2)
      +                          )
  2957  0005EA  BF7B               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2958  0005EC  D009               	goto	l503
  2959  0005EE  517B               	movf	(sprintf@prec+1)& (0+255),w,b
  2960  0005F0  E104               	bnz	u4640
  2961  0005F2  0E09               	movlw	9
  2962  0005F4  5D7A               	subwf	sprintf@prec& (0+255),w,b
  2963  0005F6  A0D8               	btfss	status,0,c
  2964  0005F8  D003               	goto	l503
  2965  0005FA                     u4640:
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;doprnt.c: 1231: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2969  0005FA  0E08               	movlw	8
  2970  0005FC  6F7C               	movwf	sprintf@c& (0+255),b
  2971  0005FE  D002               	goto	l4363
  2972  000600                     l503:
  2973                           
  2974                           ; BSR set to: 0
  2975                           ;doprnt.c: 1232: else;doprnt.c: 1233: c = (char)prec;
  2976  000600  C07A  F07C         	movff	sprintf@prec,sprintf@c
  2977  000604                     l4363:
  2978                           
  2979                           ; BSR set to: 0
  2980                           ;doprnt.c: 1234: prec -= (int)c;
  2981  000604  517C               	movf	sprintf@c& (0+255),w,b
  2982  000606  5F7A               	subwf	sprintf@prec& (0+255),f,b
  2983  000608  0E00               	movlw	0
  2984  00060A  5B7B               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2985                           
  2986                           ; BSR set to: 0
  2987                           ;doprnt.c: 1238: if(c)
  2988  00060C  517C               	movf	sprintf@c& (0+255),w,b
  2989  00060E  B4D8               	btfsc	status,2,c
  2990  000610  D008               	goto	l4371
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;doprnt.c: 1240: ((*sp++ = ('.')));
  2994  000612  C04F  FFD9         	movff	sprintf@sp,fsr2l
  2995  000616  C050  FFDA         	movff	sprintf@sp+1,fsr2h
  2996  00061A  0E2E               	movlw	46
  2997  00061C  6EDF               	movwf	indf2,c
  2998                           
  2999                           ; BSR set to: 0
  3000  00061E  4A4F               	infsnz	sprintf@sp,f,c
  3001  000620  2A50               	incf	sprintf@sp+1,f,c
  3002  000622                     l4371:
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;doprnt.c: 1246: val = (unsigned long)(fval * scale((signed char)c));
  3006  000622  517C               	movf	sprintf@c& (0+255),w,b
  3007  000624  EC0F  F004         	call	_scale
  3008  000628  C02A  F060         	movff	?_scale,_sprintf$1887
  3009  00062C  C02B  F061         	movff	?_scale+1,_sprintf$1887+1
  3010  000630  C02C  F062         	movff	?_scale+2,_sprintf$1887+2
  3011  000634  C02D  F063         	movff	?_scale+3,_sprintf$1887+3
  3012                           
  3013                           ;doprnt.c: 1246: val = (unsigned long)(fval * scale((signed char)c));
  3014  000638  C076  F015         	movff	sprintf@fval,___flmul@a
  3015  00063C  C077  F016         	movff	sprintf@fval+1,___flmul@a+1
  3016  000640  C078  F017         	movff	sprintf@fval+2,___flmul@a+2
  3017  000644  C079  F018         	movff	sprintf@fval+3,___flmul@a+3
  3018  000648  C060  F011         	movff	_sprintf$1887,___flmul@b
  3019  00064C  C061  F012         	movff	_sprintf$1887+1,___flmul@b+1
  3020  000650  C062  F013         	movff	_sprintf$1887+2,___flmul@b+2
  3021  000654  C063  F014         	movff	_sprintf$1887+3,___flmul@b+3
  3022  000658  ECF7  F005         	call	___flmul	;wreg free
  3023  00065C  C011  F02A         	movff	?___flmul,___fltol@f1
  3024  000660  C012  F02B         	movff	?___flmul+1,___fltol@f1+1
  3025  000664  C013  F02C         	movff	?___flmul+2,___fltol@f1+2
  3026  000668  C014  F02D         	movff	?___flmul+3,___fltol@f1+3
  3027  00066C  EC22  F012         	call	___fltol	;wreg free
  3028  000670  C02A  F06C         	movff	?___fltol,sprintf@val
  3029  000674  C02B  F06D         	movff	?___fltol+1,sprintf@val+1
  3030  000678  C02C  F06E         	movff	?___fltol+2,sprintf@val+2
  3031  00067C  C02D  F06F         	movff	?___fltol+3,sprintf@val+3
  3032                           
  3033                           ;doprnt.c: 1247: while(c--) {
  3034  000680  D070               	goto	l4385
  3035  000682                     l4375:
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;doprnt.c: 1248: tmpval.vd = val/dpowers[c];
  3039  000682  C06C  F003         	movff	sprintf@val,___lldiv@dividend
  3040  000686  C06D  F004         	movff	sprintf@val+1,___lldiv@dividend+1
  3041  00068A  C06E  F005         	movff	sprintf@val+2,___lldiv@dividend+2
  3042  00068E  C06F  F006         	movff	sprintf@val+3,___lldiv@dividend+3
  3043  000692  517C               	movf	sprintf@c& (0+255),w,b
  3044  000694  0D04               	mullw	4
  3045  000696  0E5B               	movlw	low _dpowers
  3046  000698  24F3               	addwf	prodl,w,c
  3047  00069A  6EF6               	movwf	tblptrl,c
  3048  00069C  0E7F               	movlw	high _dpowers
  3049  00069E  20F4               	addwfc	prodh,w,c
  3050  0006A0  6EF7               	movwf	tblptrh,c
  3051  0006A2                     	if	0	;There are less than 3 active tblptr bytes
  3052  0006A2                     	endif
  3053  0006A2  0009               	tblrd		*+
  3054  0006A4  CFF5 F007          	movff	tablat,___lldiv@divisor
  3055  0006A8  0009               	tblrd		*+
  3056  0006AA  CFF5 F008          	movff	tablat,___lldiv@divisor+1
  3057  0006AE  0009               	tblrd		*+
  3058  0006B0  CFF5 F009          	movff	tablat,___lldiv@divisor+2
  3059  0006B4  000A               	tblrd		*-
  3060  0006B6  CFF5 F00A          	movff	tablat,___lldiv@divisor+3
  3061  0006BA  EC06  F013         	call	___lldiv	;wreg free
  3062  0006BE  C003  F072         	movff	?___lldiv,sprintf@tmpval
  3063  0006C2  C004  F073         	movff	?___lldiv+1,sprintf@tmpval+1
  3064  0006C6  C005  F074         	movff	?___lldiv+2,sprintf@tmpval+2
  3065  0006CA  C006  F075         	movff	?___lldiv+3,sprintf@tmpval+3
  3066                           
  3067                           ;doprnt.c: 1249: tmpval.vd %= 10;
  3068  0006CE  C072  F003         	movff	sprintf@tmpval,___llmod@dividend
  3069  0006D2  C073  F004         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3070  0006D6  C074  F005         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3071  0006DA  C075  F006         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3072  0006DE  0E0A               	movlw	10
  3073  0006E0  6E07               	movwf	___llmod@divisor,c
  3074  0006E2  0E00               	movlw	0
  3075  0006E4  6E08               	movwf	___llmod@divisor+1,c
  3076  0006E6  0E00               	movlw	0
  3077  0006E8  6E09               	movwf	___llmod@divisor+2,c
  3078  0006EA  0E00               	movlw	0
  3079  0006EC  6E0A               	movwf	___llmod@divisor+3,c
  3080  0006EE  EC32  F014         	call	___llmod	;wreg free
  3081  0006F2  C003  F072         	movff	?___llmod,sprintf@tmpval
  3082  0006F6  C004  F073         	movff	?___llmod+1,sprintf@tmpval+1
  3083  0006FA  C005  F074         	movff	?___llmod+2,sprintf@tmpval+2
  3084  0006FE  C006  F075         	movff	?___llmod+3,sprintf@tmpval+3
  3085                           
  3086                           ;doprnt.c: 1250: ((*sp++ = ('0' + tmpval.vd)));
  3087  000702  0100               	movlb	0	; () banked
  3088  000704  5172               	movf	sprintf@tmpval& (0+255),w,b
  3089  000706  0F30               	addlw	48
  3090  000708  C04F  FFD9         	movff	sprintf@sp,fsr2l
  3091  00070C  C050  FFDA         	movff	sprintf@sp+1,fsr2h
  3092  000710  6EDF               	movwf	indf2,c
  3093                           
  3094                           ; BSR set to: 0
  3095  000712  4A4F               	infsnz	sprintf@sp,f,c
  3096  000714  2A50               	incf	sprintf@sp+1,f,c
  3097                           
  3098                           ; BSR set to: 0
  3099                           ;doprnt.c: 1251: val %= dpowers[c];
  3100  000716  C06C  F003         	movff	sprintf@val,___llmod@dividend
  3101  00071A  C06D  F004         	movff	sprintf@val+1,___llmod@dividend+1
  3102  00071E  C06E  F005         	movff	sprintf@val+2,___llmod@dividend+2
  3103  000722  C06F  F006         	movff	sprintf@val+3,___llmod@dividend+3
  3104  000726  517C               	movf	sprintf@c& (0+255),w,b
  3105  000728  0D04               	mullw	4
  3106  00072A  0E5B               	movlw	low _dpowers
  3107  00072C  24F3               	addwf	prodl,w,c
  3108  00072E  6EF6               	movwf	tblptrl,c
  3109  000730  0E7F               	movlw	high _dpowers
  3110  000732  20F4               	addwfc	prodh,w,c
  3111  000734  6EF7               	movwf	tblptrh,c
  3112  000736                     	if	0	;There are less than 3 active tblptr bytes
  3113  000736                     	endif
  3114  000736  0009               	tblrd		*+
  3115  000738  CFF5 F007          	movff	tablat,___llmod@divisor
  3116  00073C  0009               	tblrd		*+
  3117  00073E  CFF5 F008          	movff	tablat,___llmod@divisor+1
  3118  000742  0009               	tblrd		*+
  3119  000744  CFF5 F009          	movff	tablat,___llmod@divisor+2
  3120  000748  000A               	tblrd		*-
  3121  00074A  CFF5 F00A          	movff	tablat,___llmod@divisor+3
  3122  00074E  EC32  F014         	call	___llmod	;wreg free
  3123  000752  C003  F06C         	movff	?___llmod,sprintf@val
  3124  000756  C004  F06D         	movff	?___llmod+1,sprintf@val+1
  3125  00075A  C005  F06E         	movff	?___llmod+2,sprintf@val+2
  3126  00075E  C006  F06F         	movff	?___llmod+3,sprintf@val+3
  3127  000762                     l4385:
  3128  000762  0100               	movlb	0	; () banked
  3129  000764  077C               	decf	sprintf@c& (0+255),f,b
  3130  000766  297C               	incf	sprintf@c& (0+255),w,b
  3131  000768  B4D8               	btfsc	status,2,c
  3132  00076A  D00C               	goto	l4393
  3133  00076C  D78A               	goto	l4375
  3134  00076E                     l4387:
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;doprnt.c: 1255: ((*sp++ = ('0')));
  3138  00076E  C04F  FFD9         	movff	sprintf@sp,fsr2l
  3139  000772  C050  FFDA         	movff	sprintf@sp+1,fsr2h
  3140  000776  0E30               	movlw	48
  3141  000778  6EDF               	movwf	indf2,c
  3142                           
  3143                           ; BSR set to: 0
  3144  00077A  4A4F               	infsnz	sprintf@sp,f,c
  3145  00077C  2A50               	incf	sprintf@sp+1,f,c
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;doprnt.c: 1256: prec--;
  3149  00077E  077A               	decf	sprintf@prec& (0+255),f,b
  3150  000780  A0D8               	btfss	status,0,c
  3151  000782  077B               	decf	(sprintf@prec+1)& (0+255),f,b
  3152  000784                     l4393:
  3153                           
  3154                           ; BSR set to: 0
  3155  000784  517A               	movf	sprintf@prec& (0+255),w,b
  3156  000786  117B               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3157  000788  B4D8               	btfsc	status,2,c
  3158  00078A  D036               	goto	l4415
  3159  00078C  D7F0               	goto	l4387
  3160  00078E                     l4395:
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;doprnt.c: 1265: };doprnt.c: 1309: if(prec == 0 && val == 0)
  3164  00078E  517A               	movf	sprintf@prec& (0+255),w,b
  3165  000790  117B               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3166  000792  A4D8               	btfss	status,2,c
  3167  000794  D008               	goto	l4401
  3168                           
  3169                           ; BSR set to: 0
  3170  000796  516C               	movf	sprintf@val& (0+255),w,b
  3171  000798  116D               	iorwf	(sprintf@val+1)& (0+255),w,b
  3172  00079A  116E               	iorwf	(sprintf@val+2)& (0+255),w,b
  3173  00079C  116F               	iorwf	(sprintf@val+3)& (0+255),w,b
  3174  00079E  A4D8               	btfss	status,2,c
  3175  0007A0  D002               	goto	l4401
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;doprnt.c: 1310: prec++;
  3179  0007A2  4B7A               	infsnz	sprintf@prec& (0+255),f,b
  3180  0007A4  2B7B               	incf	(sprintf@prec+1)& (0+255),f,b
  3181  0007A6                     l4401:
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;doprnt.c: 1358: if(c < prec)
  3185  0007A6  517C               	movf	sprintf@c& (0+255),w,b
  3186  0007A8  6E57               	movwf	??_sprintf& (0+255),c
  3187  0007AA  6A58               	clrf	(??_sprintf+1)& (0+255),c
  3188  0007AC  517A               	movf	sprintf@prec& (0+255),w,b
  3189  0007AE  5C57               	subwf	??_sprintf,w,c
  3190  0007B0  5058               	movf	??_sprintf+1,w,c
  3191  0007B2  0A80               	xorlw	128
  3192  0007B4  6E59               	movwf	(??_sprintf+2)& (0+255),c
  3193  0007B6  517B               	movf	(sprintf@prec+1)& (0+255),w,b
  3194  0007B8  0A80               	xorlw	128
  3195  0007BA  5859               	subwfb	(??_sprintf+2)& (0+255),w,c
  3196  0007BC  A0D8               	btfss	status,0,c
  3197  0007BE  D00B               	goto	u4711
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;doprnt.c: 1360: else if(prec < c)
  3201                           
  3202                           ; BSR set to: 0
  3203  0007C0  517C               	movf	sprintf@c& (0+255),w,b
  3204  0007C2  6E57               	movwf	??_sprintf& (0+255),c
  3205  0007C4  6A58               	clrf	(??_sprintf+1)& (0+255),c
  3206  0007C6  5057               	movf	??_sprintf,w,c
  3207  0007C8  5D7A               	subwf	sprintf@prec& (0+255),w,b
  3208  0007CA  517B               	movf	(sprintf@prec+1)& (0+255),w,b
  3209  0007CC  0A80               	xorlw	128
  3210  0007CE  6E59               	movwf	(??_sprintf+2)& (0+255),c
  3211  0007D0  5058               	movf	??_sprintf+1,w,c
  3212  0007D2  0A80               	xorlw	128
  3213  0007D4  5859               	subwfb	(??_sprintf+2)& (0+255),w,c
  3214  0007D6                     u4711:
  3215                           
  3216                           ; BSR set to: 0
  3217                           ;doprnt.c: 1441: {;doprnt.c: 1457: if(flag & 0x03)
  3218                           
  3219                           ; BSR set to: 0
  3220  0007D6  0E03               	movlw	3
  3221  0007D8  156A               	andwf	sprintf@flag& (0+255),w,b
  3222  0007DA  6E57               	movwf	??_sprintf& (0+255),c
  3223  0007DC  0E00               	movlw	0
  3224  0007DE  156B               	andwf	(sprintf@flag+1)& (0+255),w,b
  3225  0007E0  6E58               	movwf	(??_sprintf+1)& (0+255),c
  3226  0007E2  5057               	movf	??_sprintf,w,c
  3227  0007E4  1058               	iorwf	??_sprintf+1,w,c
  3228  0007E6  B4D8               	btfsc	status,2,c
  3229  0007E8  D007               	goto	l4415
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;doprnt.c: 1458: ((*sp++ = ('-')));
  3233  0007EA  C04F  FFD9         	movff	sprintf@sp,fsr2l
  3234  0007EE  C050  FFDA         	movff	sprintf@sp+1,fsr2h
  3235  0007F2  0E2D               	movlw	45
  3236  0007F4  6EDF               	movwf	indf2,c
  3237  0007F6  D434               	goto	l4203
  3238  0007F8                     l4415:
  3239                           
  3240                           ; BSR set to: 0
  3241  0007F8  C051  FFF6         	movff	sprintf@f,tblptrl
  3242  0007FC  C052  FFF7         	movff	sprintf@f+1,tblptrh
  3243  000800  4A51               	infsnz	sprintf@f,f,c
  3244  000802  2A52               	incf	sprintf@f+1,f,c
  3245  000804                     	if	0	;tblptru may be non-zero
  3246  000804                     	endif
  3247  000804                     	if	0	;tblptru may be non-zero
  3248  000804                     	endif
  3249  000804  0008               	tblrd		*
  3250  000806  CFF5 F07C          	movff	tablat,sprintf@c
  3251  00080A  517C               	movf	sprintf@c& (0+255),w,b
  3252  00080C  A4D8               	btfss	status,2,c
  3253  00080E  D41E               	goto	l4199
  3254  000810                     u4730:
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;doprnt.c: 1557: *sp = 0;
  3258  000810  C04F  FFD9         	movff	sprintf@sp,fsr2l
  3259  000814  C050  FFDA         	movff	sprintf@sp+1,fsr2h
  3260  000818  0E00               	movlw	0
  3261  00081A  6EDF               	movwf	indf2,c
  3262                           
  3263                           ; BSR set to: 0
  3264  00081C  0012               	return		;funcret
  3265  00081E                     __end_of_sprintf:
  3266                           	opt callstack 0
  3267                           
  3268 ;; *************** function _scale *****************
  3269 ;; Defined at:
  3270 ;;		line 433 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/doprnt.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;  scl             1    wreg     char 
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;  scl             1   49[COMRAM] char 
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  4   41[COMRAM] char 
  3277 ;; Registers used:
  3278 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3284 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3285 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3287 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3288 ;;Total ram usage:        9 bytes
  3289 ;; Hardware stack levels used:    1
  3290 ;; Hardware stack levels required when called:    3
  3291 ;; This function calls:
  3292 ;;		___awdiv
  3293 ;;		___awmod
  3294 ;;		___flmul
  3295 ;; This function is called by:
  3296 ;;		_sprintf
  3297 ;; This function uses a non-reentrant model
  3298 ;;
  3299                           
  3300                           	psect	text5
  3301  00081E                     __ptext5:
  3302                           	opt callstack 0
  3303  00081E                     _scale:
  3304                           	opt callstack 24
  3305                           
  3306                           ; BSR set to: 0
  3307                           ;incstack = 0
  3308                           ;scale@scl stored from wreg
  3309  00081E  6E32               	movwf	scale@scl,c
  3310                           
  3311                           ;doprnt.c: 436: if(scl < 0) {
  3312  000820  AE32               	btfss	scale@scl,7,c
  3313  000822  D0F3               	goto	l3715
  3314                           
  3315                           ;doprnt.c: 437: scl = -scl;
  3316  000824  6C32               	negf	scale@scl,c
  3317                           
  3318                           ;doprnt.c: 438: if(scl>=110)
  3319  000826  5032               	movf	scale@scl,w,c
  3320  000828  0A80               	xorlw	128
  3321  00082A  0F12               	addlw	-238
  3322  00082C  A0D8               	btfss	status,0,c
  3323  00082E  D088               	goto	l3705
  3324                           
  3325                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  3326  000830  0E00               	movlw	0
  3327  000832  6E0C               	movwf	___awdiv@divisor+1,c
  3328  000834  0E0A               	movlw	10
  3329  000836  6E0B               	movwf	___awdiv@divisor,c
  3330  000838  0E00               	movlw	0
  3331  00083A  6E06               	movwf	___awmod@divisor+1,c
  3332  00083C  0E64               	movlw	100
  3333  00083E  6E05               	movwf	___awmod@divisor,c
  3334  000840  5032               	movf	scale@scl,w,c
  3335  000842  6E03               	movwf	___awmod@dividend,c
  3336  000844  6A04               	clrf	___awmod@dividend+1,c
  3337  000846  BE03               	btfsc	___awmod@dividend,7,c
  3338  000848  0604               	decf	___awmod@dividend+1,f,c
  3339  00084A  ECFA  F013         	call	___awmod	;wreg free
  3340  00084E  C003  F009         	movff	?___awmod,___awdiv@dividend
  3341  000852  C004  F00A         	movff	?___awmod+1,___awdiv@dividend+1
  3342  000856  ECC4  F012         	call	___awdiv	;wreg free
  3343  00085A  0E09               	movlw	9
  3344  00085C  2609               	addwf	?___awdiv,f,c
  3345  00085E  5009               	movf	?___awdiv,w,c
  3346  000860  0D04               	mullw	4
  3347  000862  0E27               	movlw	low __npowers_
  3348  000864  24F3               	addwf	prodl,w,c
  3349  000866  6EF6               	movwf	tblptrl,c
  3350  000868  0E7F               	movlw	high __npowers_
  3351  00086A  20F4               	addwfc	prodh,w,c
  3352  00086C  6EF7               	movwf	tblptrh,c
  3353  00086E                     	if	0	;There are less than 3 active tblptr bytes
  3354  00086E                     	endif
  3355  00086E  0009               	tblrd		*+
  3356  000870  CFF5 F015          	movff	tablat,___flmul@a
  3357  000874  0009               	tblrd		*+
  3358  000876  CFF5 F016          	movff	tablat,___flmul@a+1
  3359  00087A  0009               	tblrd		*+
  3360  00087C  CFF5 F017          	movff	tablat,___flmul@a+2
  3361  000880  000A               	tblrd		*-
  3362  000882  CFF5 F018          	movff	tablat,___flmul@a+3
  3363  000886  0E00               	movlw	0
  3364  000888  6E0C               	movwf	___awdiv@divisor+1,c
  3365  00088A  0E64               	movlw	100
  3366  00088C  6E0B               	movwf	___awdiv@divisor,c
  3367  00088E  5032               	movf	scale@scl,w,c
  3368  000890  6E09               	movwf	___awdiv@dividend,c
  3369  000892  6A0A               	clrf	___awdiv@dividend+1,c
  3370  000894  BE09               	btfsc	___awdiv@dividend,7,c
  3371  000896  060A               	decf	___awdiv@dividend+1,f,c
  3372  000898  ECC4  F012         	call	___awdiv	;wreg free
  3373  00089C  0E12               	movlw	18
  3374  00089E  2609               	addwf	?___awdiv,f,c
  3375  0008A0  5009               	movf	?___awdiv,w,c
  3376  0008A2  0D04               	mullw	4
  3377  0008A4  0E27               	movlw	low __npowers_
  3378  0008A6  24F3               	addwf	prodl,w,c
  3379  0008A8  6EF6               	movwf	tblptrl,c
  3380  0008AA  0E7F               	movlw	high __npowers_
  3381  0008AC  20F4               	addwfc	prodh,w,c
  3382  0008AE  6EF7               	movwf	tblptrh,c
  3383  0008B0                     	if	0	;There are less than 3 active tblptr bytes
  3384  0008B0                     	endif
  3385  0008B0  0009               	tblrd		*+
  3386  0008B2  CFF5 F011          	movff	tablat,___flmul@b
  3387  0008B6  0009               	tblrd		*+
  3388  0008B8  CFF5 F012          	movff	tablat,___flmul@b+1
  3389  0008BC  0009               	tblrd		*+
  3390  0008BE  CFF5 F013          	movff	tablat,___flmul@b+2
  3391  0008C2  000A               	tblrd		*-
  3392  0008C4  CFF5 F014          	movff	tablat,___flmul@b+3
  3393  0008C8  ECF7  F005         	call	___flmul	;wreg free
  3394  0008CC  C011  F02E         	movff	?___flmul,_scale$1886
  3395  0008D0  C012  F02F         	movff	?___flmul+1,_scale$1886+1
  3396  0008D4  C013  F030         	movff	?___flmul+2,_scale$1886+2
  3397  0008D8  C014  F031         	movff	?___flmul+3,_scale$1886+3
  3398                           
  3399                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  3400  0008DC  C02E  F011         	movff	_scale$1886,___flmul@b
  3401  0008E0  C02F  F012         	movff	_scale$1886+1,___flmul@b+1
  3402  0008E4  C030  F013         	movff	_scale$1886+2,___flmul@b+2
  3403  0008E8  C031  F014         	movff	_scale$1886+3,___flmul@b+3
  3404  0008EC  0E00               	movlw	0
  3405  0008EE  6E06               	movwf	___awmod@divisor+1,c
  3406  0008F0  0E0A               	movlw	10
  3407  0008F2  6E05               	movwf	___awmod@divisor,c
  3408  0008F4  5032               	movf	scale@scl,w,c
  3409  0008F6  6E03               	movwf	___awmod@dividend,c
  3410  0008F8  6A04               	clrf	___awmod@dividend+1,c
  3411  0008FA  BE03               	btfsc	___awmod@dividend,7,c
  3412  0008FC  0604               	decf	___awmod@dividend+1,f,c
  3413  0008FE  ECFA  F013         	call	___awmod	;wreg free
  3414  000902  5003               	movf	?___awmod,w,c
  3415  000904  0D04               	mullw	4
  3416  000906  0E27               	movlw	low __npowers_
  3417  000908  24F3               	addwf	prodl,w,c
  3418  00090A  6EF6               	movwf	tblptrl,c
  3419  00090C  0E7F               	movlw	high __npowers_
  3420  00090E  20F4               	addwfc	prodh,w,c
  3421  000910  6EF7               	movwf	tblptrh,c
  3422  000912                     	if	0	;There are less than 3 active tblptr bytes
  3423  000912                     	endif
  3424  000912  0009               	tblrd		*+
  3425  000914  CFF5 F015          	movff	tablat,___flmul@a
  3426  000918  0009               	tblrd		*+
  3427  00091A  CFF5 F016          	movff	tablat,___flmul@a+1
  3428  00091E  0009               	tblrd		*+
  3429  000920  CFF5 F017          	movff	tablat,___flmul@a+2
  3430  000924  000A               	tblrd		*-
  3431  000926  CFF5 F018          	movff	tablat,___flmul@a+3
  3432  00092A  ECF7  F005         	call	___flmul	;wreg free
  3433  00092E  C011  F02A         	movff	?___flmul,?_scale
  3434  000932  C012  F02B         	movff	?___flmul+1,?_scale+1
  3435  000936  C013  F02C         	movff	?___flmul+2,?_scale+2
  3436  00093A  C014  F02D         	movff	?___flmul+3,?_scale+3
  3437  00093E  0012               	return	
  3438  000940                     l3705:
  3439                           
  3440                           ;doprnt.c: 440: else if(scl > 10)
  3441  000940  5032               	movf	scale@scl,w,c
  3442  000942  0A80               	xorlw	128
  3443  000944  0F75               	addlw	-139
  3444  000946  A0D8               	btfss	status,0,c
  3445  000948  D04B               	goto	l3711
  3446                           
  3447                           ;doprnt.c: 441: return _npowers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(
      +                          scl%10)];
  3448  00094A  0E00               	movlw	0
  3449  00094C  6E0C               	movwf	___awdiv@divisor+1,c
  3450  00094E  0E0A               	movlw	10
  3451  000950  6E0B               	movwf	___awdiv@divisor,c
  3452  000952  5032               	movf	scale@scl,w,c
  3453  000954  6E09               	movwf	___awdiv@dividend,c
  3454  000956  6A0A               	clrf	___awdiv@dividend+1,c
  3455  000958  BE09               	btfsc	___awdiv@dividend,7,c
  3456  00095A  060A               	decf	___awdiv@dividend+1,f,c
  3457  00095C  ECC4  F012         	call	___awdiv	;wreg free
  3458  000960  0E09               	movlw	9
  3459  000962  2609               	addwf	?___awdiv,f,c
  3460  000964  5009               	movf	?___awdiv,w,c
  3461  000966  0D04               	mullw	4
  3462  000968  0E27               	movlw	low __npowers_
  3463  00096A  24F3               	addwf	prodl,w,c
  3464  00096C  6EF6               	movwf	tblptrl,c
  3465  00096E  0E7F               	movlw	high __npowers_
  3466  000970  20F4               	addwfc	prodh,w,c
  3467  000972  6EF7               	movwf	tblptrh,c
  3468  000974                     	if	0	;There are less than 3 active tblptr bytes
  3469  000974                     	endif
  3470  000974  0009               	tblrd		*+
  3471  000976  CFF5 F011          	movff	tablat,___flmul@b
  3472  00097A  0009               	tblrd		*+
  3473  00097C  CFF5 F012          	movff	tablat,___flmul@b+1
  3474  000980  0009               	tblrd		*+
  3475  000982  CFF5 F013          	movff	tablat,___flmul@b+2
  3476  000986  000A               	tblrd		*-
  3477  000988  CFF5 F014          	movff	tablat,___flmul@b+3
  3478  00098C  0E00               	movlw	0
  3479  00098E  6E06               	movwf	___awmod@divisor+1,c
  3480  000990  0E0A               	movlw	10
  3481  000992  6E05               	movwf	___awmod@divisor,c
  3482  000994  5032               	movf	scale@scl,w,c
  3483  000996  6E03               	movwf	___awmod@dividend,c
  3484  000998  6A04               	clrf	___awmod@dividend+1,c
  3485  00099A  BE03               	btfsc	___awmod@dividend,7,c
  3486  00099C  0604               	decf	___awmod@dividend+1,f,c
  3487  00099E  ECFA  F013         	call	___awmod	;wreg free
  3488  0009A2  5003               	movf	?___awmod,w,c
  3489  0009A4  0D04               	mullw	4
  3490  0009A6  0E27               	movlw	low __npowers_
  3491  0009A8  24F3               	addwf	prodl,w,c
  3492  0009AA  6EF6               	movwf	tblptrl,c
  3493  0009AC  0E7F               	movlw	high __npowers_
  3494  0009AE  20F4               	addwfc	prodh,w,c
  3495  0009B0  6EF7               	movwf	tblptrh,c
  3496  0009B2                     	if	0	;There are less than 3 active tblptr bytes
  3497  0009B2                     	endif
  3498  0009B2  0009               	tblrd		*+
  3499  0009B4  CFF5 F015          	movff	tablat,___flmul@a
  3500  0009B8  0009               	tblrd		*+
  3501  0009BA  CFF5 F016          	movff	tablat,___flmul@a+1
  3502  0009BE  0009               	tblrd		*+
  3503  0009C0  CFF5 F017          	movff	tablat,___flmul@a+2
  3504  0009C4  000A               	tblrd		*-
  3505  0009C6  CFF5 F018          	movff	tablat,___flmul@a+3
  3506  0009CA  ECF7  F005         	call	___flmul	;wreg free
  3507  0009CE  C011  F02A         	movff	?___flmul,?_scale
  3508  0009D2  C012  F02B         	movff	?___flmul+1,?_scale+1
  3509  0009D6  C013  F02C         	movff	?___flmul+2,?_scale+2
  3510  0009DA  C014  F02D         	movff	?___flmul+3,?_scale+3
  3511  0009DE  0012               	return	
  3512  0009E0                     l3711:
  3513                           
  3514                           ;doprnt.c: 442: return _npowers_[(unsigned char)scl];
  3515  0009E0  5032               	movf	scale@scl,w,c
  3516  0009E2  0D04               	mullw	4
  3517  0009E4  0E27               	movlw	low __npowers_
  3518  0009E6  24F3               	addwf	prodl,w,c
  3519  0009E8  6EF6               	movwf	tblptrl,c
  3520  0009EA  0E7F               	movlw	high __npowers_
  3521  0009EC  20F4               	addwfc	prodh,w,c
  3522  0009EE  6EF7               	movwf	tblptrh,c
  3523  0009F0                     	if	0	;There are less than 3 active tblptr bytes
  3524  0009F0                     	endif
  3525  0009F0  0009               	tblrd		*+
  3526  0009F2  CFF5 F02A          	movff	tablat,?_scale
  3527  0009F6  0009               	tblrd		*+
  3528  0009F8  CFF5 F02B          	movff	tablat,?_scale+1
  3529  0009FC  0009               	tblrd		*+
  3530  0009FE  CFF5 F02C          	movff	tablat,?_scale+2
  3531  000A02  000A               	tblrd		*-
  3532  000A04  CFF5 F02D          	movff	tablat,?_scale+3
  3533  000A08  0012               	return	
  3534  000A0A                     l3715:
  3535                           
  3536                           ;doprnt.c: 443: };doprnt.c: 444: if(scl>=110)
  3537  000A0A  5032               	movf	scale@scl,w,c
  3538  000A0C  0A80               	xorlw	128
  3539  000A0E  0F12               	addlw	-238
  3540  000A10  A0D8               	btfss	status,0,c
  3541  000A12  D088               	goto	l3723
  3542                           
  3543                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  3544  000A14  0E00               	movlw	0
  3545  000A16  6E0C               	movwf	___awdiv@divisor+1,c
  3546  000A18  0E0A               	movlw	10
  3547  000A1A  6E0B               	movwf	___awdiv@divisor,c
  3548  000A1C  0E00               	movlw	0
  3549  000A1E  6E06               	movwf	___awmod@divisor+1,c
  3550  000A20  0E64               	movlw	100
  3551  000A22  6E05               	movwf	___awmod@divisor,c
  3552  000A24  5032               	movf	scale@scl,w,c
  3553  000A26  6E03               	movwf	___awmod@dividend,c
  3554  000A28  6A04               	clrf	___awmod@dividend+1,c
  3555  000A2A  BE03               	btfsc	___awmod@dividend,7,c
  3556  000A2C  0604               	decf	___awmod@dividend+1,f,c
  3557  000A2E  ECFA  F013         	call	___awmod	;wreg free
  3558  000A32  C003  F009         	movff	?___awmod,___awdiv@dividend
  3559  000A36  C004  F00A         	movff	?___awmod+1,___awdiv@dividend+1
  3560  000A3A  ECC4  F012         	call	___awdiv	;wreg free
  3561  000A3E  0E09               	movlw	9
  3562  000A40  2609               	addwf	?___awdiv,f,c
  3563  000A42  5009               	movf	?___awdiv,w,c
  3564  000A44  0D04               	mullw	4
  3565  000A46  0EF3               	movlw	low __powers_
  3566  000A48  24F3               	addwf	prodl,w,c
  3567  000A4A  6EF6               	movwf	tblptrl,c
  3568  000A4C  0E7E               	movlw	high __powers_
  3569  000A4E  20F4               	addwfc	prodh,w,c
  3570  000A50  6EF7               	movwf	tblptrh,c
  3571  000A52                     	if	0	;There are less than 3 active tblptr bytes
  3572  000A52                     	endif
  3573  000A52  0009               	tblrd		*+
  3574  000A54  CFF5 F015          	movff	tablat,___flmul@a
  3575  000A58  0009               	tblrd		*+
  3576  000A5A  CFF5 F016          	movff	tablat,___flmul@a+1
  3577  000A5E  0009               	tblrd		*+
  3578  000A60  CFF5 F017          	movff	tablat,___flmul@a+2
  3579  000A64  000A               	tblrd		*-
  3580  000A66  CFF5 F018          	movff	tablat,___flmul@a+3
  3581  000A6A  0E00               	movlw	0
  3582  000A6C  6E0C               	movwf	___awdiv@divisor+1,c
  3583  000A6E  0E64               	movlw	100
  3584  000A70  6E0B               	movwf	___awdiv@divisor,c
  3585  000A72  5032               	movf	scale@scl,w,c
  3586  000A74  6E09               	movwf	___awdiv@dividend,c
  3587  000A76  6A0A               	clrf	___awdiv@dividend+1,c
  3588  000A78  BE09               	btfsc	___awdiv@dividend,7,c
  3589  000A7A  060A               	decf	___awdiv@dividend+1,f,c
  3590  000A7C  ECC4  F012         	call	___awdiv	;wreg free
  3591  000A80  0E12               	movlw	18
  3592  000A82  2609               	addwf	?___awdiv,f,c
  3593  000A84  5009               	movf	?___awdiv,w,c
  3594  000A86  0D04               	mullw	4
  3595  000A88  0EF3               	movlw	low __powers_
  3596  000A8A  24F3               	addwf	prodl,w,c
  3597  000A8C  6EF6               	movwf	tblptrl,c
  3598  000A8E  0E7E               	movlw	high __powers_
  3599  000A90  20F4               	addwfc	prodh,w,c
  3600  000A92  6EF7               	movwf	tblptrh,c
  3601  000A94                     	if	0	;There are less than 3 active tblptr bytes
  3602  000A94                     	endif
  3603  000A94  0009               	tblrd		*+
  3604  000A96  CFF5 F011          	movff	tablat,___flmul@b
  3605  000A9A  0009               	tblrd		*+
  3606  000A9C  CFF5 F012          	movff	tablat,___flmul@b+1
  3607  000AA0  0009               	tblrd		*+
  3608  000AA2  CFF5 F013          	movff	tablat,___flmul@b+2
  3609  000AA6  000A               	tblrd		*-
  3610  000AA8  CFF5 F014          	movff	tablat,___flmul@b+3
  3611  000AAC  ECF7  F005         	call	___flmul	;wreg free
  3612  000AB0  C011  F02E         	movff	?___flmul,_scale$1886
  3613  000AB4  C012  F02F         	movff	?___flmul+1,_scale$1886+1
  3614  000AB8  C013  F030         	movff	?___flmul+2,_scale$1886+2
  3615  000ABC  C014  F031         	movff	?___flmul+3,_scale$1886+3
  3616                           
  3617                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  3618  000AC0  C02E  F011         	movff	_scale$1886,___flmul@b
  3619  000AC4  C02F  F012         	movff	_scale$1886+1,___flmul@b+1
  3620  000AC8  C030  F013         	movff	_scale$1886+2,___flmul@b+2
  3621  000ACC  C031  F014         	movff	_scale$1886+3,___flmul@b+3
  3622  000AD0  0E00               	movlw	0
  3623  000AD2  6E06               	movwf	___awmod@divisor+1,c
  3624  000AD4  0E0A               	movlw	10
  3625  000AD6  6E05               	movwf	___awmod@divisor,c
  3626  000AD8  5032               	movf	scale@scl,w,c
  3627  000ADA  6E03               	movwf	___awmod@dividend,c
  3628  000ADC  6A04               	clrf	___awmod@dividend+1,c
  3629  000ADE  BE03               	btfsc	___awmod@dividend,7,c
  3630  000AE0  0604               	decf	___awmod@dividend+1,f,c
  3631  000AE2  ECFA  F013         	call	___awmod	;wreg free
  3632  000AE6  5003               	movf	?___awmod,w,c
  3633  000AE8  0D04               	mullw	4
  3634  000AEA  0EF3               	movlw	low __powers_
  3635  000AEC  24F3               	addwf	prodl,w,c
  3636  000AEE  6EF6               	movwf	tblptrl,c
  3637  000AF0  0E7E               	movlw	high __powers_
  3638  000AF2  20F4               	addwfc	prodh,w,c
  3639  000AF4  6EF7               	movwf	tblptrh,c
  3640  000AF6                     	if	0	;There are less than 3 active tblptr bytes
  3641  000AF6                     	endif
  3642  000AF6  0009               	tblrd		*+
  3643  000AF8  CFF5 F015          	movff	tablat,___flmul@a
  3644  000AFC  0009               	tblrd		*+
  3645  000AFE  CFF5 F016          	movff	tablat,___flmul@a+1
  3646  000B02  0009               	tblrd		*+
  3647  000B04  CFF5 F017          	movff	tablat,___flmul@a+2
  3648  000B08  000A               	tblrd		*-
  3649  000B0A  CFF5 F018          	movff	tablat,___flmul@a+3
  3650  000B0E  ECF7  F005         	call	___flmul	;wreg free
  3651  000B12  C011  F02A         	movff	?___flmul,?_scale
  3652  000B16  C012  F02B         	movff	?___flmul+1,?_scale+1
  3653  000B1A  C013  F02C         	movff	?___flmul+2,?_scale+2
  3654  000B1E  C014  F02D         	movff	?___flmul+3,?_scale+3
  3655  000B22  0012               	return	
  3656  000B24                     l3723:
  3657                           
  3658                           ;doprnt.c: 446: else if(scl > 10)
  3659  000B24  5032               	movf	scale@scl,w,c
  3660  000B26  0A80               	xorlw	128
  3661  000B28  0F75               	addlw	-139
  3662  000B2A  A0D8               	btfss	status,0,c
  3663  000B2C  D04B               	goto	l3729
  3664                           
  3665                           ;doprnt.c: 447: return _powers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(sc
      +                          l%10)];
  3666  000B2E  0E00               	movlw	0
  3667  000B30  6E0C               	movwf	___awdiv@divisor+1,c
  3668  000B32  0E0A               	movlw	10
  3669  000B34  6E0B               	movwf	___awdiv@divisor,c
  3670  000B36  5032               	movf	scale@scl,w,c
  3671  000B38  6E09               	movwf	___awdiv@dividend,c
  3672  000B3A  6A0A               	clrf	___awdiv@dividend+1,c
  3673  000B3C  BE09               	btfsc	___awdiv@dividend,7,c
  3674  000B3E  060A               	decf	___awdiv@dividend+1,f,c
  3675  000B40  ECC4  F012         	call	___awdiv	;wreg free
  3676  000B44  0E09               	movlw	9
  3677  000B46  2609               	addwf	?___awdiv,f,c
  3678  000B48  5009               	movf	?___awdiv,w,c
  3679  000B4A  0D04               	mullw	4
  3680  000B4C  0EF3               	movlw	low __powers_
  3681  000B4E  24F3               	addwf	prodl,w,c
  3682  000B50  6EF6               	movwf	tblptrl,c
  3683  000B52  0E7E               	movlw	high __powers_
  3684  000B54  20F4               	addwfc	prodh,w,c
  3685  000B56  6EF7               	movwf	tblptrh,c
  3686  000B58                     	if	0	;There are less than 3 active tblptr bytes
  3687  000B58                     	endif
  3688  000B58  0009               	tblrd		*+
  3689  000B5A  CFF5 F011          	movff	tablat,___flmul@b
  3690  000B5E  0009               	tblrd		*+
  3691  000B60  CFF5 F012          	movff	tablat,___flmul@b+1
  3692  000B64  0009               	tblrd		*+
  3693  000B66  CFF5 F013          	movff	tablat,___flmul@b+2
  3694  000B6A  000A               	tblrd		*-
  3695  000B6C  CFF5 F014          	movff	tablat,___flmul@b+3
  3696  000B70  0E00               	movlw	0
  3697  000B72  6E06               	movwf	___awmod@divisor+1,c
  3698  000B74  0E0A               	movlw	10
  3699  000B76  6E05               	movwf	___awmod@divisor,c
  3700  000B78  5032               	movf	scale@scl,w,c
  3701  000B7A  6E03               	movwf	___awmod@dividend,c
  3702  000B7C  6A04               	clrf	___awmod@dividend+1,c
  3703  000B7E  BE03               	btfsc	___awmod@dividend,7,c
  3704  000B80  0604               	decf	___awmod@dividend+1,f,c
  3705  000B82  ECFA  F013         	call	___awmod	;wreg free
  3706  000B86  5003               	movf	?___awmod,w,c
  3707  000B88  0D04               	mullw	4
  3708  000B8A  0EF3               	movlw	low __powers_
  3709  000B8C  24F3               	addwf	prodl,w,c
  3710  000B8E  6EF6               	movwf	tblptrl,c
  3711  000B90  0E7E               	movlw	high __powers_
  3712  000B92  20F4               	addwfc	prodh,w,c
  3713  000B94  6EF7               	movwf	tblptrh,c
  3714  000B96                     	if	0	;There are less than 3 active tblptr bytes
  3715  000B96                     	endif
  3716  000B96  0009               	tblrd		*+
  3717  000B98  CFF5 F015          	movff	tablat,___flmul@a
  3718  000B9C  0009               	tblrd		*+
  3719  000B9E  CFF5 F016          	movff	tablat,___flmul@a+1
  3720  000BA2  0009               	tblrd		*+
  3721  000BA4  CFF5 F017          	movff	tablat,___flmul@a+2
  3722  000BA8  000A               	tblrd		*-
  3723  000BAA  CFF5 F018          	movff	tablat,___flmul@a+3
  3724  000BAE  ECF7  F005         	call	___flmul	;wreg free
  3725  000BB2  C011  F02A         	movff	?___flmul,?_scale
  3726  000BB6  C012  F02B         	movff	?___flmul+1,?_scale+1
  3727  000BBA  C013  F02C         	movff	?___flmul+2,?_scale+2
  3728  000BBE  C014  F02D         	movff	?___flmul+3,?_scale+3
  3729  000BC2  0012               	return	
  3730  000BC4                     l3729:
  3731                           
  3732                           ;doprnt.c: 448: return _powers_[(unsigned char)scl];
  3733  000BC4  5032               	movf	scale@scl,w,c
  3734  000BC6  0D04               	mullw	4
  3735  000BC8  0EF3               	movlw	low __powers_
  3736  000BCA  24F3               	addwf	prodl,w,c
  3737  000BCC  6EF6               	movwf	tblptrl,c
  3738  000BCE  0E7E               	movlw	high __powers_
  3739  000BD0  20F4               	addwfc	prodh,w,c
  3740  000BD2  6EF7               	movwf	tblptrh,c
  3741  000BD4                     	if	0	;There are less than 3 active tblptr bytes
  3742  000BD4                     	endif
  3743  000BD4  0009               	tblrd		*+
  3744  000BD6  CFF5 F02A          	movff	tablat,?_scale
  3745  000BDA  0009               	tblrd		*+
  3746  000BDC  CFF5 F02B          	movff	tablat,?_scale+1
  3747  000BE0  0009               	tblrd		*+
  3748  000BE2  CFF5 F02C          	movff	tablat,?_scale+2
  3749  000BE6  000A               	tblrd		*-
  3750  000BE8  CFF5 F02D          	movff	tablat,?_scale+3
  3751  000BEC  0012               	return		;funcret
  3752  000BEE                     __end_of_scale:
  3753                           	opt callstack 0
  3754                           
  3755 ;; *************** function ___awmod *****************
  3756 ;; Defined at:
  3757 ;;		line 7 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/awmod.c"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;  dividend        2    2[COMRAM] int 
  3760 ;;  divisor         2    4[COMRAM] int 
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;  sign            1    7[COMRAM] unsigned char 
  3763 ;;  counter         1    6[COMRAM] unsigned char 
  3764 ;; Return value:  Size  Location     Type
  3765 ;;                  2    2[COMRAM] int 
  3766 ;; Registers used:
  3767 ;;		wreg, status,2, status,0
  3768 ;; Tracked objects:
  3769 ;;		On entry : 0/0
  3770 ;;		On exit  : 0/0
  3771 ;;		Unchanged: 0/0
  3772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3773 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3774 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3776 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3777 ;;Total ram usage:        6 bytes
  3778 ;; Hardware stack levels used:    1
  3779 ;; Hardware stack levels required when called:    2
  3780 ;; This function calls:
  3781 ;;		Nothing
  3782 ;; This function is called by:
  3783 ;;		_scale
  3784 ;; This function uses a non-reentrant model
  3785 ;;
  3786                           
  3787                           	psect	text6
  3788  0027F4                     __ptext6:
  3789                           	opt callstack 0
  3790  0027F4                     ___awmod:
  3791                           	opt callstack 24
  3792                           
  3793                           ;incstack = 0
  3794  0027F4  0E00               	movlw	0
  3795  0027F6  6E08               	movwf	___awmod@sign,c
  3796  0027F8  AE04               	btfss	___awmod@dividend+1,7,c
  3797  0027FA  D006               	goto	l3551
  3798  0027FC  6C03               	negf	___awmod@dividend,c
  3799  0027FE  1E04               	comf	___awmod@dividend+1,f,c
  3800  002800  B0D8               	btfsc	status,0,c
  3801  002802  2A04               	incf	___awmod@dividend+1,f,c
  3802  002804  0E01               	movlw	1
  3803  002806  6E08               	movwf	___awmod@sign,c
  3804  002808                     l3551:
  3805  002808  AE06               	btfss	___awmod@divisor+1,7,c
  3806  00280A  D004               	goto	l3555
  3807  00280C  6C05               	negf	___awmod@divisor,c
  3808  00280E  1E06               	comf	___awmod@divisor+1,f,c
  3809  002810  B0D8               	btfsc	status,0,c
  3810  002812  2A06               	incf	___awmod@divisor+1,f,c
  3811  002814                     l3555:
  3812  002814  5005               	movf	___awmod@divisor,w,c
  3813  002816  1006               	iorwf	___awmod@divisor+1,w,c
  3814  002818  B4D8               	btfsc	status,2,c
  3815  00281A  D018               	goto	l3571
  3816  00281C  0E01               	movlw	1
  3817  00281E  6E07               	movwf	___awmod@counter,c
  3818  002820  D004               	goto	l3561
  3819  002822                     l3559:
  3820  002822  90D8               	bcf	status,0,c
  3821  002824  3605               	rlcf	___awmod@divisor,f,c
  3822  002826  3606               	rlcf	___awmod@divisor+1,f,c
  3823  002828  2A07               	incf	___awmod@counter,f,c
  3824  00282A                     l3561:
  3825  00282A  AE06               	btfss	___awmod@divisor+1,7,c
  3826  00282C  D7FA               	goto	l3559
  3827  00282E                     u3460:
  3828  00282E  5005               	movf	___awmod@divisor,w,c
  3829  002830  5C03               	subwf	___awmod@dividend,w,c
  3830  002832  5006               	movf	___awmod@divisor+1,w,c
  3831  002834  5804               	subwfb	___awmod@dividend+1,w,c
  3832  002836  A0D8               	btfss	status,0,c
  3833  002838  D004               	goto	l3567
  3834  00283A  5005               	movf	___awmod@divisor,w,c
  3835  00283C  5E03               	subwf	___awmod@dividend,f,c
  3836  00283E  5006               	movf	___awmod@divisor+1,w,c
  3837  002840  5A04               	subwfb	___awmod@dividend+1,f,c
  3838  002842                     l3567:
  3839  002842  90D8               	bcf	status,0,c
  3840  002844  3206               	rrcf	___awmod@divisor+1,f,c
  3841  002846  3205               	rrcf	___awmod@divisor,f,c
  3842  002848  2E07               	decfsz	___awmod@counter,f,c
  3843  00284A  D7F1               	goto	u3460
  3844  00284C                     l3571:
  3845  00284C  5008               	movf	___awmod@sign,w,c
  3846  00284E  B4D8               	btfsc	status,2,c
  3847  002850  D004               	goto	l3575
  3848  002852  6C03               	negf	___awmod@dividend,c
  3849  002854  1E04               	comf	___awmod@dividend+1,f,c
  3850  002856  B0D8               	btfsc	status,0,c
  3851  002858  2A04               	incf	___awmod@dividend+1,f,c
  3852  00285A                     l3575:
  3853  00285A  C003  F003         	movff	___awmod@dividend,?___awmod
  3854  00285E  C004  F004         	movff	___awmod@dividend+1,?___awmod+1
  3855  002862  0012               	return		;funcret
  3856  002864                     __end_of___awmod:
  3857                           	opt callstack 0
  3858                           
  3859 ;; *************** function ___awdiv *****************
  3860 ;; Defined at:
  3861 ;;		line 7 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/awdiv.c"
  3862 ;; Parameters:    Size  Location     Type
  3863 ;;  dividend        2    8[COMRAM] int 
  3864 ;;  divisor         2   10[COMRAM] int 
  3865 ;; Auto vars:     Size  Location     Type
  3866 ;;  quotient        2   14[COMRAM] int 
  3867 ;;  sign            1   13[COMRAM] unsigned char 
  3868 ;;  counter         1   12[COMRAM] unsigned char 
  3869 ;; Return value:  Size  Location     Type
  3870 ;;                  2    8[COMRAM] int 
  3871 ;; Registers used:
  3872 ;;		wreg, status,2, status,0
  3873 ;; Tracked objects:
  3874 ;;		On entry : 0/0
  3875 ;;		On exit  : 0/0
  3876 ;;		Unchanged: 0/0
  3877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3878 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3879 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3881 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3882 ;;Total ram usage:        8 bytes
  3883 ;; Hardware stack levels used:    1
  3884 ;; Hardware stack levels required when called:    2
  3885 ;; This function calls:
  3886 ;;		Nothing
  3887 ;; This function is called by:
  3888 ;;		_scale
  3889 ;;		_sprintf
  3890 ;; This function uses a non-reentrant model
  3891 ;;
  3892                           
  3893                           	psect	text7
  3894  002588                     __ptext7:
  3895                           	opt callstack 0
  3896  002588                     ___awdiv:
  3897                           	opt callstack 24
  3898                           
  3899                           ;incstack = 0
  3900  002588  0E00               	movlw	0
  3901  00258A  6E0E               	movwf	___awdiv@sign,c
  3902  00258C  AE0C               	btfss	___awdiv@divisor+1,7,c
  3903  00258E  D006               	goto	l3507
  3904  002590  6C0B               	negf	___awdiv@divisor,c
  3905  002592  1E0C               	comf	___awdiv@divisor+1,f,c
  3906  002594  B0D8               	btfsc	status,0,c
  3907  002596  2A0C               	incf	___awdiv@divisor+1,f,c
  3908  002598  0E01               	movlw	1
  3909  00259A  6E0E               	movwf	___awdiv@sign,c
  3910  00259C                     l3507:
  3911  00259C  AE0A               	btfss	___awdiv@dividend+1,7,c
  3912  00259E  D006               	goto	l3513
  3913  0025A0  6C09               	negf	___awdiv@dividend,c
  3914  0025A2  1E0A               	comf	___awdiv@dividend+1,f,c
  3915  0025A4  B0D8               	btfsc	status,0,c
  3916  0025A6  2A0A               	incf	___awdiv@dividend+1,f,c
  3917  0025A8  0E01               	movlw	1
  3918  0025AA  1A0E               	xorwf	___awdiv@sign,f,c
  3919  0025AC                     l3513:
  3920  0025AC  0E00               	movlw	0
  3921  0025AE  6E10               	movwf	___awdiv@quotient+1,c
  3922  0025B0  0E00               	movlw	0
  3923  0025B2  6E0F               	movwf	___awdiv@quotient,c
  3924  0025B4  500B               	movf	___awdiv@divisor,w,c
  3925  0025B6  100C               	iorwf	___awdiv@divisor+1,w,c
  3926  0025B8  B4D8               	btfsc	status,2,c
  3927  0025BA  D01C               	goto	l3535
  3928  0025BC  0E01               	movlw	1
  3929  0025BE  6E0D               	movwf	___awdiv@counter,c
  3930  0025C0  D004               	goto	l3521
  3931  0025C2                     l3519:
  3932  0025C2  90D8               	bcf	status,0,c
  3933  0025C4  360B               	rlcf	___awdiv@divisor,f,c
  3934  0025C6  360C               	rlcf	___awdiv@divisor+1,f,c
  3935  0025C8  2A0D               	incf	___awdiv@counter,f,c
  3936  0025CA                     l3521:
  3937  0025CA  AE0C               	btfss	___awdiv@divisor+1,7,c
  3938  0025CC  D7FA               	goto	l3519
  3939  0025CE                     u3400:
  3940  0025CE  90D8               	bcf	status,0,c
  3941  0025D0  360F               	rlcf	___awdiv@quotient,f,c
  3942  0025D2  3610               	rlcf	___awdiv@quotient+1,f,c
  3943  0025D4  500B               	movf	___awdiv@divisor,w,c
  3944  0025D6  5C09               	subwf	___awdiv@dividend,w,c
  3945  0025D8  500C               	movf	___awdiv@divisor+1,w,c
  3946  0025DA  580A               	subwfb	___awdiv@dividend+1,w,c
  3947  0025DC  A0D8               	btfss	status,0,c
  3948  0025DE  D005               	goto	l3531
  3949  0025E0  500B               	movf	___awdiv@divisor,w,c
  3950  0025E2  5E09               	subwf	___awdiv@dividend,f,c
  3951  0025E4  500C               	movf	___awdiv@divisor+1,w,c
  3952  0025E6  5A0A               	subwfb	___awdiv@dividend+1,f,c
  3953  0025E8  800F               	bsf	___awdiv@quotient,0,c
  3954  0025EA                     l3531:
  3955  0025EA  90D8               	bcf	status,0,c
  3956  0025EC  320C               	rrcf	___awdiv@divisor+1,f,c
  3957  0025EE  320B               	rrcf	___awdiv@divisor,f,c
  3958  0025F0  2E0D               	decfsz	___awdiv@counter,f,c
  3959  0025F2  D7ED               	goto	u3400
  3960  0025F4                     l3535:
  3961  0025F4  500E               	movf	___awdiv@sign,w,c
  3962  0025F6  B4D8               	btfsc	status,2,c
  3963  0025F8  D004               	goto	l3539
  3964  0025FA  6C0F               	negf	___awdiv@quotient,c
  3965  0025FC  1E10               	comf	___awdiv@quotient+1,f,c
  3966  0025FE  B0D8               	btfsc	status,0,c
  3967  002600  2A10               	incf	___awdiv@quotient+1,f,c
  3968  002602                     l3539:
  3969  002602  C00F  F009         	movff	___awdiv@quotient,?___awdiv
  3970  002606  C010  F00A         	movff	___awdiv@quotient+1,?___awdiv+1
  3971  00260A  0012               	return		;funcret
  3972  00260C                     __end_of___awdiv:
  3973                           	opt callstack 0
  3974                           
  3975 ;; *************** function _isdigit *****************
  3976 ;; Defined at:
  3977 ;;		line 8 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/isdigit.c"
  3978 ;; Parameters:    Size  Location     Type
  3979 ;;  c               1    wreg     unsigned char 
  3980 ;; Auto vars:     Size  Location     Type
  3981 ;;  c               1    4[COMRAM] unsigned char 
  3982 ;; Return value:  Size  Location     Type
  3983 ;;		None               void
  3984 ;; Registers used:
  3985 ;;		wreg, status,2, status,0
  3986 ;; Tracked objects:
  3987 ;;		On entry : 0/0
  3988 ;;		On exit  : 0/0
  3989 ;;		Unchanged: 0/0
  3990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3992 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3993 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3994 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3995 ;;Total ram usage:        3 bytes
  3996 ;; Hardware stack levels used:    1
  3997 ;; Hardware stack levels required when called:    2
  3998 ;; This function calls:
  3999 ;;		Nothing
  4000 ;; This function is called by:
  4001 ;;		_sprintf
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           	psect	text8
  4006  002B70                     __ptext8:
  4007                           	opt callstack 0
  4008  002B70                     _isdigit:
  4009                           	opt callstack 25
  4010                           
  4011                           ;incstack = 0
  4012                           ;isdigit@c stored from wreg
  4013  002B70  6E05               	movwf	isdigit@c,c
  4014  002B72  0E00               	movlw	0
  4015  002B74  6E04               	movwf	_isdigit$1659,c
  4016  002B76  0E3A               	movlw	58
  4017  002B78  6005               	cpfslt	isdigit@c,c
  4018  002B7A  D005               	goto	l3741
  4019  002B7C  0E2F               	movlw	47
  4020  002B7E  6405               	cpfsgt	isdigit@c,c
  4021  002B80  D002               	goto	l3741
  4022  002B82  0E01               	movlw	1
  4023  002B84  6E04               	movwf	_isdigit$1659,c
  4024  002B86                     l3741:
  4025  002B86  C004  F003         	movff	_isdigit$1659,??_isdigit
  4026  002B8A  3003               	rrcf	??_isdigit,w,c
  4027  002B8C  0012               	return		;funcret
  4028  002B8E                     __end_of_isdigit:
  4029                           	opt callstack 0
  4030                           
  4031 ;; *************** function _fround *****************
  4032 ;; Defined at:
  4033 ;;		line 417 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/doprnt.c"
  4034 ;; Parameters:    Size  Location     Type
  4035 ;;  prec            1    wreg     unsigned char 
  4036 ;; Auto vars:     Size  Location     Type
  4037 ;;  prec            1   53[COMRAM] unsigned char 
  4038 ;; Return value:  Size  Location     Type
  4039 ;;                  4   41[COMRAM] unsigned char 
  4040 ;; Registers used:
  4041 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4042 ;; Tracked objects:
  4043 ;;		On entry : 0/0
  4044 ;;		On exit  : 0/0
  4045 ;;		Unchanged: 0/0
  4046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4047 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4048 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4050 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4051 ;;Total ram usage:       13 bytes
  4052 ;; Hardware stack levels used:    1
  4053 ;; Hardware stack levels required when called:    3
  4054 ;; This function calls:
  4055 ;;		___flmul
  4056 ;;		___lwdiv
  4057 ;;		___lwmod
  4058 ;; This function is called by:
  4059 ;;		_sprintf
  4060 ;; This function uses a non-reentrant model
  4061 ;;
  4062                           
  4063                           	psect	text9
  4064  00124C                     __ptext9:
  4065                           	opt callstack 0
  4066  00124C                     _fround:
  4067                           	opt callstack 24
  4068                           
  4069                           ;incstack = 0
  4070                           ;fround@prec stored from wreg
  4071  00124C  6E36               	movwf	fround@prec,c
  4072                           
  4073                           ;doprnt.c: 421: if(prec>=110)
  4074  00124E  0E6D               	movlw	109
  4075  001250  6436               	cpfsgt	fround@prec,c
  4076  001252  D0AC               	goto	l3685
  4077                           
  4078                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  4079  001254  0E00               	movlw	0
  4080  001256  6E15               	movwf	___flmul@a,c
  4081  001258  0E00               	movlw	0
  4082  00125A  6E16               	movwf	___flmul@a+1,c
  4083  00125C  0E00               	movlw	0
  4084  00125E  6E17               	movwf	___flmul@a+2,c
  4085  001260  0E3F               	movlw	63
  4086  001262  6E18               	movwf	___flmul@a+3,c
  4087  001264  0E00               	movlw	0
  4088  001266  6E0B               	movwf	___lwdiv@divisor+1,c
  4089  001268  0E64               	movlw	100
  4090  00126A  6E0A               	movwf	___lwdiv@divisor,c
  4091  00126C  C036  F008         	movff	fround@prec,___lwdiv@dividend
  4092  001270  6A09               	clrf	___lwdiv@dividend+1,c
  4093  001272  ECC1  F014         	call	___lwdiv	;wreg free
  4094  001276  90D8               	bcf	status,0,c
  4095  001278  3608               	rlcf	?___lwdiv,f,c
  4096  00127A  3609               	rlcf	?___lwdiv+1,f,c
  4097  00127C  90D8               	bcf	status,0,c
  4098  00127E  3608               	rlcf	?___lwdiv,f,c
  4099  001280  3609               	rlcf	?___lwdiv+1,f,c
  4100  001282  0E48               	movlw	72
  4101  001284  2608               	addwf	?___lwdiv,f,c
  4102  001286  0E00               	movlw	0
  4103  001288  2209               	addwfc	?___lwdiv+1,f,c
  4104  00128A  0E27               	movlw	low __npowers_
  4105  00128C  2408               	addwf	?___lwdiv,w,c
  4106  00128E  6EF6               	movwf	tblptrl,c
  4107  001290  0E7F               	movlw	high __npowers_
  4108  001292  2009               	addwfc	?___lwdiv+1,w,c
  4109  001294  6EF7               	movwf	tblptrh,c
  4110  001296                     	if	0	;There are less than 3 active tblptr bytes
  4111  001296                     	endif
  4112  001296  0009               	tblrd		*+
  4113  001298  CFF5 F011          	movff	tablat,___flmul@b
  4114  00129C  0009               	tblrd		*+
  4115  00129E  CFF5 F012          	movff	tablat,___flmul@b+1
  4116  0012A2  0009               	tblrd		*+
  4117  0012A4  CFF5 F013          	movff	tablat,___flmul@b+2
  4118  0012A8  000A               	tblrd		*-
  4119  0012AA  CFF5 F014          	movff	tablat,___flmul@b+3
  4120  0012AE  ECF7  F005         	call	___flmul	;wreg free
  4121  0012B2  C011  F032         	movff	?___flmul,_fround$1884
  4122  0012B6  C012  F033         	movff	?___flmul+1,_fround$1884+1
  4123  0012BA  C013  F034         	movff	?___flmul+2,_fround$1884+2
  4124  0012BE  C014  F035         	movff	?___flmul+3,_fround$1884+3
  4125                           
  4126                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  4127  0012C2  0E00               	movlw	0
  4128  0012C4  6E0B               	movwf	___lwdiv@divisor+1,c
  4129  0012C6  0E0A               	movlw	10
  4130  0012C8  6E0A               	movwf	___lwdiv@divisor,c
  4131  0012CA  0E00               	movlw	0
  4132  0012CC  6E06               	movwf	___lwmod@divisor+1,c
  4133  0012CE  0E64               	movlw	100
  4134  0012D0  6E05               	movwf	___lwmod@divisor,c
  4135  0012D2  C036  F003         	movff	fround@prec,___lwmod@dividend
  4136  0012D6  6A04               	clrf	___lwmod@dividend+1,c
  4137  0012D8  EC5D  F015         	call	___lwmod	;wreg free
  4138  0012DC  C003  F008         	movff	?___lwmod,___lwdiv@dividend
  4139  0012E0  C004  F009         	movff	?___lwmod+1,___lwdiv@dividend+1
  4140  0012E4  ECC1  F014         	call	___lwdiv	;wreg free
  4141  0012E8  90D8               	bcf	status,0,c
  4142  0012EA  3608               	rlcf	?___lwdiv,f,c
  4143  0012EC  3609               	rlcf	?___lwdiv+1,f,c
  4144  0012EE  90D8               	bcf	status,0,c
  4145  0012F0  3608               	rlcf	?___lwdiv,f,c
  4146  0012F2  3609               	rlcf	?___lwdiv+1,f,c
  4147  0012F4  0E24               	movlw	36
  4148  0012F6  2608               	addwf	?___lwdiv,f,c
  4149  0012F8  0E00               	movlw	0
  4150  0012FA  2209               	addwfc	?___lwdiv+1,f,c
  4151  0012FC  0E27               	movlw	low __npowers_
  4152  0012FE  2408               	addwf	?___lwdiv,w,c
  4153  001300  6EF6               	movwf	tblptrl,c
  4154  001302  0E7F               	movlw	high __npowers_
  4155  001304  2009               	addwfc	?___lwdiv+1,w,c
  4156  001306  6EF7               	movwf	tblptrh,c
  4157  001308                     	if	0	;There are less than 3 active tblptr bytes
  4158  001308                     	endif
  4159  001308  0009               	tblrd		*+
  4160  00130A  CFF5 F015          	movff	tablat,___flmul@a
  4161  00130E  0009               	tblrd		*+
  4162  001310  CFF5 F016          	movff	tablat,___flmul@a+1
  4163  001314  0009               	tblrd		*+
  4164  001316  CFF5 F017          	movff	tablat,___flmul@a+2
  4165  00131A  000A               	tblrd		*-
  4166  00131C  CFF5 F018          	movff	tablat,___flmul@a+3
  4167  001320  C032  F011         	movff	_fround$1884,___flmul@b
  4168  001324  C033  F012         	movff	_fround$1884+1,___flmul@b+1
  4169  001328  C034  F013         	movff	_fround$1884+2,___flmul@b+2
  4170  00132C  C035  F014         	movff	_fround$1884+3,___flmul@b+3
  4171  001330  ECF7  F005         	call	___flmul	;wreg free
  4172  001334  C011  F02E         	movff	?___flmul,_fround$1885
  4173  001338  C012  F02F         	movff	?___flmul+1,_fround$1885+1
  4174  00133C  C013  F030         	movff	?___flmul+2,_fround$1885+2
  4175  001340  C014  F031         	movff	?___flmul+3,_fround$1885+3
  4176                           
  4177                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  4178  001344  C02E  F011         	movff	_fround$1885,___flmul@b
  4179  001348  C02F  F012         	movff	_fround$1885+1,___flmul@b+1
  4180  00134C  C030  F013         	movff	_fround$1885+2,___flmul@b+2
  4181  001350  C031  F014         	movff	_fround$1885+3,___flmul@b+3
  4182  001354  0E00               	movlw	0
  4183  001356  6E06               	movwf	___lwmod@divisor+1,c
  4184  001358  0E0A               	movlw	10
  4185  00135A  6E05               	movwf	___lwmod@divisor,c
  4186  00135C  C036  F003         	movff	fround@prec,___lwmod@dividend
  4187  001360  6A04               	clrf	___lwmod@dividend+1,c
  4188  001362  EC5D  F015         	call	___lwmod	;wreg free
  4189  001366  90D8               	bcf	status,0,c
  4190  001368  3603               	rlcf	?___lwmod,f,c
  4191  00136A  3604               	rlcf	?___lwmod+1,f,c
  4192  00136C  90D8               	bcf	status,0,c
  4193  00136E  3603               	rlcf	?___lwmod,f,c
  4194  001370  3604               	rlcf	?___lwmod+1,f,c
  4195  001372  0E27               	movlw	low __npowers_
  4196  001374  2403               	addwf	?___lwmod,w,c
  4197  001376  6EF6               	movwf	tblptrl,c
  4198  001378  0E7F               	movlw	high __npowers_
  4199  00137A  2004               	addwfc	?___lwmod+1,w,c
  4200  00137C  6EF7               	movwf	tblptrh,c
  4201  00137E                     	if	0	;There are less than 3 active tblptr bytes
  4202  00137E                     	endif
  4203  00137E  0009               	tblrd		*+
  4204  001380  CFF5 F015          	movff	tablat,___flmul@a
  4205  001384  0009               	tblrd		*+
  4206  001386  CFF5 F016          	movff	tablat,___flmul@a+1
  4207  00138A  0009               	tblrd		*+
  4208  00138C  CFF5 F017          	movff	tablat,___flmul@a+2
  4209  001390  000A               	tblrd		*-
  4210  001392  CFF5 F018          	movff	tablat,___flmul@a+3
  4211  001396  ECF7  F005         	call	___flmul	;wreg free
  4212  00139A  C011  F02A         	movff	?___flmul,?_fround
  4213  00139E  C012  F02B         	movff	?___flmul+1,?_fround+1
  4214  0013A2  C013  F02C         	movff	?___flmul+2,?_fround+2
  4215  0013A6  C014  F02D         	movff	?___flmul+3,?_fround+3
  4216  0013AA  0012               	return	
  4217  0013AC                     l3685:
  4218                           
  4219                           ;doprnt.c: 423: else if(prec > 10)
  4220  0013AC  0E0A               	movlw	10
  4221  0013AE  6436               	cpfsgt	fround@prec,c
  4222  0013B0  D06B               	goto	l3691
  4223                           
  4224                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  4225  0013B2  0E00               	movlw	0
  4226  0013B4  6E15               	movwf	___flmul@a,c
  4227  0013B6  0E00               	movlw	0
  4228  0013B8  6E16               	movwf	___flmul@a+1,c
  4229  0013BA  0E00               	movlw	0
  4230  0013BC  6E17               	movwf	___flmul@a+2,c
  4231  0013BE  0E3F               	movlw	63
  4232  0013C0  6E18               	movwf	___flmul@a+3,c
  4233  0013C2  0E00               	movlw	0
  4234  0013C4  6E0B               	movwf	___lwdiv@divisor+1,c
  4235  0013C6  0E0A               	movlw	10
  4236  0013C8  6E0A               	movwf	___lwdiv@divisor,c
  4237  0013CA  C036  F008         	movff	fround@prec,___lwdiv@dividend
  4238  0013CE  6A09               	clrf	___lwdiv@dividend+1,c
  4239  0013D0  ECC1  F014         	call	___lwdiv	;wreg free
  4240  0013D4  90D8               	bcf	status,0,c
  4241  0013D6  3608               	rlcf	?___lwdiv,f,c
  4242  0013D8  3609               	rlcf	?___lwdiv+1,f,c
  4243  0013DA  90D8               	bcf	status,0,c
  4244  0013DC  3608               	rlcf	?___lwdiv,f,c
  4245  0013DE  3609               	rlcf	?___lwdiv+1,f,c
  4246  0013E0  0E24               	movlw	36
  4247  0013E2  2608               	addwf	?___lwdiv,f,c
  4248  0013E4  0E00               	movlw	0
  4249  0013E6  2209               	addwfc	?___lwdiv+1,f,c
  4250  0013E8  0E27               	movlw	low __npowers_
  4251  0013EA  2408               	addwf	?___lwdiv,w,c
  4252  0013EC  6EF6               	movwf	tblptrl,c
  4253  0013EE  0E7F               	movlw	high __npowers_
  4254  0013F0  2009               	addwfc	?___lwdiv+1,w,c
  4255  0013F2  6EF7               	movwf	tblptrh,c
  4256  0013F4                     	if	0	;There are less than 3 active tblptr bytes
  4257  0013F4                     	endif
  4258  0013F4  0009               	tblrd		*+
  4259  0013F6  CFF5 F011          	movff	tablat,___flmul@b
  4260  0013FA  0009               	tblrd		*+
  4261  0013FC  CFF5 F012          	movff	tablat,___flmul@b+1
  4262  001400  0009               	tblrd		*+
  4263  001402  CFF5 F013          	movff	tablat,___flmul@b+2
  4264  001406  000A               	tblrd		*-
  4265  001408  CFF5 F014          	movff	tablat,___flmul@b+3
  4266  00140C  ECF7  F005         	call	___flmul	;wreg free
  4267  001410  C011  F032         	movff	?___flmul,_fround$1884
  4268  001414  C012  F033         	movff	?___flmul+1,_fround$1884+1
  4269  001418  C013  F034         	movff	?___flmul+2,_fround$1884+2
  4270  00141C  C014  F035         	movff	?___flmul+3,_fround$1884+3
  4271                           
  4272                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  4273  001420  C032  F011         	movff	_fround$1884,___flmul@b
  4274  001424  C033  F012         	movff	_fround$1884+1,___flmul@b+1
  4275  001428  C034  F013         	movff	_fround$1884+2,___flmul@b+2
  4276  00142C  C035  F014         	movff	_fround$1884+3,___flmul@b+3
  4277  001430  0E00               	movlw	0
  4278  001432  6E06               	movwf	___lwmod@divisor+1,c
  4279  001434  0E0A               	movlw	10
  4280  001436  6E05               	movwf	___lwmod@divisor,c
  4281  001438  C036  F003         	movff	fround@prec,___lwmod@dividend
  4282  00143C  6A04               	clrf	___lwmod@dividend+1,c
  4283  00143E  EC5D  F015         	call	___lwmod	;wreg free
  4284  001442  90D8               	bcf	status,0,c
  4285  001444  3603               	rlcf	?___lwmod,f,c
  4286  001446  3604               	rlcf	?___lwmod+1,f,c
  4287  001448  90D8               	bcf	status,0,c
  4288  00144A  3603               	rlcf	?___lwmod,f,c
  4289  00144C  3604               	rlcf	?___lwmod+1,f,c
  4290  00144E  0E27               	movlw	low __npowers_
  4291  001450  2403               	addwf	?___lwmod,w,c
  4292  001452  6EF6               	movwf	tblptrl,c
  4293  001454  0E7F               	movlw	high __npowers_
  4294  001456  2004               	addwfc	?___lwmod+1,w,c
  4295  001458  6EF7               	movwf	tblptrh,c
  4296  00145A                     	if	0	;There are less than 3 active tblptr bytes
  4297  00145A                     	endif
  4298  00145A  0009               	tblrd		*+
  4299  00145C  CFF5 F015          	movff	tablat,___flmul@a
  4300  001460  0009               	tblrd		*+
  4301  001462  CFF5 F016          	movff	tablat,___flmul@a+1
  4302  001466  0009               	tblrd		*+
  4303  001468  CFF5 F017          	movff	tablat,___flmul@a+2
  4304  00146C  000A               	tblrd		*-
  4305  00146E  CFF5 F018          	movff	tablat,___flmul@a+3
  4306  001472  ECF7  F005         	call	___flmul	;wreg free
  4307  001476  C011  F02A         	movff	?___flmul,?_fround
  4308  00147A  C012  F02B         	movff	?___flmul+1,?_fround+1
  4309  00147E  C013  F02C         	movff	?___flmul+2,?_fround+2
  4310  001482  C014  F02D         	movff	?___flmul+3,?_fround+3
  4311  001486  0012               	return	
  4312  001488                     l3691:
  4313                           
  4314                           ;doprnt.c: 425: return 0.5 * _npowers_[prec];
  4315  001488  5036               	movf	fround@prec,w,c
  4316  00148A  0D04               	mullw	4
  4317  00148C  0E27               	movlw	low __npowers_
  4318  00148E  24F3               	addwf	prodl,w,c
  4319  001490  6EF6               	movwf	tblptrl,c
  4320  001492  0E7F               	movlw	high __npowers_
  4321  001494  20F4               	addwfc	prodh,w,c
  4322  001496  6EF7               	movwf	tblptrh,c
  4323  001498                     	if	0	;There are less than 3 active tblptr bytes
  4324  001498                     	endif
  4325  001498  0009               	tblrd		*+
  4326  00149A  CFF5 F011          	movff	tablat,___flmul@b
  4327  00149E  0009               	tblrd		*+
  4328  0014A0  CFF5 F012          	movff	tablat,___flmul@b+1
  4329  0014A4  0009               	tblrd		*+
  4330  0014A6  CFF5 F013          	movff	tablat,___flmul@b+2
  4331  0014AA  000A               	tblrd		*-
  4332  0014AC  CFF5 F014          	movff	tablat,___flmul@b+3
  4333  0014B0  0E00               	movlw	0
  4334  0014B2  6E15               	movwf	___flmul@a,c
  4335  0014B4  0E00               	movlw	0
  4336  0014B6  6E16               	movwf	___flmul@a+1,c
  4337  0014B8  0E00               	movlw	0
  4338  0014BA  6E17               	movwf	___flmul@a+2,c
  4339  0014BC  0E3F               	movlw	63
  4340  0014BE  6E18               	movwf	___flmul@a+3,c
  4341  0014C0  ECF7  F005         	call	___flmul	;wreg free
  4342  0014C4  C011  F02A         	movff	?___flmul,?_fround
  4343  0014C8  C012  F02B         	movff	?___flmul+1,?_fround+1
  4344  0014CC  C013  F02C         	movff	?___flmul+2,?_fround+2
  4345  0014D0  C014  F02D         	movff	?___flmul+3,?_fround+3
  4346  0014D4  0012               	return		;funcret
  4347  0014D6                     __end_of_fround:
  4348                           	opt callstack 0
  4349                           
  4350 ;; *************** function ___lwmod *****************
  4351 ;; Defined at:
  4352 ;;		line 7 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/lwmod.c"
  4353 ;; Parameters:    Size  Location     Type
  4354 ;;  dividend        2    2[COMRAM] unsigned int 
  4355 ;;  divisor         2    4[COMRAM] unsigned int 
  4356 ;; Auto vars:     Size  Location     Type
  4357 ;;  counter         1    6[COMRAM] unsigned char 
  4358 ;; Return value:  Size  Location     Type
  4359 ;;                  2    2[COMRAM] unsigned int 
  4360 ;; Registers used:
  4361 ;;		wreg, status,2, status,0
  4362 ;; Tracked objects:
  4363 ;;		On entry : 0/0
  4364 ;;		On exit  : 0/0
  4365 ;;		Unchanged: 0/0
  4366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4367 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4368 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4370 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4371 ;;Total ram usage:        5 bytes
  4372 ;; Hardware stack levels used:    1
  4373 ;; Hardware stack levels required when called:    2
  4374 ;; This function calls:
  4375 ;;		Nothing
  4376 ;; This function is called by:
  4377 ;;		_fround
  4378 ;; This function uses a non-reentrant model
  4379 ;;
  4380                           
  4381                           	psect	text10
  4382  002ABA                     __ptext10:
  4383                           	opt callstack 0
  4384  002ABA                     ___lwmod:
  4385                           	opt callstack 24
  4386                           
  4387                           ;incstack = 0
  4388  002ABA  5005               	movf	___lwmod@divisor,w,c
  4389  002ABC  1006               	iorwf	___lwmod@divisor+1,w,c
  4390  002ABE  B4D8               	btfsc	status,2,c
  4391  002AC0  D018               	goto	l1044
  4392  002AC2  0E01               	movlw	1
  4393  002AC4  6E07               	movwf	___lwmod@counter,c
  4394  002AC6  D004               	goto	l3607
  4395  002AC8                     l3605:
  4396  002AC8  90D8               	bcf	status,0,c
  4397  002ACA  3605               	rlcf	___lwmod@divisor,f,c
  4398  002ACC  3606               	rlcf	___lwmod@divisor+1,f,c
  4399  002ACE  2A07               	incf	___lwmod@counter,f,c
  4400  002AD0                     l3607:
  4401  002AD0  AE06               	btfss	___lwmod@divisor+1,7,c
  4402  002AD2  D7FA               	goto	l3605
  4403  002AD4                     u3530:
  4404  002AD4  5005               	movf	___lwmod@divisor,w,c
  4405  002AD6  5C03               	subwf	___lwmod@dividend,w,c
  4406  002AD8  5006               	movf	___lwmod@divisor+1,w,c
  4407  002ADA  5804               	subwfb	___lwmod@dividend+1,w,c
  4408  002ADC  A0D8               	btfss	status,0,c
  4409  002ADE  D004               	goto	l3613
  4410  002AE0  5005               	movf	___lwmod@divisor,w,c
  4411  002AE2  5E03               	subwf	___lwmod@dividend,f,c
  4412  002AE4  5006               	movf	___lwmod@divisor+1,w,c
  4413  002AE6  5A04               	subwfb	___lwmod@dividend+1,f,c
  4414  002AE8                     l3613:
  4415  002AE8  90D8               	bcf	status,0,c
  4416  002AEA  3206               	rrcf	___lwmod@divisor+1,f,c
  4417  002AEC  3205               	rrcf	___lwmod@divisor,f,c
  4418  002AEE  2E07               	decfsz	___lwmod@counter,f,c
  4419  002AF0  D7F1               	goto	u3530
  4420  002AF2                     l1044:
  4421  002AF2  C003  F003         	movff	___lwmod@dividend,?___lwmod
  4422  002AF6  C004  F004         	movff	___lwmod@dividend+1,?___lwmod+1
  4423  002AFA  0012               	return		;funcret
  4424  002AFC                     __end_of___lwmod:
  4425                           	opt callstack 0
  4426                           
  4427 ;; *************** function ___lwdiv *****************
  4428 ;; Defined at:
  4429 ;;		line 7 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/lwdiv.c"
  4430 ;; Parameters:    Size  Location     Type
  4431 ;;  dividend        2    7[COMRAM] unsigned int 
  4432 ;;  divisor         2    9[COMRAM] unsigned int 
  4433 ;; Auto vars:     Size  Location     Type
  4434 ;;  quotient        2   11[COMRAM] unsigned int 
  4435 ;;  counter         1   13[COMRAM] unsigned char 
  4436 ;; Return value:  Size  Location     Type
  4437 ;;                  2    7[COMRAM] unsigned int 
  4438 ;; Registers used:
  4439 ;;		wreg, status,2, status,0
  4440 ;; Tracked objects:
  4441 ;;		On entry : 0/0
  4442 ;;		On exit  : 0/0
  4443 ;;		Unchanged: 0/0
  4444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4445 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4446 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4448 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4449 ;;Total ram usage:        7 bytes
  4450 ;; Hardware stack levels used:    1
  4451 ;; Hardware stack levels required when called:    2
  4452 ;; This function calls:
  4453 ;;		Nothing
  4454 ;; This function is called by:
  4455 ;;		_fround
  4456 ;; This function uses a non-reentrant model
  4457 ;;
  4458                           
  4459                           	psect	text11
  4460  002982                     __ptext11:
  4461                           	opt callstack 0
  4462  002982                     ___lwdiv:
  4463                           	opt callstack 24
  4464                           
  4465                           ;incstack = 0
  4466  002982  0E00               	movlw	0
  4467  002984  6E0D               	movwf	___lwdiv@quotient+1,c
  4468  002986  0E00               	movlw	0
  4469  002988  6E0C               	movwf	___lwdiv@quotient,c
  4470  00298A  500A               	movf	___lwdiv@divisor,w,c
  4471  00298C  100B               	iorwf	___lwdiv@divisor+1,w,c
  4472  00298E  B4D8               	btfsc	status,2,c
  4473  002990  D01C               	goto	l1034
  4474  002992  0E01               	movlw	1
  4475  002994  6E0E               	movwf	___lwdiv@counter,c
  4476  002996  D004               	goto	l3587
  4477  002998                     l3585:
  4478  002998  90D8               	bcf	status,0,c
  4479  00299A  360A               	rlcf	___lwdiv@divisor,f,c
  4480  00299C  360B               	rlcf	___lwdiv@divisor+1,f,c
  4481  00299E  2A0E               	incf	___lwdiv@counter,f,c
  4482  0029A0                     l3587:
  4483  0029A0  AE0B               	btfss	___lwdiv@divisor+1,7,c
  4484  0029A2  D7FA               	goto	l3585
  4485  0029A4                     u3500:
  4486  0029A4  90D8               	bcf	status,0,c
  4487  0029A6  360C               	rlcf	___lwdiv@quotient,f,c
  4488  0029A8  360D               	rlcf	___lwdiv@quotient+1,f,c
  4489  0029AA  500A               	movf	___lwdiv@divisor,w,c
  4490  0029AC  5C08               	subwf	___lwdiv@dividend,w,c
  4491  0029AE  500B               	movf	___lwdiv@divisor+1,w,c
  4492  0029B0  5809               	subwfb	___lwdiv@dividend+1,w,c
  4493  0029B2  A0D8               	btfss	status,0,c
  4494  0029B4  D005               	goto	l3597
  4495  0029B6  500A               	movf	___lwdiv@divisor,w,c
  4496  0029B8  5E08               	subwf	___lwdiv@dividend,f,c
  4497  0029BA  500B               	movf	___lwdiv@divisor+1,w,c
  4498  0029BC  5A09               	subwfb	___lwdiv@dividend+1,f,c
  4499  0029BE  800C               	bsf	___lwdiv@quotient,0,c
  4500  0029C0                     l3597:
  4501  0029C0  90D8               	bcf	status,0,c
  4502  0029C2  320B               	rrcf	___lwdiv@divisor+1,f,c
  4503  0029C4  320A               	rrcf	___lwdiv@divisor,f,c
  4504  0029C6  2E0E               	decfsz	___lwdiv@counter,f,c
  4505  0029C8  D7ED               	goto	u3500
  4506  0029CA                     l1034:
  4507  0029CA  C00C  F008         	movff	___lwdiv@quotient,?___lwdiv
  4508  0029CE  C00D  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4509  0029D2  0012               	return		;funcret
  4510  0029D4                     __end_of___lwdiv:
  4511                           	opt callstack 0
  4512                           
  4513 ;; *************** function ___flmul *****************
  4514 ;; Defined at:
  4515 ;;		line 8 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/sprcmul.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;  b               4   16[COMRAM] unsigned int 
  4518 ;;  a               4   20[COMRAM] unsigned int 
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;  prod            4   35[COMRAM] struct .
  4521 ;;  grs             4   29[COMRAM] unsigned long 
  4522 ;;  temp            2   39[COMRAM] struct .
  4523 ;;  bexp            1   34[COMRAM] unsigned char 
  4524 ;;  aexp            1   33[COMRAM] unsigned char 
  4525 ;;  sign            1   28[COMRAM] unsigned char 
  4526 ;; Return value:  Size  Location     Type
  4527 ;;                  4   16[COMRAM] unsigned char 
  4528 ;; Registers used:
  4529 ;;		wreg, status,2, status,0, prodl, prodh
  4530 ;; Tracked objects:
  4531 ;;		On entry : 0/0
  4532 ;;		On exit  : 0/0
  4533 ;;		Unchanged: 0/0
  4534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4535 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4536 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4537 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4538 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4539 ;;Total ram usage:       25 bytes
  4540 ;; Hardware stack levels used:    1
  4541 ;; Hardware stack levels required when called:    2
  4542 ;; This function calls:
  4543 ;;		Nothing
  4544 ;; This function is called by:
  4545 ;;		_fround
  4546 ;;		_scale
  4547 ;;		_sprintf
  4548 ;; This function uses a non-reentrant model
  4549 ;;
  4550                           
  4551                           	psect	text12
  4552  000BEE                     __ptext12:
  4553                           	opt callstack 0
  4554  000BEE                     ___flmul:
  4555                           	opt callstack 24
  4556                           
  4557                           ;incstack = 0
  4558  000BEE  5014               	movf	___flmul@b+3,w,c
  4559  000BF0  0B80               	andlw	128
  4560  000BF2  6E1D               	movwf	___flmul@sign,c
  4561  000BF4  5014               	movf	___flmul@b+3,w,c
  4562  000BF6  2414               	addwf	___flmul@b+3,w,c
  4563  000BF8  6E23               	movwf	___flmul@bexp,c
  4564  000BFA  BE13               	btfsc	___flmul@b+2,7,c
  4565  000BFC  8023               	bsf	___flmul@bexp,0,c
  4566  000BFE  5023               	movf	___flmul@bexp,w,c
  4567  000C00  B4D8               	btfsc	status,2,c
  4568  000C02  D00D               	goto	l3383
  4569  000C04  2823               	incf	___flmul@bexp,w,c
  4570  000C06  A4D8               	btfss	status,2,c
  4571  000C08  D008               	goto	l3381
  4572  000C0A  0E00               	movlw	0
  4573  000C0C  6E11               	movwf	___flmul@b,c
  4574  000C0E  0E00               	movlw	0
  4575  000C10  6E12               	movwf	___flmul@b+1,c
  4576  000C12  0E00               	movlw	0
  4577  000C14  6E13               	movwf	___flmul@b+2,c
  4578  000C16  0E00               	movlw	0
  4579  000C18  6E14               	movwf	___flmul@b+3,c
  4580  000C1A                     l3381:
  4581  000C1A  8E13               	bsf	___flmul@b+2,7,c
  4582  000C1C  D008               	goto	l3385
  4583  000C1E                     l3383:
  4584  000C1E  0E00               	movlw	0
  4585  000C20  6E11               	movwf	___flmul@b,c
  4586  000C22  0E00               	movlw	0
  4587  000C24  6E12               	movwf	___flmul@b+1,c
  4588  000C26  0E00               	movlw	0
  4589  000C28  6E13               	movwf	___flmul@b+2,c
  4590  000C2A  0E00               	movlw	0
  4591  000C2C  6E14               	movwf	___flmul@b+3,c
  4592  000C2E                     l3385:
  4593  000C2E  5018               	movf	___flmul@a+3,w,c
  4594  000C30  0B80               	andlw	128
  4595  000C32  1A1D               	xorwf	___flmul@sign,f,c
  4596  000C34  5018               	movf	___flmul@a+3,w,c
  4597  000C36  2418               	addwf	___flmul@a+3,w,c
  4598  000C38  6E22               	movwf	___flmul@aexp,c
  4599  000C3A  BE17               	btfsc	___flmul@a+2,7,c
  4600  000C3C  8022               	bsf	___flmul@aexp,0,c
  4601  000C3E  5022               	movf	___flmul@aexp,w,c
  4602  000C40  B4D8               	btfsc	status,2,c
  4603  000C42  D00D               	goto	l3401
  4604  000C44  2822               	incf	___flmul@aexp,w,c
  4605  000C46  A4D8               	btfss	status,2,c
  4606  000C48  D008               	goto	l3399
  4607  000C4A  0E00               	movlw	0
  4608  000C4C  6E15               	movwf	___flmul@a,c
  4609  000C4E  0E00               	movlw	0
  4610  000C50  6E16               	movwf	___flmul@a+1,c
  4611  000C52  0E00               	movlw	0
  4612  000C54  6E17               	movwf	___flmul@a+2,c
  4613  000C56  0E00               	movlw	0
  4614  000C58  6E18               	movwf	___flmul@a+3,c
  4615  000C5A                     l3399:
  4616  000C5A  8E17               	bsf	___flmul@a+2,7,c
  4617  000C5C  D008               	goto	l1157
  4618  000C5E                     l3401:
  4619  000C5E  0E00               	movlw	0
  4620  000C60  6E15               	movwf	___flmul@a,c
  4621  000C62  0E00               	movlw	0
  4622  000C64  6E16               	movwf	___flmul@a+1,c
  4623  000C66  0E00               	movlw	0
  4624  000C68  6E17               	movwf	___flmul@a+2,c
  4625  000C6A  0E00               	movlw	0
  4626  000C6C  6E18               	movwf	___flmul@a+3,c
  4627  000C6E                     l1157:
  4628  000C6E  5022               	movf	___flmul@aexp,w,c
  4629  000C70  B4D8               	btfsc	status,2,c
  4630  000C72  D003               	goto	u3250
  4631  000C74  5023               	movf	___flmul@bexp,w,c
  4632  000C76  A4D8               	btfss	status,2,c
  4633  000C78  D009               	goto	l3409
  4634  000C7A                     u3250:
  4635  000C7A  0E00               	movlw	0
  4636  000C7C  6E11               	movwf	?___flmul,c
  4637  000C7E  0E00               	movlw	0
  4638  000C80  6E12               	movwf	?___flmul+1,c
  4639  000C82  0E00               	movlw	0
  4640  000C84  6E13               	movwf	?___flmul+2,c
  4641  000C86  0E00               	movlw	0
  4642  000C88  6E14               	movwf	?___flmul+3,c
  4643  000C8A  0012               	return	
  4644  000C8C                     l3409:
  4645  000C8C  5017               	movf	___flmul@a+2,w,c
  4646  000C8E  0211               	mulwf	___flmul@b,c
  4647  000C90  CFF3 F028          	movff	prodl,___flmul@temp
  4648  000C94  CFF4 F029          	movff	prodh,___flmul@temp+1
  4649  000C98  5028               	movf	___flmul@temp,w,c
  4650  000C9A  6E1E               	movwf	___flmul@grs,c
  4651  000C9C  6A1F               	clrf	___flmul@grs+1,c
  4652  000C9E  6A20               	clrf	___flmul@grs+2,c
  4653  000CA0  6A21               	clrf	___flmul@grs+3,c
  4654  000CA2  5029               	movf	___flmul@temp+1,w,c
  4655  000CA4  6E24               	movwf	___flmul@prod,c
  4656  000CA6  6A25               	clrf	___flmul@prod+1,c
  4657  000CA8  6A26               	clrf	___flmul@prod+2,c
  4658  000CAA  6A27               	clrf	___flmul@prod+3,c
  4659  000CAC  5016               	movf	___flmul@a+1,w,c
  4660  000CAE  0212               	mulwf	___flmul@b+1,c
  4661  000CB0  CFF3 F028          	movff	prodl,___flmul@temp
  4662  000CB4  CFF4 F029          	movff	prodh,___flmul@temp+1
  4663  000CB8  5028               	movf	___flmul@temp,w,c
  4664  000CBA  261E               	addwf	___flmul@grs,f,c
  4665  000CBC  0E00               	movlw	0
  4666  000CBE  221F               	addwfc	___flmul@grs+1,f,c
  4667  000CC0  2220               	addwfc	___flmul@grs+2,f,c
  4668  000CC2  2221               	addwfc	___flmul@grs+3,f,c
  4669  000CC4  5029               	movf	___flmul@temp+1,w,c
  4670  000CC6  2624               	addwf	___flmul@prod,f,c
  4671  000CC8  0E00               	movlw	0
  4672  000CCA  2225               	addwfc	___flmul@prod+1,f,c
  4673  000CCC  2226               	addwfc	___flmul@prod+2,f,c
  4674  000CCE  2227               	addwfc	___flmul@prod+3,f,c
  4675  000CD0  5015               	movf	___flmul@a,w,c
  4676  000CD2  0213               	mulwf	___flmul@b+2,c
  4677  000CD4  CFF3 F028          	movff	prodl,___flmul@temp
  4678  000CD8  CFF4 F029          	movff	prodh,___flmul@temp+1
  4679  000CDC  5028               	movf	___flmul@temp,w,c
  4680  000CDE  261E               	addwf	___flmul@grs,f,c
  4681  000CE0  0E00               	movlw	0
  4682  000CE2  221F               	addwfc	___flmul@grs+1,f,c
  4683  000CE4  2220               	addwfc	___flmul@grs+2,f,c
  4684  000CE6  2221               	addwfc	___flmul@grs+3,f,c
  4685  000CE8  5029               	movf	___flmul@temp+1,w,c
  4686  000CEA  2624               	addwf	___flmul@prod,f,c
  4687  000CEC  0E00               	movlw	0
  4688  000CEE  2225               	addwfc	___flmul@prod+1,f,c
  4689  000CF0  2226               	addwfc	___flmul@prod+2,f,c
  4690  000CF2  2227               	addwfc	___flmul@prod+3,f,c
  4691  000CF4  C020  F021         	movff	___flmul@grs+2,___flmul@grs+3
  4692  000CF8  C01F  F020         	movff	___flmul@grs+1,___flmul@grs+2
  4693  000CFC  C01E  F01F         	movff	___flmul@grs,___flmul@grs+1
  4694  000D00  6A1E               	clrf	___flmul@grs,c
  4695  000D02  5015               	movf	___flmul@a,w,c
  4696  000D04  0212               	mulwf	___flmul@b+1,c
  4697  000D06  CFF3 F028          	movff	prodl,___flmul@temp
  4698  000D0A  CFF4 F029          	movff	prodh,___flmul@temp+1
  4699  000D0E  5028               	movf	___flmul@temp,w,c
  4700  000D10  261E               	addwf	___flmul@grs,f,c
  4701  000D12  5029               	movf	___flmul@temp+1,w,c
  4702  000D14  221F               	addwfc	___flmul@grs+1,f,c
  4703  000D16  0E00               	movlw	0
  4704  000D18  2220               	addwfc	___flmul@grs+2,f,c
  4705  000D1A  0E00               	movlw	0
  4706  000D1C  2221               	addwfc	___flmul@grs+3,f,c
  4707  000D1E  5016               	movf	___flmul@a+1,w,c
  4708  000D20  0211               	mulwf	___flmul@b,c
  4709  000D22  CFF3 F028          	movff	prodl,___flmul@temp
  4710  000D26  CFF4 F029          	movff	prodh,___flmul@temp+1
  4711  000D2A  5028               	movf	___flmul@temp,w,c
  4712  000D2C  261E               	addwf	___flmul@grs,f,c
  4713  000D2E  5029               	movf	___flmul@temp+1,w,c
  4714  000D30  221F               	addwfc	___flmul@grs+1,f,c
  4715  000D32  0E00               	movlw	0
  4716  000D34  2220               	addwfc	___flmul@grs+2,f,c
  4717  000D36  0E00               	movlw	0
  4718  000D38  2221               	addwfc	___flmul@grs+3,f,c
  4719  000D3A  C020  F021         	movff	___flmul@grs+2,___flmul@grs+3
  4720  000D3E  C01F  F020         	movff	___flmul@grs+1,___flmul@grs+2
  4721  000D42  C01E  F01F         	movff	___flmul@grs,___flmul@grs+1
  4722  000D46  6A1E               	clrf	___flmul@grs,c
  4723  000D48  5015               	movf	___flmul@a,w,c
  4724  000D4A  0211               	mulwf	___flmul@b,c
  4725  000D4C  CFF3 F028          	movff	prodl,___flmul@temp
  4726  000D50  CFF4 F029          	movff	prodh,___flmul@temp+1
  4727  000D54  5028               	movf	___flmul@temp,w,c
  4728  000D56  261E               	addwf	___flmul@grs,f,c
  4729  000D58  5029               	movf	___flmul@temp+1,w,c
  4730  000D5A  221F               	addwfc	___flmul@grs+1,f,c
  4731  000D5C  0E00               	movlw	0
  4732  000D5E  2220               	addwfc	___flmul@grs+2,f,c
  4733  000D60  0E00               	movlw	0
  4734  000D62  2221               	addwfc	___flmul@grs+3,f,c
  4735  000D64  5017               	movf	___flmul@a+2,w,c
  4736  000D66  0212               	mulwf	___flmul@b+1,c
  4737  000D68  CFF3 F028          	movff	prodl,___flmul@temp
  4738  000D6C  CFF4 F029          	movff	prodh,___flmul@temp+1
  4739  000D70  5028               	movf	___flmul@temp,w,c
  4740  000D72  2624               	addwf	___flmul@prod,f,c
  4741  000D74  5029               	movf	___flmul@temp+1,w,c
  4742  000D76  2225               	addwfc	___flmul@prod+1,f,c
  4743  000D78  0E00               	movlw	0
  4744  000D7A  2226               	addwfc	___flmul@prod+2,f,c
  4745  000D7C  0E00               	movlw	0
  4746  000D7E  2227               	addwfc	___flmul@prod+3,f,c
  4747  000D80  5016               	movf	___flmul@a+1,w,c
  4748  000D82  0213               	mulwf	___flmul@b+2,c
  4749  000D84  CFF3 F028          	movff	prodl,___flmul@temp
  4750  000D88  CFF4 F029          	movff	prodh,___flmul@temp+1
  4751  000D8C  5028               	movf	___flmul@temp,w,c
  4752  000D8E  2624               	addwf	___flmul@prod,f,c
  4753  000D90  5029               	movf	___flmul@temp+1,w,c
  4754  000D92  2225               	addwfc	___flmul@prod+1,f,c
  4755  000D94  0E00               	movlw	0
  4756  000D96  2226               	addwfc	___flmul@prod+2,f,c
  4757  000D98  0E00               	movlw	0
  4758  000D9A  2227               	addwfc	___flmul@prod+3,f,c
  4759  000D9C  5017               	movf	___flmul@a+2,w,c
  4760  000D9E  0213               	mulwf	___flmul@b+2,c
  4761  000DA0  CFF3 F028          	movff	prodl,___flmul@temp
  4762  000DA4  CFF4 F029          	movff	prodh,___flmul@temp+1
  4763  000DA8  5028               	movf	___flmul@temp,w,c
  4764  000DAA  6E19               	movwf	??___flmul& (0+255),c
  4765  000DAC  5029               	movf	___flmul@temp+1,w,c
  4766  000DAE  6E1A               	movwf	(??___flmul+1)& (0+255),c
  4767  000DB0  6A1B               	clrf	(??___flmul+2)& (0+255),c
  4768  000DB2  6A1C               	clrf	(??___flmul+3)& (0+255),c
  4769  000DB4  C01B  F01C         	movff	??___flmul+2,??___flmul+3
  4770  000DB8  C01A  F01B         	movff	??___flmul+1,??___flmul+2
  4771  000DBC  C019  F01A         	movff	??___flmul,??___flmul+1
  4772  000DC0  6A19               	clrf	??___flmul,c
  4773  000DC2  5019               	movf	??___flmul,w,c
  4774  000DC4  2624               	addwf	___flmul@prod,f,c
  4775  000DC6  501A               	movf	??___flmul+1,w,c
  4776  000DC8  2225               	addwfc	___flmul@prod+1,f,c
  4777  000DCA  501B               	movf	??___flmul+2,w,c
  4778  000DCC  2226               	addwfc	___flmul@prod+2,f,c
  4779  000DCE  501C               	movf	??___flmul+3,w,c
  4780  000DD0  2227               	addwfc	___flmul@prod+3,f,c
  4781  000DD2  C01E  F019         	movff	___flmul@grs,??___flmul
  4782  000DD6  C01F  F01A         	movff	___flmul@grs+1,??___flmul+1
  4783  000DDA  C020  F01B         	movff	___flmul@grs+2,??___flmul+2
  4784  000DDE  C021  F01C         	movff	___flmul@grs+3,??___flmul+3
  4785  000DE2  0E19               	movlw	25
  4786  000DE4  D005               	goto	u3260
  4787  000DE6                     u3265:
  4788  000DE6  90D8               	bcf	status,0,c
  4789  000DE8  321C               	rrcf	??___flmul+3,f,c
  4790  000DEA  321B               	rrcf	??___flmul+2,f,c
  4791  000DEC  321A               	rrcf	??___flmul+1,f,c
  4792  000DEE  3219               	rrcf	??___flmul,f,c
  4793  000DF0                     u3260:
  4794  000DF0  2EE8               	decfsz	wreg,f,c
  4795  000DF2  D7F9               	goto	u3265
  4796  000DF4  5019               	movf	??___flmul,w,c
  4797  000DF6  2624               	addwf	___flmul@prod,f,c
  4798  000DF8  501A               	movf	??___flmul+1,w,c
  4799  000DFA  2225               	addwfc	___flmul@prod+1,f,c
  4800  000DFC  501B               	movf	??___flmul+2,w,c
  4801  000DFE  2226               	addwfc	___flmul@prod+2,f,c
  4802  000E00  501C               	movf	??___flmul+3,w,c
  4803  000E02  2227               	addwfc	___flmul@prod+3,f,c
  4804  000E04  C020  F021         	movff	___flmul@grs+2,___flmul@grs+3
  4805  000E08  C01F  F020         	movff	___flmul@grs+1,___flmul@grs+2
  4806  000E0C  C01E  F01F         	movff	___flmul@grs,___flmul@grs+1
  4807  000E10  6A1E               	clrf	___flmul@grs,c
  4808  000E12  5022               	movf	___flmul@aexp,w,c
  4809  000E14  C023  F019         	movff	___flmul@bexp,??___flmul
  4810  000E18  6A1A               	clrf	(??___flmul+1)& (0+255),c
  4811  000E1A  2619               	addwf	??___flmul,f,c
  4812  000E1C  0E00               	movlw	0
  4813  000E1E  221A               	addwfc	??___flmul+1,f,c
  4814  000E20  0E82               	movlw	130
  4815  000E22  2419               	addwf	??___flmul,w,c
  4816  000E24  6E28               	movwf	___flmul@temp,c
  4817  000E26  0EFF               	movlw	255
  4818  000E28  201A               	addwfc	??___flmul+1,w,c
  4819  000E2A  6E29               	movwf	___flmul@temp+1,c
  4820  000E2C  D00F               	goto	l3457
  4821  000E2E                     l3451:
  4822  000E2E  90D8               	bcf	status,0,c
  4823  000E30  3624               	rlcf	___flmul@prod,f,c
  4824  000E32  3625               	rlcf	___flmul@prod+1,f,c
  4825  000E34  3626               	rlcf	___flmul@prod+2,f,c
  4826  000E36  3627               	rlcf	___flmul@prod+3,f,c
  4827  000E38  BE21               	btfsc	___flmul@grs+3,7,c
  4828  000E3A  8024               	bsf	___flmul@prod,0,c
  4829  000E3C  90D8               	bcf	status,0,c
  4830  000E3E  361E               	rlcf	___flmul@grs,f,c
  4831  000E40  361F               	rlcf	___flmul@grs+1,f,c
  4832  000E42  3620               	rlcf	___flmul@grs+2,f,c
  4833  000E44  3621               	rlcf	___flmul@grs+3,f,c
  4834  000E46  0628               	decf	___flmul@temp,f,c
  4835  000E48  A0D8               	btfss	status,0,c
  4836  000E4A  0629               	decf	___flmul@temp+1,f,c
  4837  000E4C                     l3457:
  4838  000E4C  AE26               	btfss	___flmul@prod+2,7,c
  4839  000E4E  D7EF               	goto	l3451
  4840  000E50  0E00               	movlw	0
  4841  000E52  6E22               	movwf	___flmul@aexp,c
  4842  000E54  AE21               	btfss	___flmul@grs+3,7,c
  4843  000E56  D017               	goto	l1166
  4844  000E58  0EFF               	movlw	255
  4845  000E5A  141E               	andwf	___flmul@grs,w,c
  4846  000E5C  6E19               	movwf	??___flmul& (0+255),c
  4847  000E5E  0EFF               	movlw	255
  4848  000E60  141F               	andwf	___flmul@grs+1,w,c
  4849  000E62  6E1A               	movwf	(??___flmul+1)& (0+255),c
  4850  000E64  0EFF               	movlw	255
  4851  000E66  1420               	andwf	___flmul@grs+2,w,c
  4852  000E68  6E1B               	movwf	(??___flmul+2)& (0+255),c
  4853  000E6A  0E7F               	movlw	127
  4854  000E6C  1421               	andwf	___flmul@grs+3,w,c
  4855  000E6E  6E1C               	movwf	(??___flmul+3)& (0+255),c
  4856  000E70  5019               	movf	??___flmul,w,c
  4857  000E72  101A               	iorwf	??___flmul+1,w,c
  4858  000E74  101B               	iorwf	??___flmul+2,w,c
  4859  000E76  101C               	iorwf	??___flmul+3,w,c
  4860  000E78  B4D8               	btfsc	status,2,c
  4861  000E7A  D003               	goto	l1167
  4862  000E7C                     u3300:
  4863  000E7C  0E01               	movlw	1
  4864  000E7E  6E22               	movwf	___flmul@aexp,c
  4865  000E80  D002               	goto	l1166
  4866  000E82                     l1167:
  4867  000E82  B024               	btfsc	___flmul@prod,0,c
  4868  000E84  D7FB               	goto	u3300
  4869  000E86                     l1166:
  4870  000E86  5022               	movf	___flmul@aexp,w,c
  4871  000E88  B4D8               	btfsc	status,2,c
  4872  000E8A  D01F               	goto	l3477
  4873  000E8C  0E01               	movlw	1
  4874  000E8E  2624               	addwf	___flmul@prod,f,c
  4875  000E90  0E00               	movlw	0
  4876  000E92  2225               	addwfc	___flmul@prod+1,f,c
  4877  000E94  2226               	addwfc	___flmul@prod+2,f,c
  4878  000E96  2227               	addwfc	___flmul@prod+3,f,c
  4879  000E98  A027               	btfss	___flmul@prod+3,0,c
  4880  000E9A  D017               	goto	l3477
  4881  000E9C  C024  F019         	movff	___flmul@prod,??___flmul
  4882  000EA0  C025  F01A         	movff	___flmul@prod+1,??___flmul+1
  4883  000EA4  C026  F01B         	movff	___flmul@prod+2,??___flmul+2
  4884  000EA8  C027  F01C         	movff	___flmul@prod+3,??___flmul+3
  4885  000EAC  341C               	rlcf	??___flmul+3,w,c
  4886  000EAE  321C               	rrcf	??___flmul+3,f,c
  4887  000EB0  321B               	rrcf	??___flmul+2,f,c
  4888  000EB2  321A               	rrcf	??___flmul+1,f,c
  4889  000EB4  3219               	rrcf	??___flmul,f,c
  4890  000EB6  C019  F024         	movff	??___flmul,___flmul@prod
  4891  000EBA  C01A  F025         	movff	??___flmul+1,___flmul@prod+1
  4892  000EBE  C01B  F026         	movff	??___flmul+2,___flmul@prod+2
  4893  000EC2  C01C  F027         	movff	??___flmul+3,___flmul@prod+3
  4894  000EC6  4A28               	infsnz	___flmul@temp,f,c
  4895  000EC8  2A29               	incf	___flmul@temp+1,f,c
  4896  000ECA                     l3477:
  4897  000ECA  BE29               	btfsc	___flmul@temp+1,7,c
  4898  000ECC  D00D               	goto	l3481
  4899  000ECE  5029               	movf	___flmul@temp+1,w,c
  4900  000ED0  E103               	bnz	u3340
  4901  000ED2  2828               	incf	___flmul@temp,w,c
  4902  000ED4  A0D8               	btfss	status,0,c
  4903  000ED6  D008               	goto	l3481
  4904  000ED8                     u3340:
  4905  000ED8  0E00               	movlw	0
  4906  000EDA  6E24               	movwf	___flmul@prod,c
  4907  000EDC  0E00               	movlw	0
  4908  000EDE  6E25               	movwf	___flmul@prod+1,c
  4909  000EE0  0E80               	movlw	128
  4910  000EE2  6E26               	movwf	___flmul@prod+2,c
  4911  000EE4  0E7F               	movlw	127
  4912  000EE6  D020               	goto	L3
  4913  000EE8                     l3481:
  4914  000EE8  BE29               	btfsc	___flmul@temp+1,7,c
  4915  000EEA  D005               	goto	u3350
  4916  000EEC  5029               	movf	___flmul@temp+1,w,c
  4917  000EEE  E10E               	bnz	l1174
  4918  000EF0  0428               	decf	___flmul@temp,w,c
  4919  000EF2  B0D8               	btfsc	status,0,c
  4920  000EF4  D00B               	goto	l1174
  4921  000EF6                     u3350:
  4922  000EF6  0E00               	movlw	0
  4923  000EF8  6E24               	movwf	___flmul@prod,c
  4924  000EFA  0E00               	movlw	0
  4925  000EFC  6E25               	movwf	___flmul@prod+1,c
  4926  000EFE  0E00               	movlw	0
  4927  000F00  6E26               	movwf	___flmul@prod+2,c
  4928  000F02  0E00               	movlw	0
  4929  000F04  6E27               	movwf	___flmul@prod+3,c
  4930  000F06  0E00               	movlw	0
  4931  000F08  6E1D               	movwf	___flmul@sign,c
  4932  000F0A  D00F               	goto	l3493
  4933  000F0C                     l1174:
  4934  000F0C  C028  F023         	movff	___flmul@temp,___flmul@bexp
  4935  000F10  0EFF               	movlw	255
  4936  000F12  1624               	andwf	___flmul@prod,f,c
  4937  000F14  0EFF               	movlw	255
  4938  000F16  1625               	andwf	___flmul@prod+1,f,c
  4939  000F18  0E7F               	movlw	127
  4940  000F1A  1626               	andwf	___flmul@prod+2,f,c
  4941  000F1C  0E00               	movlw	0
  4942  000F1E  1627               	andwf	___flmul@prod+3,f,c
  4943  000F20  B023               	btfsc	___flmul@bexp,0,c
  4944  000F22  8E26               	bsf	___flmul@prod+2,7,c
  4945  000F24  90D8               	bcf	status,0,c
  4946  000F26  3023               	rrcf	___flmul@bexp,w,c
  4947  000F28                     L3:
  4948  000F28  6E27               	movwf	___flmul@prod+3,c
  4949  000F2A                     l3493:
  4950  000F2A  501D               	movf	___flmul@sign,w,c
  4951  000F2C  1227               	iorwf	___flmul@prod+3,f,c
  4952  000F2E  C024  F011         	movff	___flmul@prod,?___flmul
  4953  000F32  C025  F012         	movff	___flmul@prod+1,?___flmul+1
  4954  000F36  C026  F013         	movff	___flmul@prod+2,?___flmul+2
  4955  000F3A  C027  F014         	movff	___flmul@prod+3,?___flmul+3
  4956  000F3E  0012               	return		;funcret
  4957  000F40                     __end_of___flmul:
  4958                           	opt callstack 0
  4959                           
  4960 ;; *************** function __tdiv_to_l_ *****************
  4961 ;; Defined at:
  4962 ;;		line 60 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/ftdivl.c"
  4963 ;; Parameters:    Size  Location     Type
  4964 ;;  f1              4    2[COMRAM] float 
  4965 ;;  f2              4    6[COMRAM] float 
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;  quot            4   13[COMRAM] unsigned long 
  4968 ;;  exp1            1   18[COMRAM] unsigned char 
  4969 ;;  cntr            1   17[COMRAM] unsigned char 
  4970 ;; Return value:  Size  Location     Type
  4971 ;;                  4    2[COMRAM] unsigned long 
  4972 ;; Registers used:
  4973 ;;		wreg, status,2, status,0
  4974 ;; Tracked objects:
  4975 ;;		On entry : 0/0
  4976 ;;		On exit  : 0/0
  4977 ;;		Unchanged: 0/0
  4978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4979 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4980 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4981 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4982 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4983 ;;Total ram usage:       17 bytes
  4984 ;; Hardware stack levels used:    1
  4985 ;; Hardware stack levels required when called:    2
  4986 ;; This function calls:
  4987 ;;		Nothing
  4988 ;; This function is called by:
  4989 ;;		_sprintf
  4990 ;; This function uses a non-reentrant model
  4991 ;;
  4992                           
  4993                           	psect	text13
  4994  002182                     __ptext13:
  4995                           	opt callstack 0
  4996  002182                     __tdiv_to_l_:
  4997                           	opt callstack 25
  4998                           
  4999                           ;incstack = 0
  5000  002182  C005  F00B         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5001  002186  6A0C               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5002  002188  6A0D               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5003  00218A  3404               	rlcf	__tdiv_to_l_@f1+1,w,c
  5004  00218C  360B               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5005  00218E  E301               	bnc	u3731
  5006  002190  800C               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5007  002192                     u3731:
  5008  002192  500B               	movf	??__tdiv_to_l_,w,c
  5009  002194  6E13               	movwf	__tdiv_to_l_@exp1,c
  5010  002196  5013               	movf	__tdiv_to_l_@exp1,w,c
  5011  002198  A4D8               	btfss	status,2,c
  5012  00219A  D009               	goto	l3751
  5013  00219C                     u3740:
  5014  00219C  0E00               	movlw	0
  5015  00219E  6E03               	movwf	?__tdiv_to_l_,c
  5016  0021A0  0E00               	movlw	0
  5017  0021A2  6E04               	movwf	?__tdiv_to_l_+1,c
  5018  0021A4  0E00               	movlw	0
  5019  0021A6  6E05               	movwf	?__tdiv_to_l_+2,c
  5020  0021A8  0E00               	movlw	0
  5021  0021AA  6E06               	movwf	?__tdiv_to_l_+3,c
  5022  0021AC  0012               	return	
  5023  0021AE                     l3751:
  5024  0021AE  C009  F00B         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5025  0021B2  6A0C               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5026  0021B4  6A0D               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5027  0021B6  3408               	rlcf	__tdiv_to_l_@f2+1,w,c
  5028  0021B8  360B               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5029  0021BA  E301               	bnc	u3751
  5030  0021BC  800C               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5031  0021BE                     u3751:
  5032  0021BE  500B               	movf	??__tdiv_to_l_,w,c
  5033  0021C0  6E12               	movwf	__tdiv_to_l_@cntr,c
  5034  0021C2  5012               	movf	__tdiv_to_l_@cntr,w,c
  5035  0021C4  B4D8               	btfsc	status,2,c
  5036  0021C6  D7EA               	goto	u3740
  5037  0021C8  8E04               	bsf	__tdiv_to_l_@f1+1,7,c
  5038  0021CA  0EFF               	movlw	255
  5039  0021CC  1603               	andwf	__tdiv_to_l_@f1,f,c
  5040  0021CE  0EFF               	movlw	255
  5041  0021D0  1604               	andwf	__tdiv_to_l_@f1+1,f,c
  5042  0021D2  0E00               	movlw	0
  5043  0021D4  1605               	andwf	__tdiv_to_l_@f1+2,f,c
  5044  0021D6  8E08               	bsf	__tdiv_to_l_@f2+1,7,c
  5045  0021D8  0EFF               	movlw	255
  5046  0021DA  1607               	andwf	__tdiv_to_l_@f2,f,c
  5047  0021DC  0EFF               	movlw	255
  5048  0021DE  1608               	andwf	__tdiv_to_l_@f2+1,f,c
  5049  0021E0  0E00               	movlw	0
  5050  0021E2  1609               	andwf	__tdiv_to_l_@f2+2,f,c
  5051  0021E4  0E00               	movlw	0
  5052  0021E6  6E0E               	movwf	__tdiv_to_l_@quot,c
  5053  0021E8  0E00               	movlw	0
  5054  0021EA  6E0F               	movwf	__tdiv_to_l_@quot+1,c
  5055  0021EC  0E00               	movlw	0
  5056  0021EE  6E10               	movwf	__tdiv_to_l_@quot+2,c
  5057  0021F0  0E00               	movlw	0
  5058  0021F2  6E11               	movwf	__tdiv_to_l_@quot+3,c
  5059  0021F4  0E7F               	movlw	127
  5060  0021F6  5E13               	subwf	__tdiv_to_l_@exp1,f,c
  5061  0021F8  5012               	movf	__tdiv_to_l_@cntr,w,c
  5062  0021FA  0F98               	addlw	152
  5063  0021FC  5E13               	subwf	__tdiv_to_l_@exp1,f,c
  5064  0021FE  0E18               	movlw	24
  5065  002200  6E12               	movwf	__tdiv_to_l_@cntr,c
  5066  002202                     l886:
  5067  002202  90D8               	bcf	status,0,c
  5068  002204  360E               	rlcf	__tdiv_to_l_@quot,f,c
  5069  002206  360F               	rlcf	__tdiv_to_l_@quot+1,f,c
  5070  002208  3610               	rlcf	__tdiv_to_l_@quot+2,f,c
  5071  00220A  3611               	rlcf	__tdiv_to_l_@quot+3,f,c
  5072  00220C  5007               	movf	__tdiv_to_l_@f2,w,c
  5073  00220E  5C03               	subwf	__tdiv_to_l_@f1,w,c
  5074  002210  5008               	movf	__tdiv_to_l_@f2+1,w,c
  5075  002212  5804               	subwfb	__tdiv_to_l_@f1+1,w,c
  5076  002214  5009               	movf	__tdiv_to_l_@f2+2,w,c
  5077  002216  5805               	subwfb	__tdiv_to_l_@f1+2,w,c
  5078  002218  A0D8               	btfss	status,0,c
  5079  00221A  D007               	goto	l887
  5080  00221C  5007               	movf	__tdiv_to_l_@f2,w,c
  5081  00221E  5E03               	subwf	__tdiv_to_l_@f1,f,c
  5082  002220  5008               	movf	__tdiv_to_l_@f2+1,w,c
  5083  002222  5A04               	subwfb	__tdiv_to_l_@f1+1,f,c
  5084  002224  5009               	movf	__tdiv_to_l_@f2+2,w,c
  5085  002226  5A05               	subwfb	__tdiv_to_l_@f1+2,f,c
  5086  002228  800E               	bsf	__tdiv_to_l_@quot,0,c
  5087  00222A                     l887:
  5088  00222A  90D8               	bcf	status,0,c
  5089  00222C  3603               	rlcf	__tdiv_to_l_@f1,f,c
  5090  00222E  3604               	rlcf	__tdiv_to_l_@f1+1,f,c
  5091  002230  3605               	rlcf	__tdiv_to_l_@f1+2,f,c
  5092  002232  2E12               	decfsz	__tdiv_to_l_@cntr,f,c
  5093  002234  D7E6               	goto	l886
  5094  002236  AE13               	btfss	__tdiv_to_l_@exp1,7,c
  5095  002238  D00D               	goto	l3791
  5096  00223A  5013               	movf	__tdiv_to_l_@exp1,w,c
  5097  00223C  0A80               	xorlw	128
  5098  00223E  0F97               	addlw	151
  5099  002240  A0D8               	btfss	status,0,c
  5100  002242  D7AC               	goto	u3740
  5101  002244                     l3787:
  5102  002244  90D8               	bcf	status,0,c
  5103  002246  3211               	rrcf	__tdiv_to_l_@quot+3,f,c
  5104  002248  3210               	rrcf	__tdiv_to_l_@quot+2,f,c
  5105  00224A  320F               	rrcf	__tdiv_to_l_@quot+1,f,c
  5106  00224C  320E               	rrcf	__tdiv_to_l_@quot,f,c
  5107  00224E  3E13               	incfsz	__tdiv_to_l_@exp1,f,c
  5108  002250  D7F9               	goto	l3787
  5109  002252  D00D               	goto	u3810
  5110  002254                     l3791:
  5111  002254  0E17               	movlw	23
  5112  002256  6413               	cpfsgt	__tdiv_to_l_@exp1,c
  5113  002258  D007               	goto	l3799
  5114  00225A  D7A0               	goto	u3740
  5115  00225C                     l3797:
  5116  00225C  90D8               	bcf	status,0,c
  5117  00225E  360E               	rlcf	__tdiv_to_l_@quot,f,c
  5118  002260  360F               	rlcf	__tdiv_to_l_@quot+1,f,c
  5119  002262  3610               	rlcf	__tdiv_to_l_@quot+2,f,c
  5120  002264  3611               	rlcf	__tdiv_to_l_@quot+3,f,c
  5121  002266  0613               	decf	__tdiv_to_l_@exp1,f,c
  5122  002268                     l3799:
  5123  002268  5013               	movf	__tdiv_to_l_@exp1,w,c
  5124  00226A  A4D8               	btfss	status,2,c
  5125  00226C  D7F7               	goto	l3797
  5126  00226E                     u3810:
  5127  00226E  C00E  F003         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5128  002272  C00F  F004         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5129  002276  C010  F005         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5130  00227A  C011  F006         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5131  00227E  0012               	return		;funcret
  5132  002280                     __end_of__tdiv_to_l_:
  5133                           	opt callstack 0
  5134                           
  5135 ;; *************** function __div_to_l_ *****************
  5136 ;; Defined at:
  5137 ;;		line 60 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/fldivl.c"
  5138 ;; Parameters:    Size  Location     Type
  5139 ;;  f1              4    2[COMRAM] unsigned long 
  5140 ;;  f2              4    6[COMRAM] unsigned long 
  5141 ;; Auto vars:     Size  Location     Type
  5142 ;;  quot            4   10[COMRAM] unsigned long 
  5143 ;;  exp1            1   15[COMRAM] unsigned char 
  5144 ;;  cntr            1   14[COMRAM] unsigned char 
  5145 ;; Return value:  Size  Location     Type
  5146 ;;                  4    2[COMRAM] unsigned long 
  5147 ;; Registers used:
  5148 ;;		wreg, status,2, status,0
  5149 ;; Tracked objects:
  5150 ;;		On entry : 0/0
  5151 ;;		On exit  : 0/0
  5152 ;;		Unchanged: 0/0
  5153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5154 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5155 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5157 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5158 ;;Total ram usage:       14 bytes
  5159 ;; Hardware stack levels used:    1
  5160 ;; Hardware stack levels required when called:    2
  5161 ;; This function calls:
  5162 ;;		Nothing
  5163 ;; This function is called by:
  5164 ;;		_sprintf
  5165 ;; This function uses a non-reentrant model
  5166 ;;
  5167                           
  5168                           	psect	text14
  5169  002280                     __ptext14:
  5170                           	opt callstack 0
  5171  002280                     __div_to_l_:
  5172                           	opt callstack 25
  5173                           
  5174                           ;incstack = 0
  5175  002280  3405               	rlcf	__div_to_l_@f1+2,w,c
  5176  002282  3406               	rlcf	__div_to_l_@f1+3,w,c
  5177  002284  6E10               	movwf	__div_to_l_@exp1,c
  5178  002286  5010               	movf	__div_to_l_@exp1,w,c
  5179  002288  A4D8               	btfss	status,2,c
  5180  00228A  D009               	goto	l3807
  5181  00228C                     u3820:
  5182  00228C  0E00               	movlw	0
  5183  00228E  6E03               	movwf	?__div_to_l_,c
  5184  002290  0E00               	movlw	0
  5185  002292  6E04               	movwf	?__div_to_l_+1,c
  5186  002294  0E00               	movlw	0
  5187  002296  6E05               	movwf	?__div_to_l_+2,c
  5188  002298  0E00               	movlw	0
  5189  00229A  6E06               	movwf	?__div_to_l_+3,c
  5190  00229C  0012               	return	
  5191  00229E                     l3807:
  5192  00229E  3409               	rlcf	__div_to_l_@f2+2,w,c
  5193  0022A0  340A               	rlcf	__div_to_l_@f2+3,w,c
  5194  0022A2  6E0F               	movwf	__div_to_l_@cntr,c
  5195  0022A4  500F               	movf	__div_to_l_@cntr,w,c
  5196  0022A6  B4D8               	btfsc	status,2,c
  5197  0022A8  D7F1               	goto	u3820
  5198  0022AA  8E05               	bsf	__div_to_l_@f1+2,7,c
  5199  0022AC  0EFF               	movlw	255
  5200  0022AE  1603               	andwf	__div_to_l_@f1,f,c
  5201  0022B0  0EFF               	movlw	255
  5202  0022B2  1604               	andwf	__div_to_l_@f1+1,f,c
  5203  0022B4  0EFF               	movlw	255
  5204  0022B6  1605               	andwf	__div_to_l_@f1+2,f,c
  5205  0022B8  0E00               	movlw	0
  5206  0022BA  1606               	andwf	__div_to_l_@f1+3,f,c
  5207  0022BC  8E09               	bsf	__div_to_l_@f2+2,7,c
  5208  0022BE  0EFF               	movlw	255
  5209  0022C0  1607               	andwf	__div_to_l_@f2,f,c
  5210  0022C2  0EFF               	movlw	255
  5211  0022C4  1608               	andwf	__div_to_l_@f2+1,f,c
  5212  0022C6  0EFF               	movlw	255
  5213  0022C8  1609               	andwf	__div_to_l_@f2+2,f,c
  5214  0022CA  0E00               	movlw	0
  5215  0022CC  160A               	andwf	__div_to_l_@f2+3,f,c
  5216  0022CE  0E00               	movlw	0
  5217  0022D0  6E0B               	movwf	__div_to_l_@quot,c
  5218  0022D2  0E00               	movlw	0
  5219  0022D4  6E0C               	movwf	__div_to_l_@quot+1,c
  5220  0022D6  0E00               	movlw	0
  5221  0022D8  6E0D               	movwf	__div_to_l_@quot+2,c
  5222  0022DA  0E00               	movlw	0
  5223  0022DC  6E0E               	movwf	__div_to_l_@quot+3,c
  5224  0022DE  0E7F               	movlw	127
  5225  0022E0  5E10               	subwf	__div_to_l_@exp1,f,c
  5226  0022E2  500F               	movf	__div_to_l_@cntr,w,c
  5227  0022E4  0FA0               	addlw	160
  5228  0022E6  5E10               	subwf	__div_to_l_@exp1,f,c
  5229  0022E8  0E20               	movlw	32
  5230  0022EA  6E0F               	movwf	__div_to_l_@cntr,c
  5231  0022EC                     l3827:
  5232  0022EC  90D8               	bcf	status,0,c
  5233  0022EE  360B               	rlcf	__div_to_l_@quot,f,c
  5234  0022F0  360C               	rlcf	__div_to_l_@quot+1,f,c
  5235  0022F2  360D               	rlcf	__div_to_l_@quot+2,f,c
  5236  0022F4  360E               	rlcf	__div_to_l_@quot+3,f,c
  5237  0022F6  5007               	movf	__div_to_l_@f2,w,c
  5238  0022F8  5C03               	subwf	__div_to_l_@f1,w,c
  5239  0022FA  5008               	movf	__div_to_l_@f2+1,w,c
  5240  0022FC  5804               	subwfb	__div_to_l_@f1+1,w,c
  5241  0022FE  5009               	movf	__div_to_l_@f2+2,w,c
  5242  002300  5805               	subwfb	__div_to_l_@f1+2,w,c
  5243  002302  500A               	movf	__div_to_l_@f2+3,w,c
  5244  002304  5806               	subwfb	__div_to_l_@f1+3,w,c
  5245  002306  A0D8               	btfss	status,0,c
  5246  002308  D009               	goto	l3835
  5247  00230A  5007               	movf	__div_to_l_@f2,w,c
  5248  00230C  5E03               	subwf	__div_to_l_@f1,f,c
  5249  00230E  5008               	movf	__div_to_l_@f2+1,w,c
  5250  002310  5A04               	subwfb	__div_to_l_@f1+1,f,c
  5251  002312  5009               	movf	__div_to_l_@f2+2,w,c
  5252  002314  5A05               	subwfb	__div_to_l_@f1+2,f,c
  5253  002316  500A               	movf	__div_to_l_@f2+3,w,c
  5254  002318  5A06               	subwfb	__div_to_l_@f1+3,f,c
  5255  00231A  800B               	bsf	__div_to_l_@quot,0,c
  5256  00231C                     l3835:
  5257  00231C  90D8               	bcf	status,0,c
  5258  00231E  3603               	rlcf	__div_to_l_@f1,f,c
  5259  002320  3604               	rlcf	__div_to_l_@f1+1,f,c
  5260  002322  3605               	rlcf	__div_to_l_@f1+2,f,c
  5261  002324  3606               	rlcf	__div_to_l_@f1+3,f,c
  5262  002326  2E0F               	decfsz	__div_to_l_@cntr,f,c
  5263  002328  D7E1               	goto	l3827
  5264  00232A  AE10               	btfss	__div_to_l_@exp1,7,c
  5265  00232C  D00D               	goto	l3851
  5266  00232E  5010               	movf	__div_to_l_@exp1,w,c
  5267  002330  0A80               	xorlw	128
  5268  002332  0F9F               	addlw	159
  5269  002334  A0D8               	btfss	status,0,c
  5270  002336  D7AA               	goto	u3820
  5271  002338                     l3847:
  5272  002338  90D8               	bcf	status,0,c
  5273  00233A  320E               	rrcf	__div_to_l_@quot+3,f,c
  5274  00233C  320D               	rrcf	__div_to_l_@quot+2,f,c
  5275  00233E  320C               	rrcf	__div_to_l_@quot+1,f,c
  5276  002340  320B               	rrcf	__div_to_l_@quot,f,c
  5277  002342  3E10               	incfsz	__div_to_l_@exp1,f,c
  5278  002344  D7F9               	goto	l3847
  5279  002346  D00D               	goto	u3880
  5280  002348                     l3851:
  5281  002348  0E1F               	movlw	31
  5282  00234A  6410               	cpfsgt	__div_to_l_@exp1,c
  5283  00234C  D007               	goto	l3859
  5284  00234E  D79E               	goto	u3820
  5285  002350                     l3857:
  5286  002350  90D8               	bcf	status,0,c
  5287  002352  360B               	rlcf	__div_to_l_@quot,f,c
  5288  002354  360C               	rlcf	__div_to_l_@quot+1,f,c
  5289  002356  360D               	rlcf	__div_to_l_@quot+2,f,c
  5290  002358  360E               	rlcf	__div_to_l_@quot+3,f,c
  5291  00235A  0610               	decf	__div_to_l_@exp1,f,c
  5292  00235C                     l3859:
  5293  00235C  5010               	movf	__div_to_l_@exp1,w,c
  5294  00235E  A4D8               	btfss	status,2,c
  5295  002360  D7F7               	goto	l3857
  5296  002362                     u3880:
  5297  002362  C00B  F003         	movff	__div_to_l_@quot,?__div_to_l_
  5298  002366  C00C  F004         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5299  00236A  C00D  F005         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5300  00236E  C00E  F006         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5301  002372  0012               	return		;funcret
  5302  002374                     __end_of__div_to_l_:
  5303                           	opt callstack 0
  5304                           
  5305 ;; *************** function ___xxtofl *****************
  5306 ;; Defined at:
  5307 ;;		line 10 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/xxtofl.c"
  5308 ;; Parameters:    Size  Location     Type
  5309 ;;  sign            1    wreg     unsigned char 
  5310 ;;  val             4    2[COMRAM] long 
  5311 ;; Auto vars:     Size  Location     Type
  5312 ;;  sign            1   10[COMRAM] unsigned char 
  5313 ;;  arg             4   12[COMRAM] unsigned long 
  5314 ;;  exp             1   11[COMRAM] unsigned char 
  5315 ;; Return value:  Size  Location     Type
  5316 ;;                  4    2[COMRAM] unsigned char 
  5317 ;; Registers used:
  5318 ;;		wreg, status,2, status,0
  5319 ;; Tracked objects:
  5320 ;;		On entry : 0/0
  5321 ;;		On exit  : 0/0
  5322 ;;		Unchanged: 0/0
  5323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5324 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5325 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5326 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5327 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5328 ;;Total ram usage:       14 bytes
  5329 ;; Hardware stack levels used:    1
  5330 ;; Hardware stack levels required when called:    2
  5331 ;; This function calls:
  5332 ;;		Nothing
  5333 ;; This function is called by:
  5334 ;;		_uds_get_soc
  5335 ;;		_sprintf
  5336 ;; This function uses a non-reentrant model
  5337 ;;
  5338                           
  5339                           	psect	text15
  5340  001F2E                     __ptext15:
  5341                           	opt callstack 0
  5342  001F2E                     ___xxtofl:
  5343                           	opt callstack 25
  5344                           
  5345                           ;incstack = 0
  5346                           ;___xxtofl@sign stored from wreg
  5347  001F2E  6E0B               	movwf	___xxtofl@sign,c
  5348  001F30  500B               	movf	___xxtofl@sign,w,c
  5349  001F32  A4D8               	btfss	status,2,c
  5350  001F34  AE06               	btfss	___xxtofl@val+3,7,c
  5351  001F36  D01A               	goto	l1198
  5352  001F38  C003  F007         	movff	___xxtofl@val,??___xxtofl
  5353  001F3C  C004  F008         	movff	___xxtofl@val+1,??___xxtofl+1
  5354  001F40  C005  F009         	movff	___xxtofl@val+2,??___xxtofl+2
  5355  001F44  C006  F00A         	movff	___xxtofl@val+3,??___xxtofl+3
  5356  001F48  1E07               	comf	??___xxtofl,f,c
  5357  001F4A  1E08               	comf	??___xxtofl+1,f,c
  5358  001F4C  1E09               	comf	??___xxtofl+2,f,c
  5359  001F4E  1E0A               	comf	??___xxtofl+3,f,c
  5360  001F50  2A07               	incf	??___xxtofl,f,c
  5361  001F52  0E00               	movlw	0
  5362  001F54  2208               	addwfc	??___xxtofl+1,f,c
  5363  001F56  2209               	addwfc	??___xxtofl+2,f,c
  5364  001F58  220A               	addwfc	??___xxtofl+3,f,c
  5365  001F5A  C007  F00D         	movff	??___xxtofl,___xxtofl@arg
  5366  001F5E  C008  F00E         	movff	??___xxtofl+1,___xxtofl@arg+1
  5367  001F62  C009  F00F         	movff	??___xxtofl+2,___xxtofl@arg+2
  5368  001F66  C00A  F010         	movff	??___xxtofl+3,___xxtofl@arg+3
  5369  001F6A  D008               	goto	l4007
  5370  001F6C                     l1198:
  5371  001F6C  C003  F00D         	movff	___xxtofl@val,___xxtofl@arg
  5372  001F70  C004  F00E         	movff	___xxtofl@val+1,___xxtofl@arg+1
  5373  001F74  C005  F00F         	movff	___xxtofl@val+2,___xxtofl@arg+2
  5374  001F78  C006  F010         	movff	___xxtofl@val+3,___xxtofl@arg+3
  5375  001F7C                     l4007:
  5376  001F7C  5003               	movf	___xxtofl@val,w,c
  5377  001F7E  1004               	iorwf	___xxtofl@val+1,w,c
  5378  001F80  1005               	iorwf	___xxtofl@val+2,w,c
  5379  001F82  1006               	iorwf	___xxtofl@val+3,w,c
  5380  001F84  A4D8               	btfss	status,2,c
  5381  001F86  D009               	goto	l4013
  5382  001F88  0E00               	movlw	0
  5383  001F8A  6E03               	movwf	?___xxtofl,c
  5384  001F8C  0E00               	movlw	0
  5385  001F8E  6E04               	movwf	?___xxtofl+1,c
  5386  001F90  0E00               	movlw	0
  5387  001F92  6E05               	movwf	?___xxtofl+2,c
  5388  001F94  0E00               	movlw	0
  5389  001F96  6E06               	movwf	?___xxtofl+3,c
  5390  001F98  0012               	return	
  5391  001F9A                     l4013:
  5392  001F9A  0E96               	movlw	150
  5393  001F9C  6E0C               	movwf	___xxtofl@exp,c
  5394  001F9E  D006               	goto	l4017
  5395  001FA0                     l4015:
  5396  001FA0  2A0C               	incf	___xxtofl@exp,f,c
  5397  001FA2  90D8               	bcf	status,0,c
  5398  001FA4  3210               	rrcf	___xxtofl@arg+3,f,c
  5399  001FA6  320F               	rrcf	___xxtofl@arg+2,f,c
  5400  001FA8  320E               	rrcf	___xxtofl@arg+1,f,c
  5401  001FAA  320D               	rrcf	___xxtofl@arg,f,c
  5402  001FAC                     l4017:
  5403  001FAC  0E00               	movlw	0
  5404  001FAE  140D               	andwf	___xxtofl@arg,w,c
  5405  001FB0  6E07               	movwf	??___xxtofl& (0+255),c
  5406  001FB2  0E00               	movlw	0
  5407  001FB4  140E               	andwf	___xxtofl@arg+1,w,c
  5408  001FB6  6E08               	movwf	(??___xxtofl+1)& (0+255),c
  5409  001FB8  0E00               	movlw	0
  5410  001FBA  140F               	andwf	___xxtofl@arg+2,w,c
  5411  001FBC  6E09               	movwf	(??___xxtofl+2)& (0+255),c
  5412  001FBE  0EFE               	movlw	254
  5413  001FC0  1410               	andwf	___xxtofl@arg+3,w,c
  5414  001FC2  6E0A               	movwf	(??___xxtofl+3)& (0+255),c
  5415  001FC4  5007               	movf	??___xxtofl,w,c
  5416  001FC6  1008               	iorwf	??___xxtofl+1,w,c
  5417  001FC8  1009               	iorwf	??___xxtofl+2,w,c
  5418  001FCA  100A               	iorwf	??___xxtofl+3,w,c
  5419  001FCC  B4D8               	btfsc	status,2,c
  5420  001FCE  D00D               	goto	l1205
  5421  001FD0  D7E7               	goto	l4015
  5422  001FD2                     l4019:
  5423  001FD2  2A0C               	incf	___xxtofl@exp,f,c
  5424  001FD4  0E01               	movlw	1
  5425  001FD6  260D               	addwf	___xxtofl@arg,f,c
  5426  001FD8  0E00               	movlw	0
  5427  001FDA  220E               	addwfc	___xxtofl@arg+1,f,c
  5428  001FDC  220F               	addwfc	___xxtofl@arg+2,f,c
  5429  001FDE  2210               	addwfc	___xxtofl@arg+3,f,c
  5430  001FE0  90D8               	bcf	status,0,c
  5431  001FE2  3210               	rrcf	___xxtofl@arg+3,f,c
  5432  001FE4  320F               	rrcf	___xxtofl@arg+2,f,c
  5433  001FE6  320E               	rrcf	___xxtofl@arg+1,f,c
  5434  001FE8  320D               	rrcf	___xxtofl@arg,f,c
  5435  001FEA                     l1205:
  5436  001FEA  0E00               	movlw	0
  5437  001FEC  140D               	andwf	___xxtofl@arg,w,c
  5438  001FEE  6E07               	movwf	??___xxtofl& (0+255),c
  5439  001FF0  0E00               	movlw	0
  5440  001FF2  140E               	andwf	___xxtofl@arg+1,w,c
  5441  001FF4  6E08               	movwf	(??___xxtofl+1)& (0+255),c
  5442  001FF6  0E00               	movlw	0
  5443  001FF8  140F               	andwf	___xxtofl@arg+2,w,c
  5444  001FFA  6E09               	movwf	(??___xxtofl+2)& (0+255),c
  5445  001FFC  0EFF               	movlw	255
  5446  001FFE  1410               	andwf	___xxtofl@arg+3,w,c
  5447  002000  6E0A               	movwf	(??___xxtofl+3)& (0+255),c
  5448  002002  5007               	movf	??___xxtofl,w,c
  5449  002004  1008               	iorwf	??___xxtofl+1,w,c
  5450  002006  1009               	iorwf	??___xxtofl+2,w,c
  5451  002008  100A               	iorwf	??___xxtofl+3,w,c
  5452  00200A  B4D8               	btfsc	status,2,c
  5453  00200C  D007               	goto	l4027
  5454  00200E  D7E1               	goto	l4019
  5455  002010                     l4025:
  5456  002010  060C               	decf	___xxtofl@exp,f,c
  5457  002012  90D8               	bcf	status,0,c
  5458  002014  360D               	rlcf	___xxtofl@arg,f,c
  5459  002016  360E               	rlcf	___xxtofl@arg+1,f,c
  5460  002018  360F               	rlcf	___xxtofl@arg+2,f,c
  5461  00201A  3610               	rlcf	___xxtofl@arg+3,f,c
  5462  00201C                     l4027:
  5463  00201C  BE0F               	btfsc	___xxtofl@arg+2,7,c
  5464  00201E  D003               	goto	u4170
  5465  002020  0E02               	movlw	2
  5466  002022  600C               	cpfslt	___xxtofl@exp,c
  5467  002024  D7F5               	goto	l4025
  5468  002026                     u4170:
  5469  002026  A00C               	btfss	___xxtofl@exp,0,c
  5470  002028  9E0F               	bcf	___xxtofl@arg+2,7,c
  5471  00202A  90D8               	bcf	status,0,c
  5472  00202C  320C               	rrcf	___xxtofl@exp,f,c
  5473  00202E  C00C  F007         	movff	___xxtofl@exp,??___xxtofl
  5474  002032  6A08               	clrf	(??___xxtofl+1)& (0+255),c
  5475  002034  6A09               	clrf	(??___xxtofl+2)& (0+255),c
  5476  002036  6A0A               	clrf	(??___xxtofl+3)& (0+255),c
  5477  002038  C007  F00A         	movff	??___xxtofl,??___xxtofl+3
  5478  00203C  6A09               	clrf	??___xxtofl+2,c
  5479  00203E  6A08               	clrf	??___xxtofl+1,c
  5480  002040  6A07               	clrf	??___xxtofl,c
  5481  002042  5007               	movf	??___xxtofl,w,c
  5482  002044  120D               	iorwf	___xxtofl@arg,f,c
  5483  002046  5008               	movf	??___xxtofl+1,w,c
  5484  002048  120E               	iorwf	___xxtofl@arg+1,f,c
  5485  00204A  5009               	movf	??___xxtofl+2,w,c
  5486  00204C  120F               	iorwf	___xxtofl@arg+2,f,c
  5487  00204E  500A               	movf	??___xxtofl+3,w,c
  5488  002050  1210               	iorwf	___xxtofl@arg+3,f,c
  5489  002052  500B               	movf	___xxtofl@sign,w,c
  5490  002054  A4D8               	btfss	status,2,c
  5491  002056  AE06               	btfss	___xxtofl@val+3,7,c
  5492  002058  D001               	goto	l4043
  5493  00205A  8E10               	bsf	___xxtofl@arg+3,7,c
  5494  00205C                     l4043:
  5495  00205C  C00D  F003         	movff	___xxtofl@arg,?___xxtofl
  5496  002060  C00E  F004         	movff	___xxtofl@arg+1,?___xxtofl+1
  5497  002064  C00F  F005         	movff	___xxtofl@arg+2,?___xxtofl+2
  5498  002068  C010  F006         	movff	___xxtofl@arg+3,?___xxtofl+3
  5499  00206C  0012               	return		;funcret
  5500  00206E                     __end_of___xxtofl:
  5501                           	opt callstack 0
  5502                           
  5503 ;; *************** function ___wmul *****************
  5504 ;; Defined at:
  5505 ;;		line 15 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/Umul16.c"
  5506 ;; Parameters:    Size  Location     Type
  5507 ;;  multiplier      2    2[COMRAM] unsigned int 
  5508 ;;  multiplicand    2    4[COMRAM] unsigned int 
  5509 ;; Auto vars:     Size  Location     Type
  5510 ;;  product         2    6[COMRAM] unsigned int 
  5511 ;; Return value:  Size  Location     Type
  5512 ;;                  2    2[COMRAM] unsigned int 
  5513 ;; Registers used:
  5514 ;;		wreg, status,2, status,0, prodl, prodh
  5515 ;; Tracked objects:
  5516 ;;		On entry : 0/0
  5517 ;;		On exit  : 0/0
  5518 ;;		Unchanged: 0/0
  5519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5520 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5521 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5523 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5524 ;;Total ram usage:        6 bytes
  5525 ;; Hardware stack levels used:    1
  5526 ;; Hardware stack levels required when called:    2
  5527 ;; This function calls:
  5528 ;;		Nothing
  5529 ;; This function is called by:
  5530 ;;		_sprintf
  5531 ;; This function uses a non-reentrant model
  5532 ;;
  5533                           
  5534                           	psect	text16
  5535  002B2A                     __ptext16:
  5536                           	opt callstack 0
  5537  002B2A                     ___wmul:
  5538                           	opt callstack 25
  5539                           
  5540                           ;incstack = 0
  5541  002B2A  5003               	movf	___wmul@multiplier,w,c
  5542  002B2C  0205               	mulwf	___wmul@multiplicand,c
  5543  002B2E  CFF3 F007          	movff	prodl,___wmul@product
  5544  002B32  CFF4 F008          	movff	prodh,___wmul@product+1
  5545  002B36  5003               	movf	___wmul@multiplier,w,c
  5546  002B38  0206               	mulwf	___wmul@multiplicand+1,c
  5547  002B3A  50F3               	movf	prodl,w,c
  5548  002B3C  2608               	addwf	___wmul@product+1,f,c
  5549  002B3E  5004               	movf	___wmul@multiplier+1,w,c
  5550  002B40  0205               	mulwf	___wmul@multiplicand,c
  5551  002B42  50F3               	movf	prodl,w,c
  5552  002B44  2608               	addwf	___wmul@product+1,f,c
  5553  002B46  C007  F003         	movff	___wmul@product,?___wmul
  5554  002B4A  C008  F004         	movff	___wmul@product+1,?___wmul+1
  5555  002B4E  0012               	return		;funcret
  5556  002B50                     __end_of___wmul:
  5557                           	opt callstack 0
  5558                           
  5559 ;; *************** function ___llmod *****************
  5560 ;; Defined at:
  5561 ;;		line 7 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/llmod.c"
  5562 ;; Parameters:    Size  Location     Type
  5563 ;;  dividend        4    2[COMRAM] unsigned long 
  5564 ;;  divisor         4    6[COMRAM] unsigned long 
  5565 ;; Auto vars:     Size  Location     Type
  5566 ;;  counter         1   10[COMRAM] unsigned char 
  5567 ;; Return value:  Size  Location     Type
  5568 ;;                  4    2[COMRAM] unsigned long 
  5569 ;; Registers used:
  5570 ;;		wreg, status,2, status,0
  5571 ;; Tracked objects:
  5572 ;;		On entry : 0/0
  5573 ;;		On exit  : 0/0
  5574 ;;		Unchanged: 0/0
  5575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5576 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5577 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5579 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5580 ;;Total ram usage:        9 bytes
  5581 ;; Hardware stack levels used:    1
  5582 ;; Hardware stack levels required when called:    2
  5583 ;; This function calls:
  5584 ;;		Nothing
  5585 ;; This function is called by:
  5586 ;;		_sprintf
  5587 ;; This function uses a non-reentrant model
  5588 ;;
  5589                           
  5590                           	psect	text17
  5591  002864                     __ptext17:
  5592                           	opt callstack 0
  5593  002864                     ___llmod:
  5594                           	opt callstack 25
  5595                           
  5596                           ;incstack = 0
  5597  002864  5007               	movf	___llmod@divisor,w,c
  5598  002866  1008               	iorwf	___llmod@divisor+1,w,c
  5599  002868  1009               	iorwf	___llmod@divisor+2,w,c
  5600  00286A  100A               	iorwf	___llmod@divisor+3,w,c
  5601  00286C  B4D8               	btfsc	status,2,c
  5602  00286E  D024               	goto	l963
  5603  002870  0E01               	movlw	1
  5604  002872  6E0B               	movwf	___llmod@counter,c
  5605  002874  D006               	goto	l3991
  5606  002876                     l3989:
  5607  002876  90D8               	bcf	status,0,c
  5608  002878  3607               	rlcf	___llmod@divisor,f,c
  5609  00287A  3608               	rlcf	___llmod@divisor+1,f,c
  5610  00287C  3609               	rlcf	___llmod@divisor+2,f,c
  5611  00287E  360A               	rlcf	___llmod@divisor+3,f,c
  5612  002880  2A0B               	incf	___llmod@counter,f,c
  5613  002882                     l3991:
  5614  002882  AE0A               	btfss	___llmod@divisor+3,7,c
  5615  002884  D7F8               	goto	l3989
  5616  002886                     u4090:
  5617  002886  5007               	movf	___llmod@divisor,w,c
  5618  002888  5C03               	subwf	___llmod@dividend,w,c
  5619  00288A  5008               	movf	___llmod@divisor+1,w,c
  5620  00288C  5804               	subwfb	___llmod@dividend+1,w,c
  5621  00288E  5009               	movf	___llmod@divisor+2,w,c
  5622  002890  5805               	subwfb	___llmod@dividend+2,w,c
  5623  002892  500A               	movf	___llmod@divisor+3,w,c
  5624  002894  5806               	subwfb	___llmod@dividend+3,w,c
  5625  002896  A0D8               	btfss	status,0,c
  5626  002898  D008               	goto	l3997
  5627  00289A  5007               	movf	___llmod@divisor,w,c
  5628  00289C  5E03               	subwf	___llmod@dividend,f,c
  5629  00289E  5008               	movf	___llmod@divisor+1,w,c
  5630  0028A0  5A04               	subwfb	___llmod@dividend+1,f,c
  5631  0028A2  5009               	movf	___llmod@divisor+2,w,c
  5632  0028A4  5A05               	subwfb	___llmod@dividend+2,f,c
  5633  0028A6  500A               	movf	___llmod@divisor+3,w,c
  5634  0028A8  5A06               	subwfb	___llmod@dividend+3,f,c
  5635  0028AA                     l3997:
  5636  0028AA  90D8               	bcf	status,0,c
  5637  0028AC  320A               	rrcf	___llmod@divisor+3,f,c
  5638  0028AE  3209               	rrcf	___llmod@divisor+2,f,c
  5639  0028B0  3208               	rrcf	___llmod@divisor+1,f,c
  5640  0028B2  3207               	rrcf	___llmod@divisor,f,c
  5641  0028B4  2E0B               	decfsz	___llmod@counter,f,c
  5642  0028B6  D7E7               	goto	u4090
  5643  0028B8                     l963:
  5644  0028B8  C003  F003         	movff	___llmod@dividend,?___llmod
  5645  0028BC  C004  F004         	movff	___llmod@dividend+1,?___llmod+1
  5646  0028C0  C005  F005         	movff	___llmod@dividend+2,?___llmod+2
  5647  0028C4  C006  F006         	movff	___llmod@dividend+3,?___llmod+3
  5648  0028C8  0012               	return		;funcret
  5649  0028CA                     __end_of___llmod:
  5650                           	opt callstack 0
  5651                           
  5652 ;; *************** function ___lldiv *****************
  5653 ;; Defined at:
  5654 ;;		line 7 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/__lldiv.c"
  5655 ;; Parameters:    Size  Location     Type
  5656 ;;  dividend        4    2[COMRAM] unsigned long 
  5657 ;;  divisor         4    6[COMRAM] unsigned long 
  5658 ;; Auto vars:     Size  Location     Type
  5659 ;;  quotient        4   10[COMRAM] unsigned long 
  5660 ;;  counter         1   14[COMRAM] unsigned char 
  5661 ;; Return value:  Size  Location     Type
  5662 ;;                  4    2[COMRAM] unsigned long 
  5663 ;; Registers used:
  5664 ;;		wreg, status,2, status,0
  5665 ;; Tracked objects:
  5666 ;;		On entry : 0/0
  5667 ;;		On exit  : 0/0
  5668 ;;		Unchanged: 0/0
  5669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5670 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5671 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5673 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5674 ;;Total ram usage:       13 bytes
  5675 ;; Hardware stack levels used:    1
  5676 ;; Hardware stack levels required when called:    2
  5677 ;; This function calls:
  5678 ;;		Nothing
  5679 ;; This function is called by:
  5680 ;;		_sprintf
  5681 ;; This function uses a non-reentrant model
  5682 ;;
  5683                           
  5684                           	psect	text18
  5685  00260C                     __ptext18:
  5686                           	opt callstack 0
  5687  00260C                     ___lldiv:
  5688                           	opt callstack 25
  5689                           
  5690                           ;incstack = 0
  5691  00260C  0E00               	movlw	0
  5692  00260E  6E0B               	movwf	___lldiv@quotient,c
  5693  002610  0E00               	movlw	0
  5694  002612  6E0C               	movwf	___lldiv@quotient+1,c
  5695  002614  0E00               	movlw	0
  5696  002616  6E0D               	movwf	___lldiv@quotient+2,c
  5697  002618  0E00               	movlw	0
  5698  00261A  6E0E               	movwf	___lldiv@quotient+3,c
  5699  00261C  5007               	movf	___lldiv@divisor,w,c
  5700  00261E  1008               	iorwf	___lldiv@divisor+1,w,c
  5701  002620  1009               	iorwf	___lldiv@divisor+2,w,c
  5702  002622  100A               	iorwf	___lldiv@divisor+3,w,c
  5703  002624  B4D8               	btfsc	status,2,c
  5704  002626  D02A               	goto	l548
  5705  002628  0E01               	movlw	1
  5706  00262A  6E0F               	movwf	___lldiv@counter,c
  5707  00262C  D006               	goto	l3875
  5708  00262E                     l3873:
  5709  00262E  90D8               	bcf	status,0,c
  5710  002630  3607               	rlcf	___lldiv@divisor,f,c
  5711  002632  3608               	rlcf	___lldiv@divisor+1,f,c
  5712  002634  3609               	rlcf	___lldiv@divisor+2,f,c
  5713  002636  360A               	rlcf	___lldiv@divisor+3,f,c
  5714  002638  2A0F               	incf	___lldiv@counter,f,c
  5715  00263A                     l3875:
  5716  00263A  AE0A               	btfss	___lldiv@divisor+3,7,c
  5717  00263C  D7F8               	goto	l3873
  5718  00263E                     u3900:
  5719  00263E  90D8               	bcf	status,0,c
  5720  002640  360B               	rlcf	___lldiv@quotient,f,c
  5721  002642  360C               	rlcf	___lldiv@quotient+1,f,c
  5722  002644  360D               	rlcf	___lldiv@quotient+2,f,c
  5723  002646  360E               	rlcf	___lldiv@quotient+3,f,c
  5724  002648  5007               	movf	___lldiv@divisor,w,c
  5725  00264A  5C03               	subwf	___lldiv@dividend,w,c
  5726  00264C  5008               	movf	___lldiv@divisor+1,w,c
  5727  00264E  5804               	subwfb	___lldiv@dividend+1,w,c
  5728  002650  5009               	movf	___lldiv@divisor+2,w,c
  5729  002652  5805               	subwfb	___lldiv@dividend+2,w,c
  5730  002654  500A               	movf	___lldiv@divisor+3,w,c
  5731  002656  5806               	subwfb	___lldiv@dividend+3,w,c
  5732  002658  A0D8               	btfss	status,0,c
  5733  00265A  D009               	goto	l3885
  5734  00265C  5007               	movf	___lldiv@divisor,w,c
  5735  00265E  5E03               	subwf	___lldiv@dividend,f,c
  5736  002660  5008               	movf	___lldiv@divisor+1,w,c
  5737  002662  5A04               	subwfb	___lldiv@dividend+1,f,c
  5738  002664  5009               	movf	___lldiv@divisor+2,w,c
  5739  002666  5A05               	subwfb	___lldiv@dividend+2,f,c
  5740  002668  500A               	movf	___lldiv@divisor+3,w,c
  5741  00266A  5A06               	subwfb	___lldiv@dividend+3,f,c
  5742  00266C  800B               	bsf	___lldiv@quotient,0,c
  5743  00266E                     l3885:
  5744  00266E  90D8               	bcf	status,0,c
  5745  002670  320A               	rrcf	___lldiv@divisor+3,f,c
  5746  002672  3209               	rrcf	___lldiv@divisor+2,f,c
  5747  002674  3208               	rrcf	___lldiv@divisor+1,f,c
  5748  002676  3207               	rrcf	___lldiv@divisor,f,c
  5749  002678  2E0F               	decfsz	___lldiv@counter,f,c
  5750  00267A  D7E1               	goto	u3900
  5751  00267C                     l548:
  5752  00267C  C00B  F003         	movff	___lldiv@quotient,?___lldiv
  5753  002680  C00C  F004         	movff	___lldiv@quotient+1,?___lldiv+1
  5754  002684  C00D  F005         	movff	___lldiv@quotient+2,?___lldiv+2
  5755  002688  C00E  F006         	movff	___lldiv@quotient+3,?___lldiv+3
  5756  00268C  0012               	return		;funcret
  5757  00268E                     __end_of___lldiv:
  5758                           	opt callstack 0
  5759                           
  5760 ;; *************** function ___fltol *****************
  5761 ;; Defined at:
  5762 ;;		line 43 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/fltol.c"
  5763 ;; Parameters:    Size  Location     Type
  5764 ;;  f1              4   41[COMRAM] unsigned long 
  5765 ;; Auto vars:     Size  Location     Type
  5766 ;;  exp1            1   50[COMRAM] unsigned char 
  5767 ;;  sign1           1   49[COMRAM] unsigned char 
  5768 ;; Return value:  Size  Location     Type
  5769 ;;                  4   41[COMRAM] long 
  5770 ;; Registers used:
  5771 ;;		wreg, status,2, status,0
  5772 ;; Tracked objects:
  5773 ;;		On entry : 0/0
  5774 ;;		On exit  : 0/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5777 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5778 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5779 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5780 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5781 ;;Total ram usage:       10 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:    2
  5784 ;; This function calls:
  5785 ;;		Nothing
  5786 ;; This function is called by:
  5787 ;;		_sprintf
  5788 ;; This function uses a non-reentrant model
  5789 ;;
  5790                           
  5791                           	psect	text19
  5792  002444                     __ptext19:
  5793                           	opt callstack 0
  5794  002444                     ___fltol:
  5795                           	opt callstack 25
  5796                           
  5797                           ;incstack = 0
  5798  002444  342C               	rlcf	___fltol@f1+2,w,c
  5799  002446  342D               	rlcf	___fltol@f1+3,w,c
  5800  002448  6E33               	movwf	___fltol@exp1,c
  5801  00244A  5033               	movf	___fltol@exp1,w,c
  5802  00244C  A4D8               	btfss	status,2,c
  5803  00244E  D009               	goto	l3947
  5804  002450                     u4010:
  5805  002450  0E00               	movlw	0
  5806  002452  6E2A               	movwf	?___fltol,c
  5807  002454  0E00               	movlw	0
  5808  002456  6E2B               	movwf	?___fltol+1,c
  5809  002458  0E00               	movlw	0
  5810  00245A  6E2C               	movwf	?___fltol+2,c
  5811  00245C  0E00               	movlw	0
  5812  00245E  6E2D               	movwf	?___fltol+3,c
  5813  002460  0012               	return	
  5814  002462                     l3947:
  5815  002462  C02A  F02E         	movff	___fltol@f1,??___fltol
  5816  002466  C02B  F02F         	movff	___fltol@f1+1,??___fltol+1
  5817  00246A  C02C  F030         	movff	___fltol@f1+2,??___fltol+2
  5818  00246E  C02D  F031         	movff	___fltol@f1+3,??___fltol+3
  5819  002472  0E20               	movlw	32
  5820  002474  D005               	goto	u4020
  5821  002476                     u4025:
  5822  002476  90D8               	bcf	status,0,c
  5823  002478  3231               	rrcf	??___fltol+3,f,c
  5824  00247A  3230               	rrcf	??___fltol+2,f,c
  5825  00247C  322F               	rrcf	??___fltol+1,f,c
  5826  00247E  322E               	rrcf	??___fltol,f,c
  5827  002480                     u4020:
  5828  002480  2EE8               	decfsz	wreg,f,c
  5829  002482  D7F9               	goto	u4025
  5830  002484  502E               	movf	??___fltol,w,c
  5831  002486  6E32               	movwf	___fltol@sign1,c
  5832  002488  8E2C               	bsf	___fltol@f1+2,7,c
  5833  00248A  0EFF               	movlw	255
  5834  00248C  162A               	andwf	___fltol@f1,f,c
  5835  00248E  0EFF               	movlw	255
  5836  002490  162B               	andwf	___fltol@f1+1,f,c
  5837  002492  0EFF               	movlw	255
  5838  002494  162C               	andwf	___fltol@f1+2,f,c
  5839  002496  0E00               	movlw	0
  5840  002498  162D               	andwf	___fltol@f1+3,f,c
  5841  00249A  0E96               	movlw	150
  5842  00249C  5E33               	subwf	___fltol@exp1,f,c
  5843  00249E  AE33               	btfss	___fltol@exp1,7,c
  5844  0024A0  D00D               	goto	l3967
  5845  0024A2  5033               	movf	___fltol@exp1,w,c
  5846  0024A4  0A80               	xorlw	128
  5847  0024A6  0F97               	addlw	151
  5848  0024A8  A0D8               	btfss	status,0,c
  5849  0024AA  D7D2               	goto	u4010
  5850  0024AC                     l3963:
  5851  0024AC  90D8               	bcf	status,0,c
  5852  0024AE  322D               	rrcf	___fltol@f1+3,f,c
  5853  0024B0  322C               	rrcf	___fltol@f1+2,f,c
  5854  0024B2  322B               	rrcf	___fltol@f1+1,f,c
  5855  0024B4  322A               	rrcf	___fltol@f1,f,c
  5856  0024B6  3E33               	incfsz	___fltol@exp1,f,c
  5857  0024B8  D7F9               	goto	l3963
  5858  0024BA  D00D               	goto	u4060
  5859  0024BC                     l3967:
  5860  0024BC  0E1F               	movlw	31
  5861  0024BE  6433               	cpfsgt	___fltol@exp1,c
  5862  0024C0  D007               	goto	l3975
  5863  0024C2  D7C6               	goto	u4010
  5864  0024C4                     l3973:
  5865  0024C4  90D8               	bcf	status,0,c
  5866  0024C6  362A               	rlcf	___fltol@f1,f,c
  5867  0024C8  362B               	rlcf	___fltol@f1+1,f,c
  5868  0024CA  362C               	rlcf	___fltol@f1+2,f,c
  5869  0024CC  362D               	rlcf	___fltol@f1+3,f,c
  5870  0024CE  0633               	decf	___fltol@exp1,f,c
  5871  0024D0                     l3975:
  5872  0024D0  5033               	movf	___fltol@exp1,w,c
  5873  0024D2  A4D8               	btfss	status,2,c
  5874  0024D4  D7F7               	goto	l3973
  5875  0024D6                     u4060:
  5876  0024D6  5032               	movf	___fltol@sign1,w,c
  5877  0024D8  B4D8               	btfsc	status,2,c
  5878  0024DA  D008               	goto	l3981
  5879  0024DC  1E2D               	comf	___fltol@f1+3,f,c
  5880  0024DE  1E2C               	comf	___fltol@f1+2,f,c
  5881  0024E0  1E2B               	comf	___fltol@f1+1,f,c
  5882  0024E2  6C2A               	negf	___fltol@f1,c
  5883  0024E4  0E00               	movlw	0
  5884  0024E6  222B               	addwfc	___fltol@f1+1,f,c
  5885  0024E8  222C               	addwfc	___fltol@f1+2,f,c
  5886  0024EA  222D               	addwfc	___fltol@f1+3,f,c
  5887  0024EC                     l3981:
  5888  0024EC  C02A  F02A         	movff	___fltol@f1,?___fltol
  5889  0024F0  C02B  F02B         	movff	___fltol@f1+1,?___fltol+1
  5890  0024F4  C02C  F02C         	movff	___fltol@f1+2,?___fltol+2
  5891  0024F8  C02D  F02D         	movff	___fltol@f1+3,?___fltol+3
  5892  0024FC  0012               	return		;funcret
  5893  0024FE                     __end_of___fltol:
  5894                           	opt callstack 0
  5895                           
  5896 ;; *************** function ___flsub *****************
  5897 ;; Defined at:
  5898 ;;		line 245 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/sprcadd.c"
  5899 ;; Parameters:    Size  Location     Type
  5900 ;;  b               4   70[COMRAM] long 
  5901 ;;  a               4   74[COMRAM] long 
  5902 ;; Auto vars:     Size  Location     Type
  5903 ;;		None
  5904 ;; Return value:  Size  Location     Type
  5905 ;;                  4   70[COMRAM] long 
  5906 ;; Registers used:
  5907 ;;		wreg, status,2, status,0, cstack
  5908 ;; Tracked objects:
  5909 ;;		On entry : 0/0
  5910 ;;		On exit  : 0/0
  5911 ;;		Unchanged: 0/0
  5912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5913 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5916 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5917 ;;Total ram usage:        8 bytes
  5918 ;; Hardware stack levels used:    1
  5919 ;; Hardware stack levels required when called:    3
  5920 ;; This function calls:
  5921 ;;		___fladd
  5922 ;; This function is called by:
  5923 ;;		_sprintf
  5924 ;; This function uses a non-reentrant model
  5925 ;;
  5926                           
  5927                           	psect	text20
  5928  002A74                     __ptext20:
  5929                           	opt callstack 0
  5930  002A74                     ___flsub:
  5931                           	opt callstack 24
  5932                           
  5933                           ;incstack = 0
  5934  002A74  0E00               	movlw	0
  5935  002A76  1A4B               	xorwf	___flsub@a,f,c
  5936  002A78  0E00               	movlw	0
  5937  002A7A  1A4C               	xorwf	___flsub@a+1,f,c
  5938  002A7C  0E00               	movlw	0
  5939  002A7E  1A4D               	xorwf	___flsub@a+2,f,c
  5940  002A80  0E80               	movlw	128
  5941  002A82  1A4E               	xorwf	___flsub@a+3,f,c
  5942  002A84  C047  F037         	movff	___flsub@b,___fladd@b
  5943  002A88  C048  F038         	movff	___flsub@b+1,___fladd@b+1
  5944  002A8C  C049  F039         	movff	___flsub@b+2,___fladd@b+2
  5945  002A90  C04A  F03A         	movff	___flsub@b+3,___fladd@b+3
  5946  002A94  C04B  F03B         	movff	___flsub@a,___fladd@a
  5947  002A98  C04C  F03C         	movff	___flsub@a+1,___fladd@a+1
  5948  002A9C  C04D  F03D         	movff	___flsub@a+2,___fladd@a+2
  5949  002AA0  C04E  F03E         	movff	___flsub@a+3,___fladd@a+3
  5950  002AA4  ECA0  F007         	call	___fladd	;wreg free
  5951  002AA8  C037  F047         	movff	?___fladd,?___flsub
  5952  002AAC  C038  F048         	movff	?___fladd+1,?___flsub+1
  5953  002AB0  C039  F049         	movff	?___fladd+2,?___flsub+2
  5954  002AB4  C03A  F04A         	movff	?___fladd+3,?___flsub+3
  5955  002AB8  0012               	return		;funcret
  5956  002ABA                     __end_of___flsub:
  5957                           	opt callstack 0
  5958                           
  5959 ;; *************** function ___fladd *****************
  5960 ;; Defined at:
  5961 ;;		line 10 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/sprcadd.c"
  5962 ;; Parameters:    Size  Location     Type
  5963 ;;  b               4   54[COMRAM] long 
  5964 ;;  a               4   58[COMRAM] long 
  5965 ;; Auto vars:     Size  Location     Type
  5966 ;;  grs             1   69[COMRAM] unsigned char 
  5967 ;;  bexp            1   68[COMRAM] unsigned char 
  5968 ;;  aexp            1   67[COMRAM] unsigned char 
  5969 ;;  signs           1   66[COMRAM] unsigned char 
  5970 ;; Return value:  Size  Location     Type
  5971 ;;                  4   54[COMRAM] unsigned char 
  5972 ;; Registers used:
  5973 ;;		wreg, status,2, status,0
  5974 ;; Tracked objects:
  5975 ;;		On entry : 0/0
  5976 ;;		On exit  : 0/0
  5977 ;;		Unchanged: 0/0
  5978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5979 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5980 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5981 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5982 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5983 ;;Total ram usage:       16 bytes
  5984 ;; Hardware stack levels used:    1
  5985 ;; Hardware stack levels required when called:    2
  5986 ;; This function calls:
  5987 ;;		Nothing
  5988 ;; This function is called by:
  5989 ;;		_sprintf
  5990 ;;		___flsub
  5991 ;; This function uses a non-reentrant model
  5992 ;;
  5993                           
  5994                           	psect	text21
  5995  000F40                     __ptext21:
  5996                           	opt callstack 0
  5997  000F40                     ___fladd:
  5998                           	opt callstack 24
  5999                           
  6000                           ;incstack = 0
  6001  000F40  503A               	movf	___fladd@b+3,w,c
  6002  000F42  0B80               	andlw	128
  6003  000F44  6E43               	movwf	___fladd@signs,c
  6004  000F46  503A               	movf	___fladd@b+3,w,c
  6005  000F48  243A               	addwf	___fladd@b+3,w,c
  6006  000F4A  6E45               	movwf	___fladd@bexp,c
  6007  000F4C  BE39               	btfsc	___fladd@b+2,7,c
  6008  000F4E  8045               	bsf	___fladd@bexp,0,c
  6009  000F50  5045               	movf	___fladd@bexp,w,c
  6010  000F52  B4D8               	btfsc	status,2,c
  6011  000F54  D00D               	goto	l3183
  6012  000F56  2845               	incf	___fladd@bexp,w,c
  6013  000F58  A4D8               	btfss	status,2,c
  6014  000F5A  D008               	goto	l3179
  6015  000F5C  0E00               	movlw	0
  6016  000F5E  6E37               	movwf	___fladd@b,c
  6017  000F60  0E00               	movlw	0
  6018  000F62  6E38               	movwf	___fladd@b+1,c
  6019  000F64  0E00               	movlw	0
  6020  000F66  6E39               	movwf	___fladd@b+2,c
  6021  000F68  0E00               	movlw	0
  6022  000F6A  6E3A               	movwf	___fladd@b+3,c
  6023  000F6C                     l3179:
  6024  000F6C  8E39               	bsf	___fladd@b+2,7,c
  6025  000F6E  D006               	goto	L4
  6026  000F70                     l3183:
  6027  000F70  0E00               	movlw	0
  6028  000F72  6E37               	movwf	___fladd@b,c
  6029  000F74  0E00               	movlw	0
  6030  000F76  6E38               	movwf	___fladd@b+1,c
  6031  000F78  0E00               	movlw	0
  6032  000F7A  6E39               	movwf	___fladd@b+2,c
  6033  000F7C                     L4:
  6034  000F7C  0E00               	movlw	0
  6035  000F7E  6E3A               	movwf	___fladd@b+3,c
  6036  000F80  503E               	movf	___fladd@a+3,w,c
  6037  000F82  0B80               	andlw	128
  6038  000F84  6E44               	movwf	___fladd@aexp,c
  6039  000F86  5043               	movf	___fladd@signs,w,c
  6040  000F88  1844               	xorwf	___fladd@aexp,w,c
  6041  000F8A  A4D8               	btfss	status,2,c
  6042  000F8C  8C43               	bsf	___fladd@signs,6,c
  6043  000F8E  503E               	movf	___fladd@a+3,w,c
  6044  000F90  243E               	addwf	___fladd@a+3,w,c
  6045  000F92  6E44               	movwf	___fladd@aexp,c
  6046  000F94  BE3D               	btfsc	___fladd@a+2,7,c
  6047  000F96  8044               	bsf	___fladd@aexp,0,c
  6048  000F98  5044               	movf	___fladd@aexp,w,c
  6049  000F9A  B4D8               	btfsc	status,2,c
  6050  000F9C  D00D               	goto	l3207
  6051  000F9E  2844               	incf	___fladd@aexp,w,c
  6052  000FA0  A4D8               	btfss	status,2,c
  6053  000FA2  D008               	goto	l3203
  6054  000FA4  0E00               	movlw	0
  6055  000FA6  6E3B               	movwf	___fladd@a,c
  6056  000FA8  0E00               	movlw	0
  6057  000FAA  6E3C               	movwf	___fladd@a+1,c
  6058  000FAC  0E00               	movlw	0
  6059  000FAE  6E3D               	movwf	___fladd@a+2,c
  6060  000FB0  0E00               	movlw	0
  6061  000FB2  6E3E               	movwf	___fladd@a+3,c
  6062  000FB4                     l3203:
  6063  000FB4  8E3D               	bsf	___fladd@a+2,7,c
  6064  000FB6  D006               	goto	L5
  6065  000FB8                     l3207:
  6066  000FB8  0E00               	movlw	0
  6067  000FBA  6E3B               	movwf	___fladd@a,c
  6068  000FBC  0E00               	movlw	0
  6069  000FBE  6E3C               	movwf	___fladd@a+1,c
  6070  000FC0  0E00               	movlw	0
  6071  000FC2  6E3D               	movwf	___fladd@a+2,c
  6072  000FC4                     L5:
  6073  000FC4  0E00               	movlw	0
  6074  000FC6  6E3E               	movwf	___fladd@a+3,c
  6075  000FC8  5045               	movf	___fladd@bexp,w,c
  6076  000FCA  5C44               	subwf	___fladd@aexp,w,c
  6077  000FCC  B0D8               	btfsc	status,0,c
  6078  000FCE  D022               	goto	l3245
  6079  000FD0  AC43               	btfss	___fladd@signs,6,c
  6080  000FD2  D002               	goto	l3215
  6081  000FD4  0E80               	movlw	128
  6082  000FD6  1A43               	xorwf	___fladd@signs,f,c
  6083  000FD8                     l3215:
  6084  000FD8  C045  F046         	movff	___fladd@bexp,___fladd@grs
  6085  000FDC  C044  F045         	movff	___fladd@aexp,___fladd@bexp
  6086  000FE0  C046  F044         	movff	___fladd@grs,___fladd@aexp
  6087  000FE4  C037  F046         	movff	___fladd@b,___fladd@grs
  6088  000FE8  C03B  F037         	movff	___fladd@a,___fladd@b
  6089  000FEC  C046  F03B         	movff	___fladd@grs,___fladd@a
  6090  000FF0  C038  F046         	movff	___fladd@b+1,___fladd@grs
  6091  000FF4  C03C  F038         	movff	___fladd@a+1,___fladd@b+1
  6092  000FF8  C046  F03C         	movff	___fladd@grs,___fladd@a+1
  6093  000FFC  C039  F046         	movff	___fladd@b+2,___fladd@grs
  6094  001000  C03D  F039         	movff	___fladd@a+2,___fladd@b+2
  6095  001004  C046  F03D         	movff	___fladd@grs,___fladd@a+2
  6096  001008  C03A  F046         	movff	___fladd@b+3,___fladd@grs
  6097  00100C  C03E  F03A         	movff	___fladd@a+3,___fladd@b+3
  6098  001010  C046  F03E         	movff	___fladd@grs,___fladd@a+3
  6099  001014                     l3245:
  6100  001014  0E00               	movlw	0
  6101  001016  6E46               	movwf	___fladd@grs,c
  6102  001018  5045               	movf	___fladd@bexp,w,c
  6103  00101A  C044  F03F         	movff	___fladd@aexp,??___fladd
  6104  00101E  6A40               	clrf	(??___fladd+1)& (0+255),c
  6105  001020  5E3F               	subwf	??___fladd,f,c
  6106  001022  0E00               	movlw	0
  6107  001024  5A40               	subwfb	??___fladd+1,f,c
  6108  001026  BE40               	btfsc	??___fladd+1,7,c
  6109  001028  D02C               	goto	l1072
  6110  00102A  5040               	movf	??___fladd+1,w,c
  6111  00102C  E104               	bnz	u2880
  6112  00102E  0E1A               	movlw	26
  6113  001030  5C3F               	subwf	??___fladd,w,c
  6114  001032  A0D8               	btfss	status,0,c
  6115  001034  D026               	goto	l1072
  6116  001036                     u2880:
  6117  001036  5037               	movf	___fladd@b,w,c
  6118  001038  1038               	iorwf	___fladd@b+1,w,c
  6119  00103A  1039               	iorwf	___fladd@b+2,w,c
  6120  00103C  103A               	iorwf	___fladd@b+3,w,c
  6121  00103E  B4D8               	btfsc	status,2,c
  6122  001040  D002               	goto	u2890
  6123  001042  0E01               	movlw	1
  6124  001044  D001               	goto	u2900
  6125  001046                     u2890:
  6126  001046  0E00               	movlw	0
  6127  001048                     u2900:
  6128  001048  6E46               	movwf	___fladd@grs,c
  6129  00104A  0E00               	movlw	0
  6130  00104C  6E37               	movwf	___fladd@b,c
  6131  00104E  0E00               	movlw	0
  6132  001050  6E38               	movwf	___fladd@b+1,c
  6133  001052  0E00               	movlw	0
  6134  001054  6E39               	movwf	___fladd@b+2,c
  6135  001056  0E00               	movlw	0
  6136  001058  6E3A               	movwf	___fladd@b+3,c
  6137  00105A  C044  F045         	movff	___fladd@aexp,___fladd@bexp
  6138  00105E  D015               	goto	u2930
  6139  001060                     l1073:
  6140  001060  A046               	btfss	___fladd@grs,0,c
  6141  001062  D005               	goto	l3257
  6142  001064  90D8               	bcf	status,0,c
  6143  001066  3046               	rrcf	___fladd@grs,w,c
  6144  001068  0901               	iorlw	1
  6145  00106A  6E46               	movwf	___fladd@grs,c
  6146  00106C  D002               	goto	l3259
  6147  00106E                     l3257:
  6148  00106E  90D8               	bcf	status,0,c
  6149  001070  3246               	rrcf	___fladd@grs,f,c
  6150  001072                     l3259:
  6151  001072  B037               	btfsc	___fladd@b,0,c
  6152  001074  8E46               	bsf	___fladd@grs,7,c
  6153  001076  343A               	rlcf	___fladd@b+3,w,c
  6154  001078  323A               	rrcf	___fladd@b+3,f,c
  6155  00107A  3239               	rrcf	___fladd@b+2,f,c
  6156  00107C  3238               	rrcf	___fladd@b+1,f,c
  6157  00107E  3237               	rrcf	___fladd@b,f,c
  6158  001080  2A45               	incf	___fladd@bexp,f,c
  6159  001082                     l1072:
  6160  001082  5044               	movf	___fladd@aexp,w,c
  6161  001084  5C45               	subwf	___fladd@bexp,w,c
  6162  001086  A0D8               	btfss	status,0,c
  6163  001088  D7EB               	goto	l1073
  6164  00108A                     u2930:
  6165  00108A  BC43               	btfsc	___fladd@signs,6,c
  6166  00108C  D028               	goto	l3291
  6167  00108E  5045               	movf	___fladd@bexp,w,c
  6168  001090  A4D8               	btfss	status,2,c
  6169  001092  D009               	goto	l3273
  6170  001094  0E00               	movlw	0
  6171  001096  6E37               	movwf	?___fladd,c
  6172  001098  0E00               	movlw	0
  6173  00109A  6E38               	movwf	?___fladd+1,c
  6174  00109C  0E00               	movlw	0
  6175  00109E  6E39               	movwf	?___fladd+2,c
  6176  0010A0  0E00               	movlw	0
  6177  0010A2  6E3A               	movwf	?___fladd+3,c
  6178  0010A4  0012               	return	
  6179  0010A6                     l3273:
  6180  0010A6  503B               	movf	___fladd@a,w,c
  6181  0010A8  2637               	addwf	___fladd@b,f,c
  6182  0010AA  503C               	movf	___fladd@a+1,w,c
  6183  0010AC  2238               	addwfc	___fladd@b+1,f,c
  6184  0010AE  503D               	movf	___fladd@a+2,w,c
  6185  0010B0  2239               	addwfc	___fladd@b+2,f,c
  6186  0010B2  503E               	movf	___fladd@a+3,w,c
  6187  0010B4  223A               	addwfc	___fladd@b+3,f,c
  6188  0010B6  A03A               	btfss	___fladd@b+3,0,c
  6189  0010B8  D071               	goto	u3060
  6190  0010BA  A046               	btfss	___fladd@grs,0,c
  6191  0010BC  D005               	goto	l3281
  6192  0010BE  90D8               	bcf	status,0,c
  6193  0010C0  3046               	rrcf	___fladd@grs,w,c
  6194  0010C2  0901               	iorlw	1
  6195  0010C4  6E46               	movwf	___fladd@grs,c
  6196  0010C6  D002               	goto	l3283
  6197  0010C8                     l3281:
  6198  0010C8  90D8               	bcf	status,0,c
  6199  0010CA  3246               	rrcf	___fladd@grs,f,c
  6200  0010CC                     l3283:
  6201  0010CC  B037               	btfsc	___fladd@b,0,c
  6202  0010CE  8E46               	bsf	___fladd@grs,7,c
  6203  0010D0  343A               	rlcf	___fladd@b+3,w,c
  6204  0010D2  323A               	rrcf	___fladd@b+3,f,c
  6205  0010D4  3239               	rrcf	___fladd@b+2,f,c
  6206  0010D6  3238               	rrcf	___fladd@b+1,f,c
  6207  0010D8  3237               	rrcf	___fladd@b,f,c
  6208  0010DA  2A45               	incf	___fladd@bexp,f,c
  6209  0010DC  D05F               	goto	u3060
  6210  0010DE                     l3291:
  6211  0010DE  503B               	movf	___fladd@a,w,c
  6212  0010E0  5C37               	subwf	___fladd@b,w,c
  6213  0010E2  503C               	movf	___fladd@a+1,w,c
  6214  0010E4  5838               	subwfb	___fladd@b+1,w,c
  6215  0010E6  503D               	movf	___fladd@a+2,w,c
  6216  0010E8  5839               	subwfb	___fladd@b+2,w,c
  6217  0010EA  503A               	movf	___fladd@b+3,w,c
  6218  0010EC  0A80               	xorlw	128
  6219  0010EE  6E3F               	movwf	??___fladd& (0+255),c
  6220  0010F0  503E               	movf	___fladd@a+3,w,c
  6221  0010F2  0A80               	xorlw	128
  6222  0010F4  583F               	subwfb	??___fladd& (0+255),w,c
  6223  0010F6  B0D8               	btfsc	status,0,c
  6224  0010F8  D025               	goto	l3301
  6225  0010FA  5037               	movf	___fladd@b,w,c
  6226  0010FC  5C3B               	subwf	___fladd@a,w,c
  6227  0010FE  6E3F               	movwf	??___fladd& (0+255),c
  6228  001100  5038               	movf	___fladd@b+1,w,c
  6229  001102  583C               	subwfb	___fladd@a+1,w,c
  6230  001104  6E40               	movwf	(??___fladd+1)& (0+255),c
  6231  001106  5039               	movf	___fladd@b+2,w,c
  6232  001108  583D               	subwfb	___fladd@a+2,w,c
  6233  00110A  6E41               	movwf	(??___fladd+2)& (0+255),c
  6234  00110C  503A               	movf	___fladd@b+3,w,c
  6235  00110E  583E               	subwfb	___fladd@a+3,w,c
  6236  001110  6E42               	movwf	(??___fladd+3)& (0+255),c
  6237  001112  0EFF               	movlw	255
  6238  001114  243F               	addwf	??___fladd,w,c
  6239  001116  6E37               	movwf	___fladd@b,c
  6240  001118  0EFF               	movlw	255
  6241  00111A  2040               	addwfc	??___fladd+1,w,c
  6242  00111C  6E38               	movwf	___fladd@b+1,c
  6243  00111E  0EFF               	movlw	255
  6244  001120  2041               	addwfc	??___fladd+2,w,c
  6245  001122  6E39               	movwf	___fladd@b+2,c
  6246  001124  0EFF               	movlw	255
  6247  001126  2042               	addwfc	??___fladd+3,w,c
  6248  001128  6E3A               	movwf	___fladd@b+3,c
  6249  00112A  0E80               	movlw	128
  6250  00112C  1A43               	xorwf	___fladd@signs,f,c
  6251  00112E  6C46               	negf	___fladd@grs,c
  6252  001130  5046               	movf	___fladd@grs,w,c
  6253  001132  A4D8               	btfss	status,2,c
  6254  001134  D00F               	goto	l1088
  6255  001136  0E01               	movlw	1
  6256  001138  2637               	addwf	___fladd@b,f,c
  6257  00113A  0E00               	movlw	0
  6258  00113C  2238               	addwfc	___fladd@b+1,f,c
  6259  00113E  2239               	addwfc	___fladd@b+2,f,c
  6260  001140  223A               	addwfc	___fladd@b+3,f,c
  6261  001142  D008               	goto	l1088
  6262  001144                     l3301:
  6263  001144  503B               	movf	___fladd@a,w,c
  6264  001146  5E37               	subwf	___fladd@b,f,c
  6265  001148  503C               	movf	___fladd@a+1,w,c
  6266  00114A  5A38               	subwfb	___fladd@b+1,f,c
  6267  00114C  503D               	movf	___fladd@a+2,w,c
  6268  00114E  5A39               	subwfb	___fladd@b+2,f,c
  6269  001150  503E               	movf	___fladd@a+3,w,c
  6270  001152  5A3A               	subwfb	___fladd@b+3,f,c
  6271  001154                     l1088:
  6272  001154  5037               	movf	___fladd@b,w,c
  6273  001156  1038               	iorwf	___fladd@b+1,w,c
  6274  001158  1039               	iorwf	___fladd@b+2,w,c
  6275  00115A  103A               	iorwf	___fladd@b+3,w,c
  6276  00115C  A4D8               	btfss	status,2,c
  6277  00115E  D01C               	goto	l3325
  6278  001160  5046               	movf	___fladd@grs,w,c
  6279  001162  A4D8               	btfss	status,2,c
  6280  001164  D019               	goto	l3325
  6281  001166  0E00               	movlw	0
  6282  001168  6E37               	movwf	?___fladd,c
  6283  00116A  0E00               	movlw	0
  6284  00116C  6E38               	movwf	?___fladd+1,c
  6285  00116E  0E00               	movlw	0
  6286  001170  6E39               	movwf	?___fladd+2,c
  6287  001172  0E00               	movlw	0
  6288  001174  6E3A               	movwf	?___fladd+3,c
  6289  001176  0012               	return	
  6290  001178                     l3309:
  6291  001178  90D8               	bcf	status,0,c
  6292  00117A  3637               	rlcf	___fladd@b,f,c
  6293  00117C  3638               	rlcf	___fladd@b+1,f,c
  6294  00117E  3639               	rlcf	___fladd@b+2,f,c
  6295  001180  363A               	rlcf	___fladd@b+3,f,c
  6296  001182  BE46               	btfsc	___fladd@grs,7,c
  6297  001184  8037               	bsf	___fladd@b,0,c
  6298  001186  A046               	btfss	___fladd@grs,0,c
  6299  001188  D002               	goto	l3319
  6300  00118A  80D8               	bsf	status,0,c
  6301  00118C  D001               	goto	L6
  6302  00118E                     l3319:
  6303  00118E  90D8               	bcf	status,0,c
  6304  001190                     L6:
  6305  001190  3646               	rlcf	___fladd@grs,f,c
  6306  001192  5045               	movf	___fladd@bexp,w,c
  6307  001194  A4D8               	btfss	status,2,c
  6308  001196  0645               	decf	___fladd@bexp,f,c
  6309  001198                     l3325:
  6310  001198  AE39               	btfss	___fladd@b+2,7,c
  6311  00119A  D7EE               	goto	l3309
  6312  00119C                     u3060:
  6313  00119C  0E00               	movlw	0
  6314  00119E  6E44               	movwf	___fladd@aexp,c
  6315  0011A0  AE46               	btfss	___fladd@grs,7,c
  6316  0011A2  D00B               	goto	l1097
  6317  0011A4  C046  F03F         	movff	___fladd@grs,??___fladd
  6318  0011A8  0E7F               	movlw	127
  6319  0011AA  163F               	andwf	??___fladd,f,c
  6320  0011AC  B4D8               	btfsc	status,2,c
  6321  0011AE  D003               	goto	l1098
  6322  0011B0                     u3080:
  6323  0011B0  0E01               	movlw	1
  6324  0011B2  6E44               	movwf	___fladd@aexp,c
  6325  0011B4  D002               	goto	l1097
  6326  0011B6                     l1098:
  6327  0011B6  B037               	btfsc	___fladd@b,0,c
  6328  0011B8  D7FB               	goto	u3080
  6329  0011BA                     l1097:
  6330  0011BA  5044               	movf	___fladd@aexp,w,c
  6331  0011BC  B4D8               	btfsc	status,2,c
  6332  0011BE  D020               	goto	l3345
  6333  0011C0  0E01               	movlw	1
  6334  0011C2  2637               	addwf	___fladd@b,f,c
  6335  0011C4  0E00               	movlw	0
  6336  0011C6  2238               	addwfc	___fladd@b+1,f,c
  6337  0011C8  2239               	addwfc	___fladd@b+2,f,c
  6338  0011CA  223A               	addwfc	___fladd@b+3,f,c
  6339  0011CC  A03A               	btfss	___fladd@b+3,0,c
  6340  0011CE  D018               	goto	l3345
  6341  0011D0  C037  F03F         	movff	___fladd@b,??___fladd
  6342  0011D4  C038  F040         	movff	___fladd@b+1,??___fladd+1
  6343  0011D8  C039  F041         	movff	___fladd@b+2,??___fladd+2
  6344  0011DC  C03A  F042         	movff	___fladd@b+3,??___fladd+3
  6345  0011E0  3442               	rlcf	??___fladd+3,w,c
  6346  0011E2  3242               	rrcf	??___fladd+3,f,c
  6347  0011E4  3241               	rrcf	??___fladd+2,f,c
  6348  0011E6  3240               	rrcf	??___fladd+1,f,c
  6349  0011E8  323F               	rrcf	??___fladd,f,c
  6350  0011EA  C03F  F037         	movff	??___fladd,___fladd@b
  6351  0011EE  C040  F038         	movff	??___fladd+1,___fladd@b+1
  6352  0011F2  C041  F039         	movff	??___fladd+2,___fladd@b+2
  6353  0011F6  C042  F03A         	movff	??___fladd+3,___fladd@b+3
  6354  0011FA  2845               	incf	___fladd@bexp,w,c
  6355  0011FC  A4D8               	btfss	status,2,c
  6356  0011FE  2A45               	incf	___fladd@bexp,f,c
  6357  001200                     l3345:
  6358  001200  2845               	incf	___fladd@bexp,w,c
  6359  001202  B4D8               	btfsc	status,2,c
  6360  001204  D003               	goto	u3140
  6361  001206  5045               	movf	___fladd@bexp,w,c
  6362  001208  A4D8               	btfss	status,2,c
  6363  00120A  D00D               	goto	l3353
  6364  00120C                     u3140:
  6365  00120C  0E00               	movlw	0
  6366  00120E  6E37               	movwf	___fladd@b,c
  6367  001210  0E00               	movlw	0
  6368  001212  6E38               	movwf	___fladd@b+1,c
  6369  001214  0E00               	movlw	0
  6370  001216  6E39               	movwf	___fladd@b+2,c
  6371  001218  0E00               	movlw	0
  6372  00121A  6E3A               	movwf	___fladd@b+3,c
  6373  00121C  5045               	movf	___fladd@bexp,w,c
  6374  00121E  A4D8               	btfss	status,2,c
  6375  001220  D002               	goto	l3353
  6376  001222  0E00               	movlw	0
  6377  001224  6E43               	movwf	___fladd@signs,c
  6378  001226                     l3353:
  6379  001226  A045               	btfss	___fladd@bexp,0,c
  6380  001228  D002               	goto	l3357
  6381  00122A  8E39               	bsf	___fladd@b+2,7,c
  6382  00122C  D001               	goto	l3359
  6383  00122E                     l3357:
  6384  00122E  9E39               	bcf	___fladd@b+2,7,c
  6385  001230                     l3359:
  6386  001230  90D8               	bcf	status,0,c
  6387  001232  3045               	rrcf	___fladd@bexp,w,c
  6388  001234  6E3A               	movwf	___fladd@b+3,c
  6389  001236  BE43               	btfsc	___fladd@signs,7,c
  6390  001238  8E3A               	bsf	___fladd@b+3,7,c
  6391  00123A  C037  F037         	movff	___fladd@b,?___fladd
  6392  00123E  C038  F038         	movff	___fladd@b+1,?___fladd+1
  6393  001242  C039  F039         	movff	___fladd@b+2,?___fladd+2
  6394  001246  C03A  F03A         	movff	___fladd@b+3,?___fladd+3
  6395  00124A  0012               	return		;funcret
  6396  00124C                     __end_of___fladd:
  6397                           	opt callstack 0
  6398                           
  6399 ;; *************** function ___flneg *****************
  6400 ;; Defined at:
  6401 ;;		line 15 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/flneg.c"
  6402 ;; Parameters:    Size  Location     Type
  6403 ;;  f1              4    2[COMRAM] unsigned char 
  6404 ;; Auto vars:     Size  Location     Type
  6405 ;;		None
  6406 ;; Return value:  Size  Location     Type
  6407 ;;                  4    2[COMRAM] unsigned char 
  6408 ;; Registers used:
  6409 ;;		wreg, status,2, status,0
  6410 ;; Tracked objects:
  6411 ;;		On entry : 0/0
  6412 ;;		On exit  : 0/0
  6413 ;;		Unchanged: 0/0
  6414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6415 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6418 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6419 ;;Total ram usage:        4 bytes
  6420 ;; Hardware stack levels used:    1
  6421 ;; Hardware stack levels required when called:    2
  6422 ;; This function calls:
  6423 ;;		Nothing
  6424 ;; This function is called by:
  6425 ;;		_sprintf
  6426 ;; This function uses a non-reentrant model
  6427 ;;
  6428                           
  6429                           	psect	text22
  6430  002AFC                     __ptext22:
  6431                           	opt callstack 0
  6432  002AFC                     ___flneg:
  6433                           	opt callstack 25
  6434                           
  6435                           ;incstack = 0
  6436  002AFC  5003               	movf	___flneg@f1,w,c
  6437  002AFE  1004               	iorwf	___flneg@f1+1,w,c
  6438  002B00  1005               	iorwf	___flneg@f1+2,w,c
  6439  002B02  1006               	iorwf	___flneg@f1+3,w,c
  6440  002B04  B4D8               	btfsc	status,2,c
  6441  002B06  D008               	goto	l3937
  6442  002B08  0E00               	movlw	0
  6443  002B0A  1A03               	xorwf	___flneg@f1,f,c
  6444  002B0C  0E00               	movlw	0
  6445  002B0E  1A04               	xorwf	___flneg@f1+1,f,c
  6446  002B10  0E00               	movlw	0
  6447  002B12  1A05               	xorwf	___flneg@f1+2,f,c
  6448  002B14  0E80               	movlw	128
  6449  002B16  1A06               	xorwf	___flneg@f1+3,f,c
  6450  002B18                     l3937:
  6451  002B18  C003  F003         	movff	___flneg@f1,?___flneg
  6452  002B1C  C004  F004         	movff	___flneg@f1+1,?___flneg+1
  6453  002B20  C005  F005         	movff	___flneg@f1+2,?___flneg+2
  6454  002B24  C006  F006         	movff	___flneg@f1+3,?___flneg+3
  6455  002B28  0012               	return		;funcret
  6456  002B2A                     __end_of___flneg:
  6457                           	opt callstack 0
  6458                           
  6459 ;; *************** function ___flge *****************
  6460 ;; Defined at:
  6461 ;;		line 4 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/flge.c"
  6462 ;; Parameters:    Size  Location     Type
  6463 ;;  ff1             4    2[COMRAM] unsigned char 
  6464 ;;  ff2             4    6[COMRAM] unsigned char 
  6465 ;; Auto vars:     Size  Location     Type
  6466 ;;		None
  6467 ;; Return value:  Size  Location     Type
  6468 ;;		None               void
  6469 ;; Registers used:
  6470 ;;		wreg, status,2, status,0
  6471 ;; Tracked objects:
  6472 ;;		On entry : 0/0
  6473 ;;		On exit  : 0/0
  6474 ;;		Unchanged: 0/0
  6475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6476 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6478 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6479 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6480 ;;Total ram usage:       12 bytes
  6481 ;; Hardware stack levels used:    1
  6482 ;; Hardware stack levels required when called:    2
  6483 ;; This function calls:
  6484 ;;		Nothing
  6485 ;; This function is called by:
  6486 ;;		_sprintf
  6487 ;; This function uses a non-reentrant model
  6488 ;;
  6489                           
  6490                           	psect	text23
  6491  002374                     __ptext23:
  6492                           	opt callstack 0
  6493  002374                     ___flge:
  6494                           	opt callstack 25
  6495                           
  6496                           ;incstack = 0
  6497  002374  0E00               	movlw	0
  6498  002376  1403               	andwf	___flge@ff1,w,c
  6499  002378  6E0B               	movwf	??___flge& (0+255),c
  6500  00237A  0E00               	movlw	0
  6501  00237C  1404               	andwf	___flge@ff1+1,w,c
  6502  00237E  6E0C               	movwf	(??___flge+1)& (0+255),c
  6503  002380  0E80               	movlw	128
  6504  002382  1405               	andwf	___flge@ff1+2,w,c
  6505  002384  6E0D               	movwf	(??___flge+2)& (0+255),c
  6506  002386  0E7F               	movlw	127
  6507  002388  1406               	andwf	___flge@ff1+3,w,c
  6508  00238A  6E0E               	movwf	(??___flge+3)& (0+255),c
  6509  00238C  500B               	movf	??___flge,w,c
  6510  00238E  100C               	iorwf	??___flge+1,w,c
  6511  002390  100D               	iorwf	??___flge+2,w,c
  6512  002392  100E               	iorwf	??___flge+3,w,c
  6513  002394  A4D8               	btfss	status,2,c
  6514  002396  D008               	goto	l3915
  6515  002398  0E00               	movlw	0
  6516  00239A  6E03               	movwf	___flge@ff1,c
  6517  00239C  0E00               	movlw	0
  6518  00239E  6E04               	movwf	___flge@ff1+1,c
  6519  0023A0  0E00               	movlw	0
  6520  0023A2  6E05               	movwf	___flge@ff1+2,c
  6521  0023A4  0E00               	movlw	0
  6522  0023A6  6E06               	movwf	___flge@ff1+3,c
  6523  0023A8                     l3915:
  6524  0023A8  0E00               	movlw	0
  6525  0023AA  1407               	andwf	___flge@ff2,w,c
  6526  0023AC  6E0B               	movwf	??___flge& (0+255),c
  6527  0023AE  0E00               	movlw	0
  6528  0023B0  1408               	andwf	___flge@ff2+1,w,c
  6529  0023B2  6E0C               	movwf	(??___flge+1)& (0+255),c
  6530  0023B4  0E80               	movlw	128
  6531  0023B6  1409               	andwf	___flge@ff2+2,w,c
  6532  0023B8  6E0D               	movwf	(??___flge+2)& (0+255),c
  6533  0023BA  0E7F               	movlw	127
  6534  0023BC  140A               	andwf	___flge@ff2+3,w,c
  6535  0023BE  6E0E               	movwf	(??___flge+3)& (0+255),c
  6536  0023C0  500B               	movf	??___flge,w,c
  6537  0023C2  100C               	iorwf	??___flge+1,w,c
  6538  0023C4  100D               	iorwf	??___flge+2,w,c
  6539  0023C6  100E               	iorwf	??___flge+3,w,c
  6540  0023C8  A4D8               	btfss	status,2,c
  6541  0023CA  D008               	goto	l3919
  6542  0023CC  0E00               	movlw	0
  6543  0023CE  6E07               	movwf	___flge@ff2,c
  6544  0023D0  0E00               	movlw	0
  6545  0023D2  6E08               	movwf	___flge@ff2+1,c
  6546  0023D4  0E00               	movlw	0
  6547  0023D6  6E09               	movwf	___flge@ff2+2,c
  6548  0023D8  0E00               	movlw	0
  6549  0023DA  6E0A               	movwf	___flge@ff2+3,c
  6550  0023DC                     l3919:
  6551  0023DC  AE06               	btfss	___flge@ff1+3,7,c
  6552  0023DE  D009               	goto	l3923
  6553  0023E0  6C03               	negf	___flge@ff1,c
  6554  0023E2  1E04               	comf	___flge@ff1+1,f,c
  6555  0023E4  B0D8               	btfsc	status,0,c
  6556  0023E6  2A04               	incf	___flge@ff1+1,f,c
  6557  0023E8  1E05               	comf	___flge@ff1+2,f,c
  6558  0023EA  B0D8               	btfsc	status,0,c
  6559  0023EC  2A05               	incf	___flge@ff1+2,f,c
  6560  0023EE  0E80               	movlw	128
  6561  0023F0  5606               	subfwb	___flge@ff1+3,f,c
  6562  0023F2                     l3923:
  6563  0023F2  AE0A               	btfss	___flge@ff2+3,7,c
  6564  0023F4  D009               	goto	l799
  6565  0023F6  6C07               	negf	___flge@ff2,c
  6566  0023F8  1E08               	comf	___flge@ff2+1,f,c
  6567  0023FA  B0D8               	btfsc	status,0,c
  6568  0023FC  2A08               	incf	___flge@ff2+1,f,c
  6569  0023FE  1E09               	comf	___flge@ff2+2,f,c
  6570  002400  B0D8               	btfsc	status,0,c
  6571  002402  2A09               	incf	___flge@ff2+2,f,c
  6572  002404  0E80               	movlw	128
  6573  002406  560A               	subfwb	___flge@ff2+3,f,c
  6574  002408                     l799:
  6575  002408  0E00               	movlw	0
  6576  00240A  1A03               	xorwf	___flge@ff1,f,c
  6577  00240C  0E00               	movlw	0
  6578  00240E  1A04               	xorwf	___flge@ff1+1,f,c
  6579  002410  0E00               	movlw	0
  6580  002412  1A05               	xorwf	___flge@ff1+2,f,c
  6581  002414  0E80               	movlw	128
  6582  002416  1A06               	xorwf	___flge@ff1+3,f,c
  6583  002418  0E00               	movlw	0
  6584  00241A  1A07               	xorwf	___flge@ff2,f,c
  6585  00241C  0E00               	movlw	0
  6586  00241E  1A08               	xorwf	___flge@ff2+1,f,c
  6587  002420  0E00               	movlw	0
  6588  002422  1A09               	xorwf	___flge@ff2+2,f,c
  6589  002424  0E80               	movlw	128
  6590  002426  1A0A               	xorwf	___flge@ff2+3,f,c
  6591  002428  5007               	movf	___flge@ff2,w,c
  6592  00242A  5C03               	subwf	___flge@ff1,w,c
  6593  00242C  5008               	movf	___flge@ff2+1,w,c
  6594  00242E  5804               	subwfb	___flge@ff1+1,w,c
  6595  002430  5009               	movf	___flge@ff2+2,w,c
  6596  002432  5805               	subwfb	___flge@ff1+2,w,c
  6597  002434  500A               	movf	___flge@ff2+3,w,c
  6598  002436  5806               	subwfb	___flge@ff1+3,w,c
  6599  002438  B0D8               	btfsc	status,0,c
  6600  00243A  D002               	goto	l3929
  6601  00243C  90D8               	bcf	status,0,c
  6602  00243E  0012               	return	
  6603  002440                     l3929:
  6604  002440  80D8               	bsf	status,0,c
  6605  002442  0012               	return		;funcret
  6606  002444                     __end_of___flge:
  6607                           	opt callstack 0
  6608                           
  6609 ;; *************** function ___fleq *****************
  6610 ;; Defined at:
  6611 ;;		line 4 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/fleq.c"
  6612 ;; Parameters:    Size  Location     Type
  6613 ;;  ff1             4    2[COMRAM] unsigned char 
  6614 ;;  ff2             4    6[COMRAM] unsigned char 
  6615 ;; Auto vars:     Size  Location     Type
  6616 ;;		None
  6617 ;; Return value:  Size  Location     Type
  6618 ;;		None               void
  6619 ;; Registers used:
  6620 ;;		wreg, status,2, status,0
  6621 ;; Tracked objects:
  6622 ;;		On entry : 0/0
  6623 ;;		On exit  : 0/0
  6624 ;;		Unchanged: 0/0
  6625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6626 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6628 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6629 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6630 ;;Total ram usage:       12 bytes
  6631 ;; Hardware stack levels used:    1
  6632 ;; Hardware stack levels required when called:    2
  6633 ;; This function calls:
  6634 ;;		Nothing
  6635 ;; This function is called by:
  6636 ;;		_sprintf
  6637 ;; This function uses a non-reentrant model
  6638 ;;
  6639                           
  6640                           	psect	text24
  6641  0024FE                     __ptext24:
  6642                           	opt callstack 0
  6643  0024FE                     ___fleq:
  6644                           	opt callstack 25
  6645                           
  6646                           ;incstack = 0
  6647  0024FE  0E00               	movlw	0
  6648  002500  1403               	andwf	___fleq@ff1,w,c
  6649  002502  6E0B               	movwf	??___fleq& (0+255),c
  6650  002504  0E00               	movlw	0
  6651  002506  1404               	andwf	___fleq@ff1+1,w,c
  6652  002508  6E0C               	movwf	(??___fleq+1)& (0+255),c
  6653  00250A  0E80               	movlw	128
  6654  00250C  1405               	andwf	___fleq@ff1+2,w,c
  6655  00250E  6E0D               	movwf	(??___fleq+2)& (0+255),c
  6656  002510  0E7F               	movlw	127
  6657  002512  1406               	andwf	___fleq@ff1+3,w,c
  6658  002514  6E0E               	movwf	(??___fleq+3)& (0+255),c
  6659  002516  500B               	movf	??___fleq,w,c
  6660  002518  100C               	iorwf	??___fleq+1,w,c
  6661  00251A  100D               	iorwf	??___fleq+2,w,c
  6662  00251C  100E               	iorwf	??___fleq+3,w,c
  6663  00251E  A4D8               	btfss	status,2,c
  6664  002520  D008               	goto	l3899
  6665  002522  0E00               	movlw	0
  6666  002524  6E03               	movwf	___fleq@ff1,c
  6667  002526  0E00               	movlw	0
  6668  002528  6E04               	movwf	___fleq@ff1+1,c
  6669  00252A  0E00               	movlw	0
  6670  00252C  6E05               	movwf	___fleq@ff1+2,c
  6671  00252E  0E00               	movlw	0
  6672  002530  6E06               	movwf	___fleq@ff1+3,c
  6673  002532                     l3899:
  6674  002532  0E00               	movlw	0
  6675  002534  1407               	andwf	___fleq@ff2,w,c
  6676  002536  6E0B               	movwf	??___fleq& (0+255),c
  6677  002538  0E00               	movlw	0
  6678  00253A  1408               	andwf	___fleq@ff2+1,w,c
  6679  00253C  6E0C               	movwf	(??___fleq+1)& (0+255),c
  6680  00253E  0E80               	movlw	128
  6681  002540  1409               	andwf	___fleq@ff2+2,w,c
  6682  002542  6E0D               	movwf	(??___fleq+2)& (0+255),c
  6683  002544  0E7F               	movlw	127
  6684  002546  140A               	andwf	___fleq@ff2+3,w,c
  6685  002548  6E0E               	movwf	(??___fleq+3)& (0+255),c
  6686  00254A  500B               	movf	??___fleq,w,c
  6687  00254C  100C               	iorwf	??___fleq+1,w,c
  6688  00254E  100D               	iorwf	??___fleq+2,w,c
  6689  002550  100E               	iorwf	??___fleq+3,w,c
  6690  002552  A4D8               	btfss	status,2,c
  6691  002554  D008               	goto	l3903
  6692  002556  0E00               	movlw	0
  6693  002558  6E07               	movwf	___fleq@ff2,c
  6694  00255A  0E00               	movlw	0
  6695  00255C  6E08               	movwf	___fleq@ff2+1,c
  6696  00255E  0E00               	movlw	0
  6697  002560  6E09               	movwf	___fleq@ff2+2,c
  6698  002562  0E00               	movlw	0
  6699  002564  6E0A               	movwf	___fleq@ff2+3,c
  6700  002566                     l3903:
  6701  002566  5007               	movf	___fleq@ff2,w,c
  6702  002568  1803               	xorwf	___fleq@ff1,w,c
  6703  00256A  E10A               	bnz	u3940
  6704  00256C  5008               	movf	___fleq@ff2+1,w,c
  6705  00256E  1804               	xorwf	___fleq@ff1+1,w,c
  6706  002570  E107               	bnz	u3940
  6707  002572  5009               	movf	___fleq@ff2+2,w,c
  6708  002574  1805               	xorwf	___fleq@ff1+2,w,c
  6709  002576  E104               	bnz	u3940
  6710  002578  500A               	movf	___fleq@ff2+3,w,c
  6711  00257A  1806               	xorwf	___fleq@ff1+3,w,c
  6712  00257C  B4D8               	btfsc	status,2,c
  6713  00257E  D002               	goto	l3907
  6714  002580                     u3940:
  6715  002580  90D8               	bcf	status,0,c
  6716  002582  0012               	return	
  6717  002584                     l3907:
  6718  002584  80D8               	bsf	status,0,c
  6719  002586  0012               	return		;funcret
  6720  002588                     __end_of___fleq:
  6721                           	opt callstack 0
  6722                           
  6723 ;; *************** function ___fldiv *****************
  6724 ;; Defined at:
  6725 ;;		line 11 in file "/opt/microchip/xc8/v2.05/pic/sources/c90/common/sprcdiv.c"
  6726 ;; Parameters:    Size  Location     Type
  6727 ;;  b               4   16[COMRAM] unsigned char 
  6728 ;;  a               4   20[COMRAM] unsigned char 
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;  grs             4   35[COMRAM] unsigned long 
  6731 ;;  rem             4   28[COMRAM] unsigned long 
  6732 ;;  new_exp         2   33[COMRAM] int 
  6733 ;;  aexp            1   40[COMRAM] unsigned char 
  6734 ;;  bexp            1   39[COMRAM] unsigned char 
  6735 ;;  sign            1   32[COMRAM] unsigned char 
  6736 ;; Return value:  Size  Location     Type
  6737 ;;                  4   16[COMRAM] unsigned char 
  6738 ;; Registers used:
  6739 ;;		wreg, status,2, status,0
  6740 ;; Tracked objects:
  6741 ;;		On entry : 0/0
  6742 ;;		On exit  : 0/0
  6743 ;;		Unchanged: 0/0
  6744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6745 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6746 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6747 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6748 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6749 ;;Total ram usage:       25 bytes
  6750 ;; Hardware stack levels used:    1
  6751 ;; Hardware stack levels required when called:    2
  6752 ;; This function calls:
  6753 ;;		Nothing
  6754 ;; This function is called by:
  6755 ;;		_uds_get_soc
  6756 ;; This function uses a non-reentrant model
  6757 ;;
  6758                           
  6759                           	psect	text25
  6760  0014D6                     __ptext25:
  6761                           	opt callstack 0
  6762  0014D6                     ___fldiv:
  6763                           	opt callstack 26
  6764                           
  6765                           ;incstack = 0
  6766  0014D6  5014               	movf	___fldiv@b+3,w,c
  6767  0014D8  0B80               	andlw	128
  6768  0014DA  6E21               	movwf	___fldiv@sign,c
  6769  0014DC  5014               	movf	___fldiv@b+3,w,c
  6770  0014DE  2414               	addwf	___fldiv@b+3,w,c
  6771  0014E0  6E28               	movwf	___fldiv@bexp,c
  6772  0014E2  BE13               	btfsc	___fldiv@b+2,7,c
  6773  0014E4  8028               	bsf	___fldiv@bexp,0,c
  6774  0014E6  5028               	movf	___fldiv@bexp,w,c
  6775  0014E8  B4D8               	btfsc	status,2,c
  6776  0014EA  D00D               	goto	l4437
  6777  0014EC  2828               	incf	___fldiv@bexp,w,c
  6778  0014EE  A4D8               	btfss	status,2,c
  6779  0014F0  D008               	goto	l4433
  6780  0014F2  0E00               	movlw	0
  6781  0014F4  6E11               	movwf	___fldiv@b,c
  6782  0014F6  0E00               	movlw	0
  6783  0014F8  6E12               	movwf	___fldiv@b+1,c
  6784  0014FA  0E00               	movlw	0
  6785  0014FC  6E13               	movwf	___fldiv@b+2,c
  6786  0014FE  0E00               	movlw	0
  6787  001500  6E14               	movwf	___fldiv@b+3,c
  6788  001502                     l4433:
  6789  001502  8E13               	bsf	___fldiv@b+2,7,c
  6790  001504  D006               	goto	L7
  6791  001506                     l4437:
  6792  001506  0E00               	movlw	0
  6793  001508  6E11               	movwf	___fldiv@b,c
  6794  00150A  0E00               	movlw	0
  6795  00150C  6E12               	movwf	___fldiv@b+1,c
  6796  00150E  0E00               	movlw	0
  6797  001510  6E13               	movwf	___fldiv@b+2,c
  6798  001512                     L7:
  6799  001512  0E00               	movlw	0
  6800  001514  6E14               	movwf	___fldiv@b+3,c
  6801  001516  5018               	movf	___fldiv@a+3,w,c
  6802  001518  0B80               	andlw	128
  6803  00151A  1A21               	xorwf	___fldiv@sign,f,c
  6804  00151C  5018               	movf	___fldiv@a+3,w,c
  6805  00151E  2418               	addwf	___fldiv@a+3,w,c
  6806  001520  6E29               	movwf	___fldiv@aexp,c
  6807  001522  BE17               	btfsc	___fldiv@a+2,7,c
  6808  001524  8029               	bsf	___fldiv@aexp,0,c
  6809  001526  5029               	movf	___fldiv@aexp,w,c
  6810  001528  B4D8               	btfsc	status,2,c
  6811  00152A  D00D               	goto	l4457
  6812  00152C  2829               	incf	___fldiv@aexp,w,c
  6813  00152E  A4D8               	btfss	status,2,c
  6814  001530  D008               	goto	l4453
  6815  001532  0E00               	movlw	0
  6816  001534  6E15               	movwf	___fldiv@a,c
  6817  001536  0E00               	movlw	0
  6818  001538  6E16               	movwf	___fldiv@a+1,c
  6819  00153A  0E00               	movlw	0
  6820  00153C  6E17               	movwf	___fldiv@a+2,c
  6821  00153E  0E00               	movlw	0
  6822  001540  6E18               	movwf	___fldiv@a+3,c
  6823  001542                     l4453:
  6824  001542  8E17               	bsf	___fldiv@a+2,7,c
  6825  001544  D006               	goto	L8
  6826  001546                     l4457:
  6827  001546  0E00               	movlw	0
  6828  001548  6E15               	movwf	___fldiv@a,c
  6829  00154A  0E00               	movlw	0
  6830  00154C  6E16               	movwf	___fldiv@a+1,c
  6831  00154E  0E00               	movlw	0
  6832  001550  6E17               	movwf	___fldiv@a+2,c
  6833  001552                     L8:
  6834  001552  0E00               	movlw	0
  6835  001554  6E18               	movwf	___fldiv@a+3,c
  6836  001556  5015               	movf	___fldiv@a,w,c
  6837  001558  1016               	iorwf	___fldiv@a+1,w,c
  6838  00155A  1017               	iorwf	___fldiv@a+2,w,c
  6839  00155C  1018               	iorwf	___fldiv@a+3,w,c
  6840  00155E  A4D8               	btfss	status,2,c
  6841  001560  D017               	goto	l4471
  6842  001562  0E00               	movlw	0
  6843  001564  6E11               	movwf	___fldiv@b,c
  6844  001566  0E00               	movlw	0
  6845  001568  6E12               	movwf	___fldiv@b+1,c
  6846  00156A  0E00               	movlw	0
  6847  00156C  6E13               	movwf	___fldiv@b+2,c
  6848  00156E  0E00               	movlw	0
  6849  001570  6E14               	movwf	___fldiv@b+3,c
  6850  001572  0E80               	movlw	128
  6851  001574  1213               	iorwf	___fldiv@b+2,f,c
  6852  001576  0E7F               	movlw	127
  6853  001578  1214               	iorwf	___fldiv@b+3,f,c
  6854  00157A                     l4465:
  6855  00157A  5021               	movf	___fldiv@sign,w,c
  6856  00157C  1214               	iorwf	___fldiv@b+3,f,c
  6857  00157E  C011  F011         	movff	___fldiv@b,?___fldiv
  6858  001582  C012  F012         	movff	___fldiv@b+1,?___fldiv+1
  6859  001586  C013  F013         	movff	___fldiv@b+2,?___fldiv+2
  6860  00158A  C014  F014         	movff	___fldiv@b+3,?___fldiv+3
  6861  00158E  0012               	return	
  6862  001590                     l4471:
  6863  001590  5028               	movf	___fldiv@bexp,w,c
  6864  001592  A4D8               	btfss	status,2,c
  6865  001594  D009               	goto	l4479
  6866  001596  0E00               	movlw	0
  6867  001598  6E11               	movwf	?___fldiv,c
  6868  00159A  0E00               	movlw	0
  6869  00159C  6E12               	movwf	?___fldiv+1,c
  6870  00159E  0E00               	movlw	0
  6871  0015A0  6E13               	movwf	?___fldiv+2,c
  6872  0015A2  0E00               	movlw	0
  6873  0015A4  6E14               	movwf	?___fldiv+3,c
  6874  0015A6  0012               	return	
  6875  0015A8                     l4479:
  6876  0015A8  5029               	movf	___fldiv@aexp,w,c
  6877  0015AA  C028  F019         	movff	___fldiv@bexp,??___fldiv
  6878  0015AE  6A1A               	clrf	(??___fldiv+1)& (0+255),c
  6879  0015B0  5E19               	subwf	??___fldiv,f,c
  6880  0015B2  0E00               	movlw	0
  6881  0015B4  5A1A               	subwfb	??___fldiv+1,f,c
  6882  0015B6  0E7F               	movlw	127
  6883  0015B8  2419               	addwf	??___fldiv,w,c
  6884  0015BA  6E22               	movwf	___fldiv@new_exp,c
  6885  0015BC  0E00               	movlw	0
  6886  0015BE  201A               	addwfc	??___fldiv+1,w,c
  6887  0015C0  6E23               	movwf	___fldiv@new_exp+1,c
  6888  0015C2  C011  F01D         	movff	___fldiv@b,___fldiv@rem
  6889  0015C6  C012  F01E         	movff	___fldiv@b+1,___fldiv@rem+1
  6890  0015CA  C013  F01F         	movff	___fldiv@b+2,___fldiv@rem+2
  6891  0015CE  C014  F020         	movff	___fldiv@b+3,___fldiv@rem+3
  6892  0015D2  0E00               	movlw	0
  6893  0015D4  6E11               	movwf	___fldiv@b,c
  6894  0015D6  0E00               	movlw	0
  6895  0015D8  6E12               	movwf	___fldiv@b+1,c
  6896  0015DA  0E00               	movlw	0
  6897  0015DC  6E13               	movwf	___fldiv@b+2,c
  6898  0015DE  0E00               	movlw	0
  6899  0015E0  6E14               	movwf	___fldiv@b+3,c
  6900  0015E2  0E00               	movlw	0
  6901  0015E4  6E24               	movwf	___fldiv@grs,c
  6902  0015E6  0E00               	movlw	0
  6903  0015E8  6E25               	movwf	___fldiv@grs+1,c
  6904  0015EA  0E00               	movlw	0
  6905  0015EC  6E26               	movwf	___fldiv@grs+2,c
  6906  0015EE  0E00               	movlw	0
  6907  0015F0  6E27               	movwf	___fldiv@grs+3,c
  6908  0015F2  0E00               	movlw	0
  6909  0015F4  6E29               	movwf	___fldiv@aexp,c
  6910  0015F6  D028               	goto	l1127
  6911  0015F8                     l4489:
  6912  0015F8  5029               	movf	___fldiv@aexp,w,c
  6913  0015FA  B4D8               	btfsc	status,2,c
  6914  0015FC  D011               	goto	l4497
  6915  0015FE  90D8               	bcf	status,0,c
  6916  001600  361D               	rlcf	___fldiv@rem,f,c
  6917  001602  361E               	rlcf	___fldiv@rem+1,f,c
  6918  001604  361F               	rlcf	___fldiv@rem+2,f,c
  6919  001606  3620               	rlcf	___fldiv@rem+3,f,c
  6920  001608  90D8               	bcf	status,0,c
  6921  00160A  3611               	rlcf	___fldiv@b,f,c
  6922  00160C  3612               	rlcf	___fldiv@b+1,f,c
  6923  00160E  3613               	rlcf	___fldiv@b+2,f,c
  6924  001610  3614               	rlcf	___fldiv@b+3,f,c
  6925  001612  BE27               	btfsc	___fldiv@grs+3,7,c
  6926  001614  8011               	bsf	___fldiv@b,0,c
  6927  001616  90D8               	bcf	status,0,c
  6928  001618  3624               	rlcf	___fldiv@grs,f,c
  6929  00161A  3625               	rlcf	___fldiv@grs+1,f,c
  6930  00161C  3626               	rlcf	___fldiv@grs+2,f,c
  6931  00161E  3627               	rlcf	___fldiv@grs+3,f,c
  6932  001620                     l4497:
  6933  001620  5015               	movf	___fldiv@a,w,c
  6934  001622  5C1D               	subwf	___fldiv@rem,w,c
  6935  001624  5016               	movf	___fldiv@a+1,w,c
  6936  001626  581E               	subwfb	___fldiv@rem+1,w,c
  6937  001628  5017               	movf	___fldiv@a+2,w,c
  6938  00162A  581F               	subwfb	___fldiv@rem+2,w,c
  6939  00162C  5018               	movf	___fldiv@a+3,w,c
  6940  00162E  5820               	subwfb	___fldiv@rem+3,w,c
  6941  001630  A0D8               	btfss	status,0,c
  6942  001632  D009               	goto	l4503
  6943  001634  8C27               	bsf	___fldiv@grs+3,6,c
  6944  001636  5015               	movf	___fldiv@a,w,c
  6945  001638  5E1D               	subwf	___fldiv@rem,f,c
  6946  00163A  5016               	movf	___fldiv@a+1,w,c
  6947  00163C  5A1E               	subwfb	___fldiv@rem+1,f,c
  6948  00163E  5017               	movf	___fldiv@a+2,w,c
  6949  001640  5A1F               	subwfb	___fldiv@rem+2,f,c
  6950  001642  5018               	movf	___fldiv@a+3,w,c
  6951  001644  5A20               	subwfb	___fldiv@rem+3,f,c
  6952  001646                     l4503:
  6953  001646  2A29               	incf	___fldiv@aexp,f,c
  6954  001648                     l1127:
  6955  001648  0E19               	movlw	25
  6956  00164A  6429               	cpfsgt	___fldiv@aexp,c
  6957  00164C  D7D5               	goto	l4489
  6958  00164E  501D               	movf	___fldiv@rem,w,c
  6959  001650  101E               	iorwf	___fldiv@rem+1,w,c
  6960  001652  101F               	iorwf	___fldiv@rem+2,w,c
  6961  001654  1020               	iorwf	___fldiv@rem+3,w,c
  6962  001656  B4D8               	btfsc	status,2,c
  6963  001658  D011               	goto	l4515
  6964  00165A  8024               	bsf	___fldiv@grs,0,c
  6965  00165C  D00F               	goto	l4515
  6966  00165E                     l4509:
  6967  00165E  90D8               	bcf	status,0,c
  6968  001660  3611               	rlcf	___fldiv@b,f,c
  6969  001662  3612               	rlcf	___fldiv@b+1,f,c
  6970  001664  3613               	rlcf	___fldiv@b+2,f,c
  6971  001666  3614               	rlcf	___fldiv@b+3,f,c
  6972  001668  BE27               	btfsc	___fldiv@grs+3,7,c
  6973  00166A  8011               	bsf	___fldiv@b,0,c
  6974  00166C  90D8               	bcf	status,0,c
  6975  00166E  3624               	rlcf	___fldiv@grs,f,c
  6976  001670  3625               	rlcf	___fldiv@grs+1,f,c
  6977  001672  3626               	rlcf	___fldiv@grs+2,f,c
  6978  001674  3627               	rlcf	___fldiv@grs+3,f,c
  6979  001676  0622               	decf	___fldiv@new_exp,f,c
  6980  001678  A0D8               	btfss	status,0,c
  6981  00167A  0623               	decf	___fldiv@new_exp+1,f,c
  6982  00167C                     l4515:
  6983  00167C  AE13               	btfss	___fldiv@b+2,7,c
  6984  00167E  D7EF               	goto	l4509
  6985  001680  0E00               	movlw	0
  6986  001682  6E29               	movwf	___fldiv@aexp,c
  6987  001684  AE27               	btfss	___fldiv@grs+3,7,c
  6988  001686  D017               	goto	l1138
  6989  001688  0EFF               	movlw	255
  6990  00168A  1424               	andwf	___fldiv@grs,w,c
  6991  00168C  6E19               	movwf	??___fldiv& (0+255),c
  6992  00168E  0EFF               	movlw	255
  6993  001690  1425               	andwf	___fldiv@grs+1,w,c
  6994  001692  6E1A               	movwf	(??___fldiv+1)& (0+255),c
  6995  001694  0EFF               	movlw	255
  6996  001696  1426               	andwf	___fldiv@grs+2,w,c
  6997  001698  6E1B               	movwf	(??___fldiv+2)& (0+255),c
  6998  00169A  0E7F               	movlw	127
  6999  00169C  1427               	andwf	___fldiv@grs+3,w,c
  7000  00169E  6E1C               	movwf	(??___fldiv+3)& (0+255),c
  7001  0016A0  5019               	movf	??___fldiv,w,c
  7002  0016A2  101A               	iorwf	??___fldiv+1,w,c
  7003  0016A4  101B               	iorwf	??___fldiv+2,w,c
  7004  0016A6  101C               	iorwf	??___fldiv+3,w,c
  7005  0016A8  B4D8               	btfsc	status,2,c
  7006  0016AA  D003               	goto	l1139
  7007  0016AC                     u4900:
  7008  0016AC  0E01               	movlw	1
  7009  0016AE  6E29               	movwf	___fldiv@aexp,c
  7010  0016B0  D002               	goto	l1138
  7011  0016B2                     l1139:
  7012  0016B2  B011               	btfsc	___fldiv@b,0,c
  7013  0016B4  D7FB               	goto	u4900
  7014  0016B6                     l1138:
  7015  0016B6  5029               	movf	___fldiv@aexp,w,c
  7016  0016B8  B4D8               	btfsc	status,2,c
  7017  0016BA  D01F               	goto	l4535
  7018  0016BC  0E01               	movlw	1
  7019  0016BE  2611               	addwf	___fldiv@b,f,c
  7020  0016C0  0E00               	movlw	0
  7021  0016C2  2212               	addwfc	___fldiv@b+1,f,c
  7022  0016C4  2213               	addwfc	___fldiv@b+2,f,c
  7023  0016C6  2214               	addwfc	___fldiv@b+3,f,c
  7024  0016C8  A014               	btfss	___fldiv@b+3,0,c
  7025  0016CA  D017               	goto	l4535
  7026  0016CC  C011  F019         	movff	___fldiv@b,??___fldiv
  7027  0016D0  C012  F01A         	movff	___fldiv@b+1,??___fldiv+1
  7028  0016D4  C013  F01B         	movff	___fldiv@b+2,??___fldiv+2
  7029  0016D8  C014  F01C         	movff	___fldiv@b+3,??___fldiv+3
  7030  0016DC  341C               	rlcf	??___fldiv+3,w,c
  7031  0016DE  321C               	rrcf	??___fldiv+3,f,c
  7032  0016E0  321B               	rrcf	??___fldiv+2,f,c
  7033  0016E2  321A               	rrcf	??___fldiv+1,f,c
  7034  0016E4  3219               	rrcf	??___fldiv,f,c
  7035  0016E6  C019  F011         	movff	??___fldiv,___fldiv@b
  7036  0016EA  C01A  F012         	movff	??___fldiv+1,___fldiv@b+1
  7037  0016EE  C01B  F013         	movff	??___fldiv+2,___fldiv@b+2
  7038  0016F2  C01C  F014         	movff	??___fldiv+3,___fldiv@b+3
  7039  0016F6  4A22               	infsnz	___fldiv@new_exp,f,c
  7040  0016F8  2A23               	incf	___fldiv@new_exp+1,f,c
  7041  0016FA                     l4535:
  7042  0016FA  BE23               	btfsc	___fldiv@new_exp+1,7,c
  7043  0016FC  D010               	goto	l4539
  7044  0016FE  5023               	movf	___fldiv@new_exp+1,w,c
  7045  001700  E103               	bnz	u4940
  7046  001702  2822               	incf	___fldiv@new_exp,w,c
  7047  001704  A0D8               	btfss	status,0,c
  7048  001706  D00B               	goto	l4539
  7049  001708                     u4940:
  7050  001708  0E00               	movlw	0
  7051  00170A  6E23               	movwf	___fldiv@new_exp+1,c
  7052  00170C  6822               	setf	___fldiv@new_exp,c
  7053  00170E  0E00               	movlw	0
  7054  001710  6E11               	movwf	___fldiv@b,c
  7055  001712  0E00               	movlw	0
  7056  001714  6E12               	movwf	___fldiv@b+1,c
  7057  001716  0E00               	movlw	0
  7058  001718  6E13               	movwf	___fldiv@b+2,c
  7059  00171A  0E00               	movlw	0
  7060  00171C  6E14               	movwf	___fldiv@b+3,c
  7061  00171E                     l4539:
  7062  00171E  BE23               	btfsc	___fldiv@new_exp+1,7,c
  7063  001720  D005               	goto	u4950
  7064  001722  5023               	movf	___fldiv@new_exp+1,w,c
  7065  001724  E111               	bnz	l4543
  7066  001726  0422               	decf	___fldiv@new_exp,w,c
  7067  001728  B0D8               	btfsc	status,0,c
  7068  00172A  D00E               	goto	l4543
  7069  00172C                     u4950:
  7070  00172C  0E00               	movlw	0
  7071  00172E  6E23               	movwf	___fldiv@new_exp+1,c
  7072  001730  0E00               	movlw	0
  7073  001732  6E22               	movwf	___fldiv@new_exp,c
  7074  001734  0E00               	movlw	0
  7075  001736  6E11               	movwf	___fldiv@b,c
  7076  001738  0E00               	movlw	0
  7077  00173A  6E12               	movwf	___fldiv@b+1,c
  7078  00173C  0E00               	movlw	0
  7079  00173E  6E13               	movwf	___fldiv@b+2,c
  7080  001740  0E00               	movlw	0
  7081  001742  6E14               	movwf	___fldiv@b+3,c
  7082  001744  0E00               	movlw	0
  7083  001746  6E21               	movwf	___fldiv@sign,c
  7084  001748                     l4543:
  7085  001748  C022  F028         	movff	___fldiv@new_exp,___fldiv@bexp
  7086  00174C  A028               	btfss	___fldiv@bexp,0,c
  7087  00174E  D002               	goto	l4549
  7088  001750  8E13               	bsf	___fldiv@b+2,7,c
  7089  001752  D001               	goto	l4551
  7090  001754                     l4549:
  7091  001754  9E13               	bcf	___fldiv@b+2,7,c
  7092  001756                     l4551:
  7093  001756  90D8               	bcf	status,0,c
  7094  001758  3028               	rrcf	___fldiv@bexp,w,c
  7095  00175A  6E14               	movwf	___fldiv@b+3,c
  7096  00175C  D70E               	goto	l4465
  7097  00175E                     __end_of___fldiv:
  7098                           	opt callstack 0
  7099                           
  7100 ;; *************** function _PutString *****************
  7101 ;; Defined at:
  7102 ;;		line 58 in file "Serial.c"
  7103 ;; Parameters:    Size  Location     Type
  7104 ;;  mess            2    4[COMRAM] PTR const unsigned char 
  7105 ;;		 -> STR_12(15), STR_11(20), STR_10(17), STR_9(17), 
  7106 ;;		 -> STR_8(12), STR_7(25), STR_6(24), STR_5(14), 
  7107 ;;		 -> STR_4(16), uds_get_soc@buf(128), STR_2(24), STR_1(14), 
  7108 ;; Auto vars:     Size  Location     Type
  7109 ;;		None
  7110 ;; Return value:  Size  Location     Type
  7111 ;;                  1    wreg      void 
  7112 ;; Registers used:
  7113 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7114 ;; Tracked objects:
  7115 ;;		On entry : 0/0
  7116 ;;		On exit  : 0/0
  7117 ;;		Unchanged: 0/0
  7118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7119 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7122 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7123 ;;Total ram usage:        2 bytes
  7124 ;; Hardware stack levels used:    1
  7125 ;; Hardware stack levels required when called:    4
  7126 ;; This function calls:
  7127 ;;		_Putchar
  7128 ;; This function is called by:
  7129 ;;		_uds_get_soc
  7130 ;;		_uds_get_vin
  7131 ;;		_shell
  7132 ;;		_main
  7133 ;; This function uses a non-reentrant model
  7134 ;;
  7135                           
  7136                           	psect	text26
  7137  0029D4                     __ptext26:
  7138                           	opt callstack 0
  7139  0029D4                     _PutString:
  7140                           	opt callstack 24
  7141                           
  7142                           ;Serial.c: 60: while(*mess != '\0')
  7143                           
  7144                           ;incstack = 0
  7145  0029D4  D014               	goto	l4053
  7146  0029D6                     l4049:
  7147                           
  7148                           ;Serial.c: 61: {;Serial.c: 62: Putchar(*mess++);
  7149  0029D6  C005  FFF6         	movff	PutString@mess,tblptrl
  7150  0029DA  C006  FFF7         	movff	PutString@mess+1,tblptrh
  7151  0029DE  6AF8               	clrf	tblptru,c
  7152  0029E0  0E0E               	movlw	(high __ramtop+-1)
  7153  0029E2  64F7               	cpfsgt	tblptrh,c
  7154  0029E4  D003               	bra	u4217
  7155  0029E6  0008               	tblrd		*
  7156  0029E8  50F5               	movf	tablat,w,c
  7157  0029EA  D005               	bra	u4210
  7158  0029EC                     u4217:
  7159  0029EC  CFF6 FFE9          	movff	tblptrl,fsr0l
  7160  0029F0  CFF7 FFEA          	movff	tblptrh,fsr0h
  7161  0029F4  50EF               	movf	indf0,w,c
  7162  0029F6                     u4210:
  7163  0029F6  ECDC  F015         	call	_Putchar
  7164  0029FA  4A05               	infsnz	PutString@mess,f,c
  7165  0029FC  2A06               	incf	PutString@mess+1,f,c
  7166  0029FE                     l4053:
  7167  0029FE  C005  FFF6         	movff	PutString@mess,tblptrl
  7168  002A02  C006  FFF7         	movff	PutString@mess+1,tblptrh
  7169  002A06  6AF8               	clrf	tblptru,c
  7170  002A08  0E0E               	movlw	(high __ramtop+-1)
  7171  002A0A  64F7               	cpfsgt	tblptrh,c
  7172  002A0C  D003               	bra	u4227
  7173  002A0E  0008               	tblrd		*
  7174  002A10  50F5               	movf	tablat,w,c
  7175  002A12  D005               	bra	u4220
  7176  002A14                     u4227:
  7177  002A14  CFF6 FFE9          	movff	tblptrl,fsr0l
  7178  002A18  CFF7 FFEA          	movff	tblptrh,fsr0h
  7179  002A1C  50EF               	movf	indf0,w,c
  7180  002A1E                     u4220:
  7181  002A1E  0900               	iorlw	0
  7182  002A20  B4D8               	btfsc	status,2,c
  7183  002A22  0012               	return	
  7184  002A24  D7D8               	goto	l4049
  7185  002A26                     __end_of_PutString:
  7186                           	opt callstack 0
  7187                           
  7188 ;; *************** function _Putchar *****************
  7189 ;; Defined at:
  7190 ;;		line 103 in file "Serial.c"
  7191 ;; Parameters:    Size  Location     Type
  7192 ;;  send_data       1    wreg     unsigned char 
  7193 ;; Auto vars:     Size  Location     Type
  7194 ;;  send_data       1    3[COMRAM] unsigned char 
  7195 ;; Return value:  Size  Location     Type
  7196 ;;                  1    wreg      void 
  7197 ;; Registers used:
  7198 ;;		wreg, status,2, cstack
  7199 ;; Tracked objects:
  7200 ;;		On entry : 0/0
  7201 ;;		On exit  : 0/0
  7202 ;;		Unchanged: 0/0
  7203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7205 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7207 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7208 ;;Total ram usage:        1 bytes
  7209 ;; Hardware stack levels used:    1
  7210 ;; Hardware stack levels required when called:    3
  7211 ;; This function calls:
  7212 ;;		_Write1USART
  7213 ;; This function is called by:
  7214 ;;		_PutString
  7215 ;;		_uds_get_vin
  7216 ;;		_shell
  7217 ;;		_hex_ascii
  7218 ;; This function uses a non-reentrant model
  7219 ;;
  7220                           
  7221                           	psect	text27
  7222  002BB8                     __ptext27:
  7223                           	opt callstack 0
  7224  002BB8                     _Putchar:
  7225                           	opt callstack 25
  7226                           
  7227                           ;incstack = 0
  7228                           ;Putchar@send_data stored from wreg
  7229  002BB8  6E04               	movwf	Putchar@send_data,c
  7230  002BBA                     
  7231                           ;Serial.c: 105: while((!TXSTA1bits.TRMT));
  7232  002BBA  A2AC               	btfss	4012,1,c	;volatile
  7233  002BBC  D7FE               	goto	l3617
  7234                           
  7235                           ;Serial.c: 107: _delay((unsigned long)((1)*(16000000/4000000.0)));
  7236  002BBE  D000               	nop2		;2 cycle nop
  7237  002BC0  D000               	nop2		;2 cycle nop
  7238                           
  7239                           ;Serial.c: 111: Write1USART(send_data);
  7240  002BC2  5004               	movf	Putchar@send_data,w,c
  7241  002BC4  ECD2  F015         	call	_Write1USART
  7242  002BC8  0012               	return		;funcret
  7243  002BCA                     __end_of_Putchar:
  7244                           	opt callstack 0
  7245                           
  7246 ;; *************** function _Write1USART *****************
  7247 ;; Defined at:
  7248 ;;		line 14 in file "plib/USART/u1write.c"
  7249 ;; Parameters:    Size  Location     Type
  7250 ;;  data            1    wreg     unsigned char 
  7251 ;; Auto vars:     Size  Location     Type
  7252 ;;  data            1    2[COMRAM] unsigned char 
  7253 ;; Return value:  Size  Location     Type
  7254 ;;                  1    wreg      void 
  7255 ;; Registers used:
  7256 ;;		wreg
  7257 ;; Tracked objects:
  7258 ;;		On entry : 0/0
  7259 ;;		On exit  : 0/0
  7260 ;;		Unchanged: 0/0
  7261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7263 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7265 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7266 ;;Total ram usage:        1 bytes
  7267 ;; Hardware stack levels used:    1
  7268 ;; Hardware stack levels required when called:    2
  7269 ;; This function calls:
  7270 ;;		Nothing
  7271 ;; This function is called by:
  7272 ;;		_Putchar
  7273 ;;		_putrs1USART
  7274 ;;		_puts1USART
  7275 ;; This function uses a non-reentrant model
  7276 ;;
  7277                           
  7278                           	psect	text28
  7279  002BA4                     __ptext28:
  7280                           	opt callstack 0
  7281  002BA4                     _Write1USART:
  7282                           	opt callstack 25
  7283                           
  7284                           ;incstack = 0
  7285                           ;Write1USART@data stored from wreg
  7286  002BA4  6E03               	movwf	Write1USART@data,c
  7287                           
  7288                           ;u1write.c: 16: if(TXSTA1bits.TX9)
  7289  002BA6  ACAC               	btfss	4012,6,c	;volatile
  7290  002BA8  D004               	goto	l3165
  7291                           
  7292                           ;u1write.c: 17: {;u1write.c: 18: TXSTA1bits.TX9D = 0;
  7293  002BAA  90AC               	bcf	4012,0,c	;volatile
  7294                           
  7295                           ;u1write.c: 19: if(USART1_Status.TX_NINE)
  7296  002BAC  0100               	movlb	0	; () banked
  7297  002BAE  B3CB               	btfsc	_USART1_Status& (0+255),1,b
  7298                           
  7299                           ; BSR set to: 0
  7300                           ;u1write.c: 20: TXSTA1bits.TX9D = 1;
  7301  002BB0  80AC               	bsf	4012,0,c	;volatile
  7302  002BB2                     l3165:
  7303                           
  7304                           ;u1write.c: 21: };u1write.c: 23: TXREG1 = data;
  7305  002BB2  C003  FFAD         	movff	Write1USART@data,4013	;volatile
  7306  002BB6  0012               	return		;funcret
  7307  002BB8                     __end_of_Write1USART:
  7308                           	opt callstack 0
  7309                           
  7310 ;; *************** function _ECANSendMessage *****************
  7311 ;; Defined at:
  7312 ;;		line 610 in file "can/ECANPoll.c"
  7313 ;; Parameters:    Size  Location     Type
  7314 ;;  id              4   13[COMRAM] unsigned long 
  7315 ;;  data            2   17[COMRAM] PTR unsigned char 
  7316 ;;		 -> uds_get_vin@msg_continue(8), uds_get_vin@msg_start(8), uds_get_soc@msg(8), 
  7317 ;;  dataLen         1   19[COMRAM] unsigned char 
  7318 ;;  msgFlags        1   20[COMRAM] enum E12036
  7319 ;; Auto vars:     Size  Location     Type
  7320 ;;  pb             18   22[COMRAM] PTR unsigned char [9]
  7321 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), 
  7322 ;;  ptr             2   45[COMRAM] PTR unsigned char 
  7323 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), 
  7324 ;;  tempPtr         2   41[COMRAM] PTR unsigned char 
  7325 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), 
  7326 ;;  i               1   44[COMRAM] unsigned char 
  7327 ;;  temp            1   43[COMRAM] unsigned char 
  7328 ;;  j               1   40[COMRAM] unsigned char 
  7329 ;; Return value:  Size  Location     Type
  7330 ;;                  1    wreg      enum E12262
  7331 ;; Registers used:
  7332 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7333 ;; Tracked objects:
  7334 ;;		On entry : 0/0
  7335 ;;		On exit  : 0/0
  7336 ;;		Unchanged: 0/0
  7337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7338 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7339 ;;      Locals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7340 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7341 ;;      Totals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7342 ;;Total ram usage:       34 bytes
  7343 ;; Hardware stack levels used:    1
  7344 ;; Hardware stack levels required when called:    3
  7345 ;; This function calls:
  7346 ;;		__CANIDToRegs
  7347 ;; This function is called by:
  7348 ;;		_uds_get_soc
  7349 ;;		_uds_get_vin
  7350 ;; This function uses a non-reentrant model
  7351 ;;
  7352                           
  7353                           	psect	text29
  7354  00206E                     __ptext29:
  7355                           	opt callstack 0
  7356  00206E                     _ECANSendMessage:
  7357                           	opt callstack 25
  7358                           
  7359                           ;ECANPoll.c: 625: BYTE i,j;;ECANPoll.c: 626: BYTE *ptr, *tempPtr;;ECANPoll.c: 627: BYTE*
      +                           pb[9];;ECANPoll.c: 628: BYTE temp;;ECANPoll.c: 638: pb[0]=(BYTE*)&TXB0CON;
  7360                           
  7361                           ;incstack = 0
  7362  00206E  0E20               	movlw	32
  7363  002070  6E17               	movwf	ECANSendMessage@pb,c
  7364  002072  0E0F               	movlw	15
  7365  002074  6E18               	movwf	ECANSendMessage@pb+1,c
  7366                           
  7367                           ;ECANPoll.c: 639: pb[1]=(BYTE*)&TXB1CON;
  7368  002076  0E10               	movlw	16
  7369  002078  6E19               	movwf	ECANSendMessage@pb+2,c
  7370  00207A  0E0F               	movlw	15
  7371  00207C  6E1A               	movwf	ECANSendMessage@pb+3,c
  7372                           
  7373                           ;ECANPoll.c: 640: pb[2]=(BYTE*)&TXB2CON;
  7374  00207E  0E00               	movlw	0
  7375  002080  6E1B               	movwf	ECANSendMessage@pb+4,c
  7376  002082  0E0F               	movlw	15
  7377  002084  6E1C               	movwf	ECANSendMessage@pb+5,c
  7378                           
  7379                           ;ECANPoll.c: 670: for ( i = 0; i < 2; i++ )
  7380  002086  0E00               	movlw	0
  7381  002088  6E2D               	movwf	ECANSendMessage@i,c
  7382  00208A                     l4063:
  7383                           
  7384                           ;ECANPoll.c: 685: {;ECANPoll.c: 690: ptr = pb[i];
  7385  00208A  502D               	movf	ECANSendMessage@i,w,c
  7386  00208C  0D02               	mullw	2
  7387  00208E  0E17               	movlw	low ECANSendMessage@pb
  7388  002090  24F3               	addwf	prodl,w,c
  7389  002092  6ED9               	movwf	fsr2l,c
  7390  002094  0E00               	movlw	high ECANSendMessage@pb
  7391  002096  20F4               	addwfc	prodh,w,c
  7392  002098  6EDA               	movwf	fsr2h,c
  7393  00209A  CFDE F02E          	movff	postinc2,ECANSendMessage@ptr
  7394  00209E  CFDD F02F          	movff	postdec2,ECANSendMessage@ptr+1
  7395                           
  7396                           ;ECANPoll.c: 691: tempPtr = ptr;
  7397  0020A2  C02E  F02A         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
  7398  0020A6  C02F  F02B         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
  7399                           
  7400                           ;ECANPoll.c: 717: if ( !(*ptr & 0x08) )
  7401  0020AA  C02E  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  7402  0020AE  C02F  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  7403  0020B2  B6DF               	btfsc	indf2,3,c
  7404  0020B4  D060               	goto	l4109
  7405                           
  7406                           ;ECANPoll.c: 718: {;ECANPoll.c: 720: *ptr &= ~ECAN_TX_PRIORITY_BITS;
  7407  0020B6  C02E  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  7408  0020BA  C02F  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  7409  0020BE  0EFC               	movlw	252
  7410  0020C0  16DF               	andwf	indf2,f,c
  7411                           
  7412                           ;ECANPoll.c: 721: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
  7413  0020C2  C015  F016         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
  7414  0020C6  0E03               	movlw	3
  7415  0020C8  1616               	andwf	??_ECANSendMessage,f,c
  7416  0020CA  C02E  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  7417  0020CE  C02F  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  7418  0020D2  5016               	movf	??_ECANSendMessage,w,c
  7419  0020D4  12DF               	iorwf	indf2,f,c
  7420                           
  7421                           ;ECANPoll.c: 724: if ( msgFlags & ECAN_TX_RTR_BIT )
  7422  0020D6  AC15               	btfss	ECANSendMessage@msgFlags,6,c
  7423  0020D8  D004               	goto	l378
  7424                           
  7425                           ;ECANPoll.c: 725: temp = 0x40 | dataLen;
  7426  0020DA  5014               	movf	ECANSendMessage@dataLen,w,c
  7427  0020DC  0940               	iorlw	64
  7428  0020DE  6E2C               	movwf	ECANSendMessage@temp,c
  7429  0020E0  D002               	goto	l4077
  7430  0020E2                     l378:
  7431                           
  7432                           ;ECANPoll.c: 726: else;ECANPoll.c: 727: temp = dataLen;
  7433  0020E2  C014  F02C         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
  7434  0020E6                     l4077:
  7435                           
  7436                           ;ECANPoll.c: 729: *(ptr+5) = temp;
  7437  0020E6  EE20 F005          	lfsr	2,5
  7438  0020EA  502E               	movf	ECANSendMessage@ptr,w,c
  7439  0020EC  26D9               	addwf	fsr2l,f,c
  7440  0020EE  502F               	movf	ECANSendMessage@ptr+1,w,c
  7441  0020F0  22DA               	addwfc	fsr2h,f,c
  7442  0020F2  C02C  FFDF         	movff	ECANSendMessage@temp,indf2
  7443                           
  7444                           ;ECANPoll.c: 732: if ( msgFlags & ECAN_TX_FRAME_BIT )
  7445  0020F6  AA15               	btfss	ECANSendMessage@msgFlags,5,c
  7446  0020F8  D002               	goto	l4083
  7447                           
  7448                           ;ECANPoll.c: 733: temp = 1;
  7449  0020FA  0E01               	movlw	1
  7450  0020FC  D001               	goto	L9
  7451  0020FE                     l4083:
  7452                           
  7453                           ;ECANPoll.c: 735: else;ECANPoll.c: 736: temp = 0;
  7454  0020FE  0E00               	movlw	0
  7455  002100                     L9:
  7456  002100  6E2C               	movwf	ECANSendMessage@temp,c
  7457                           
  7458                           ;ECANPoll.c: 739: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
  7459  002102  0E01               	movlw	1
  7460  002104  242E               	addwf	ECANSendMessage@ptr,w,c
  7461  002106  6E03               	movwf	__CANIDToRegs@ptr,c
  7462  002108  0E00               	movlw	0
  7463  00210A  202F               	addwfc	ECANSendMessage@ptr+1,w,c
  7464  00210C  6E04               	movwf	__CANIDToRegs@ptr+1,c
  7465  00210E  C00E  F005         	movff	ECANSendMessage@id,__CANIDToRegs@val
  7466  002112  C00F  F006         	movff	ECANSendMessage@id+1,__CANIDToRegs@val+1
  7467  002116  C010  F007         	movff	ECANSendMessage@id+2,__CANIDToRegs@val+2
  7468  00211A  C011  F008         	movff	ECANSendMessage@id+3,__CANIDToRegs@val+3
  7469  00211E  C02C  F009         	movff	ECANSendMessage@temp,__CANIDToRegs@type
  7470  002122  EC3A  F00E         	call	__CANIDToRegs	;wreg free
  7471                           
  7472                           ;ECANPoll.c: 742: ptr += 6;
  7473  002126  0E06               	movlw	6
  7474  002128  262E               	addwf	ECANSendMessage@ptr,f,c
  7475  00212A  0E00               	movlw	0
  7476  00212C  222F               	addwfc	ECANSendMessage@ptr+1,f,c
  7477                           
  7478                           ;ECANPoll.c: 744: for ( j = 0 ; j < dataLen; j++ )
  7479  00212E  0E00               	movlw	0
  7480  002130  6E29               	movwf	ECANSendMessage@j,c
  7481  002132  D00F               	goto	l4099
  7482  002134                     l4091:
  7483                           
  7484                           ;ECANPoll.c: 745: *ptr++ = *data++;
  7485  002134  C012  FFD9         	movff	ECANSendMessage@data,fsr2l
  7486  002138  C013  FFDA         	movff	ECANSendMessage@data+1,fsr2h
  7487  00213C  C02E  FFE1         	movff	ECANSendMessage@ptr,fsr1l
  7488  002140  C02F  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
  7489  002144  CFDF FFE7          	movff	indf2,indf1
  7490  002148  4A12               	infsnz	ECANSendMessage@data,f,c
  7491  00214A  2A13               	incf	ECANSendMessage@data+1,f,c
  7492  00214C  4A2E               	infsnz	ECANSendMessage@ptr,f,c
  7493  00214E  2A2F               	incf	ECANSendMessage@ptr+1,f,c
  7494  002150  2A29               	incf	ECANSendMessage@j,f,c
  7495  002152                     l4099:
  7496  002152  5014               	movf	ECANSendMessage@dataLen,w,c
  7497  002154  5C29               	subwf	ECANSendMessage@j,w,c
  7498  002156  A0D8               	btfss	status,0,c
  7499  002158  D7ED               	goto	l4091
  7500                           
  7501                           ;ECANPoll.c: 749: if ( !(*tempPtr & 0x04) )
  7502  00215A  C02A  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
  7503  00215E  C02B  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
  7504  002162  B4DF               	btfsc	indf2,2,c
  7505  002164  D006               	goto	l4105
  7506                           
  7507                           ;ECANPoll.c: 750: *tempPtr |= 0x08;
  7508  002166  C02A  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
  7509  00216A  C02B  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
  7510  00216E  0E00               	movlw	0
  7511  002170  86DB               	bsf	plusw2,3,c
  7512  002172                     l4105:
  7513                           
  7514                           ;ECANPoll.c: 752: return TRUE;
  7515  002172  0E01               	movlw	1
  7516  002174  0012               	return	
  7517  002176                     l4109:
  7518  002176  2A2D               	incf	ECANSendMessage@i,f,c
  7519  002178  0E01               	movlw	1
  7520  00217A  642D               	cpfsgt	ECANSendMessage@i,c
  7521  00217C  D786               	goto	l4063
  7522                           
  7523                           ;ECANPoll.c: 753: };ECANPoll.c: 754: };ECANPoll.c: 757: return FALSE;
  7524  00217E  0E00               	movlw	0
  7525  002180  0012               	return		;funcret
  7526  002182                     __end_of_ECANSendMessage:
  7527                           	opt callstack 0
  7528                           
  7529 ;; *************** function __CANIDToRegs *****************
  7530 ;; Defined at:
  7531 ;;		line 1097 in file "can/ECANPoll.c"
  7532 ;; Parameters:    Size  Location     Type
  7533 ;;  ptr             2    2[COMRAM] PTR unsigned char 
  7534 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), 
  7535 ;;  val             4    4[COMRAM] unsigned long 
  7536 ;;  type            1    8[COMRAM] unsigned char 
  7537 ;; Auto vars:     Size  Location     Type
  7538 ;;  Value           2   11[COMRAM] PTR struct _CAN_MESSAGE_
  7539 ;;		 -> _CANIDToRegs@val(4), 
  7540 ;; Return value:  Size  Location     Type
  7541 ;;                  1    wreg      void 
  7542 ;; Registers used:
  7543 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  7544 ;; Tracked objects:
  7545 ;;		On entry : 0/0
  7546 ;;		On exit  : 0/0
  7547 ;;		Unchanged: 0/0
  7548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7549 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7550 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7551 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7552 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7553 ;;Total ram usage:       11 bytes
  7554 ;; Hardware stack levels used:    1
  7555 ;; Hardware stack levels required when called:    2
  7556 ;; This function calls:
  7557 ;;		Nothing
  7558 ;; This function is called by:
  7559 ;;		_ECANSendMessage
  7560 ;; This function uses a non-reentrant model
  7561 ;;
  7562                           
  7563                           	psect	text30
  7564  001C74                     __ptext30:
  7565                           	opt callstack 0
  7566  001C74                     __CANIDToRegs:
  7567                           	opt callstack 25
  7568                           
  7569                           ;ECANPoll.c: 1101: CAN_MESSAGE_ID *Value;;ECANPoll.c: 1103: Value = (CAN_MESSAGE_ID*)&va
      +                          l;
  7570                           
  7571                           ;incstack = 0
  7572  001C74  0E05               	movlw	low __CANIDToRegs@val
  7573  001C76  6E0C               	movwf	__CANIDToRegs@Value,c
  7574  001C78  0E00               	movlw	high __CANIDToRegs@val
  7575  001C7A  6E0D               	movwf	__CANIDToRegs@Value+1,c
  7576                           
  7577                           ;ECANPoll.c: 1105: if ( type == 0 )
  7578  001C7C  5009               	movf	__CANIDToRegs@type,w,c
  7579  001C7E  A4D8               	btfss	status,2,c
  7580  001C80  D03A               	goto	l3631
  7581                           
  7582                           ;ECANPoll.c: 1106: {;ECANPoll.c: 1108: *ptr = Value->BYTES.BYTE_1 >> 3;
  7583  001C82  C00C  FFD9         	movff	__CANIDToRegs@Value,fsr2l
  7584  001C86  C00D  FFDA         	movff	__CANIDToRegs@Value+1,fsr2h
  7585  001C8A  50DF               	movf	indf2,w,c
  7586  001C8C  6E0A               	movwf	??__CANIDToRegs& (0+255),c
  7587  001C8E  90D8               	bcf	status,0,c
  7588  001C90  320A               	rrcf	??__CANIDToRegs,f,c
  7589  001C92  90D8               	bcf	status,0,c
  7590  001C94  320A               	rrcf	??__CANIDToRegs,f,c
  7591  001C96  90D8               	bcf	status,0,c
  7592  001C98  300A               	rrcf	??__CANIDToRegs,w,c
  7593  001C9A  C003  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  7594  001C9E  C004  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  7595  001CA2  6EDF               	movwf	indf2,c
  7596                           
  7597                           ;ECANPoll.c: 1109: *ptr |= (Value->BYTES.BYTE_2 << 5);
  7598  001CA4  EE20 F001          	lfsr	2,1
  7599  001CA8  500C               	movf	__CANIDToRegs@Value,w,c
  7600  001CAA  26D9               	addwf	fsr2l,f,c
  7601  001CAC  500D               	movf	__CANIDToRegs@Value+1,w,c
  7602  001CAE  22DA               	addwfc	fsr2h,f,c
  7603  001CB0  50DF               	movf	indf2,w,c
  7604  001CB2  6E0A               	movwf	??__CANIDToRegs& (0+255),c
  7605  001CB4  0E05               	movlw	5
  7606  001CB6  6E0B               	movwf	(??__CANIDToRegs+1)& (0+255),c
  7607  001CB8                     u3575:
  7608  001CB8  90D8               	bcf	status,0,c
  7609  001CBA  360A               	rlcf	??__CANIDToRegs,f,c
  7610  001CBC  2E0B               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  7611  001CBE  D7FC               	goto	u3575
  7612  001CC0  C003  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  7613  001CC4  C004  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  7614  001CC8  500A               	movf	??__CANIDToRegs,w,c
  7615  001CCA  12DF               	iorwf	indf2,f,c
  7616                           
  7617                           ;ECANPoll.c: 1110: ptr++;
  7618  001CCC  4A03               	infsnz	__CANIDToRegs@ptr,f,c
  7619  001CCE  2A04               	incf	__CANIDToRegs@ptr+1,f,c
  7620                           
  7621                           ;ECANPoll.c: 1111: *ptr = Value->BYTES.BYTE_1 << 5;
  7622  001CD0  C00C  FFD9         	movff	__CANIDToRegs@Value,fsr2l
  7623  001CD4  C00D  FFDA         	movff	__CANIDToRegs@Value+1,fsr2h
  7624  001CD8  50DF               	movf	indf2,w,c
  7625  001CDA  6E0A               	movwf	??__CANIDToRegs& (0+255),c
  7626  001CDC  0E05               	movlw	5
  7627  001CDE  6E0B               	movwf	(??__CANIDToRegs+1)& (0+255),c
  7628  001CE0                     u3585:
  7629  001CE0  90D8               	bcf	status,0,c
  7630  001CE2  360A               	rlcf	??__CANIDToRegs,f,c
  7631  001CE4  2E0B               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  7632  001CE6  D7FC               	goto	u3585
  7633  001CE8  500A               	movf	??__CANIDToRegs,w,c
  7634  001CEA  C003  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  7635  001CEE  C004  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  7636  001CF2  6EDF               	movwf	indf2,c
  7637                           
  7638                           ;ECANPoll.c: 1112: }
  7639  001CF4  0012               	return	
  7640  001CF6                     l3631:
  7641                           
  7642                           ;ECANPoll.c: 1113: else;ECANPoll.c: 1114: {;ECANPoll.c: 1116: *ptr = Value->BYTES.BYTE_3
      +                           >> 5;
  7643  001CF6  EE20 F002          	lfsr	2,2
  7644  001CFA  500C               	movf	__CANIDToRegs@Value,w,c
  7645  001CFC  26D9               	addwf	fsr2l,f,c
  7646  001CFE  500D               	movf	__CANIDToRegs@Value+1,w,c
  7647  001D00  22DA               	addwfc	fsr2h,f,c
  7648  001D02  50DF               	movf	indf2,w,c
  7649  001D04  6E0A               	movwf	??__CANIDToRegs& (0+255),c
  7650  001D06  0E05               	movlw	5
  7651  001D08  6E0B               	movwf	(??__CANIDToRegs+1)& (0+255),c
  7652  001D0A                     u3595:
  7653  001D0A  90D8               	bcf	status,0,c
  7654  001D0C  320A               	rrcf	??__CANIDToRegs,f,c
  7655  001D0E  2E0B               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  7656  001D10  D7FC               	goto	u3595
  7657  001D12  500A               	movf	??__CANIDToRegs,w,c
  7658  001D14  C003  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  7659  001D18  C004  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  7660  001D1C  6EDF               	movwf	indf2,c
  7661                           
  7662                           ;ECANPoll.c: 1117: *ptr |= Value->BYTES.BYTE_4 << 3;
  7663  001D1E  EE20 F003          	lfsr	2,3
  7664  001D22  500C               	movf	__CANIDToRegs@Value,w,c
  7665  001D24  26D9               	addwf	fsr2l,f,c
  7666  001D26  500D               	movf	__CANIDToRegs@Value+1,w,c
  7667  001D28  22DA               	addwfc	fsr2h,f,c
  7668  001D2A  50DF               	movf	indf2,w,c
  7669  001D2C  6E0A               	movwf	??__CANIDToRegs& (0+255),c
  7670  001D2E  90D8               	bcf	status,0,c
  7671  001D30  360A               	rlcf	??__CANIDToRegs,f,c
  7672  001D32  90D8               	bcf	status,0,c
  7673  001D34  360A               	rlcf	??__CANIDToRegs,f,c
  7674  001D36  90D8               	bcf	status,0,c
  7675  001D38  360A               	rlcf	??__CANIDToRegs,f,c
  7676  001D3A  C003  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  7677  001D3E  C004  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  7678  001D42  500A               	movf	??__CANIDToRegs,w,c
  7679  001D44  12DF               	iorwf	indf2,f,c
  7680                           
  7681                           ;ECANPoll.c: 1118: ptr++;
  7682  001D46  4A03               	infsnz	__CANIDToRegs@ptr,f,c
  7683  001D48  2A04               	incf	__CANIDToRegs@ptr+1,f,c
  7684                           
  7685                           ;ECANPoll.c: 1119: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
  7686  001D4A  EE20 F002          	lfsr	2,2
  7687  001D4E  500C               	movf	__CANIDToRegs@Value,w,c
  7688  001D50  26D9               	addwf	fsr2l,f,c
  7689  001D52  500D               	movf	__CANIDToRegs@Value+1,w,c
  7690  001D54  22DA               	addwfc	fsr2h,f,c
  7691  001D56  50DF               	movf	indf2,w,c
  7692  001D58  6E0A               	movwf	??__CANIDToRegs& (0+255),c
  7693  001D5A  90D8               	bcf	status,0,c
  7694  001D5C  360A               	rlcf	??__CANIDToRegs,f,c
  7695  001D5E  90D8               	bcf	status,0,c
  7696  001D60  360A               	rlcf	??__CANIDToRegs,f,c
  7697  001D62  90D8               	bcf	status,0,c
  7698  001D64  340A               	rlcf	??__CANIDToRegs,w,c
  7699  001D66  0BE0               	andlw	224
  7700  001D68  C003  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  7701  001D6C  C004  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  7702  001D70  6EDF               	movwf	indf2,c
  7703                           
  7704                           ;ECANPoll.c: 1121: *ptr |= 0b00001000;
  7705  001D72  C003  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  7706  001D76  C004  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  7707  001D7A  0E00               	movlw	0
  7708  001D7C  86DB               	bsf	plusw2,3,c
  7709                           
  7710                           ;ECANPoll.c: 1122: *ptr |= Value->BYTES.BYTE_3 & 0x03;
  7711  001D7E  EE20 F002          	lfsr	2,2
  7712  001D82  500C               	movf	__CANIDToRegs@Value,w,c
  7713  001D84  26D9               	addwf	fsr2l,f,c
  7714  001D86  500D               	movf	__CANIDToRegs@Value+1,w,c
  7715  001D88  22DA               	addwfc	fsr2h,f,c
  7716  001D8A  50DF               	movf	indf2,w,c
  7717  001D8C  6E0A               	movwf	??__CANIDToRegs& (0+255),c
  7718  001D8E  0E03               	movlw	3
  7719  001D90  160A               	andwf	??__CANIDToRegs,f,c
  7720  001D92  C003  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  7721  001D96  C004  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  7722  001D9A  500A               	movf	??__CANIDToRegs,w,c
  7723  001D9C  12DF               	iorwf	indf2,f,c
  7724                           
  7725                           ;ECANPoll.c: 1123: ptr++;
  7726  001D9E  4A03               	infsnz	__CANIDToRegs@ptr,f,c
  7727  001DA0  2A04               	incf	__CANIDToRegs@ptr+1,f,c
  7728                           
  7729                           ;ECANPoll.c: 1124: *ptr = Value->BYTES.BYTE_2;
  7730  001DA2  EE20 F001          	lfsr	2,1
  7731  001DA6  500C               	movf	__CANIDToRegs@Value,w,c
  7732  001DA8  26D9               	addwf	fsr2l,f,c
  7733  001DAA  500D               	movf	__CANIDToRegs@Value+1,w,c
  7734  001DAC  22DA               	addwfc	fsr2h,f,c
  7735  001DAE  C003  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
  7736  001DB2  C004  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
  7737  001DB6  CFDF FFE7          	movff	indf2,indf1
  7738                           
  7739                           ;ECANPoll.c: 1125: ptr++;
  7740  001DBA  4A03               	infsnz	__CANIDToRegs@ptr,f,c
  7741  001DBC  2A04               	incf	__CANIDToRegs@ptr+1,f,c
  7742                           
  7743                           ;ECANPoll.c: 1126: *ptr = Value->BYTES.BYTE_1;
  7744  001DBE  C00C  FFD9         	movff	__CANIDToRegs@Value,fsr2l
  7745  001DC2  C00D  FFDA         	movff	__CANIDToRegs@Value+1,fsr2h
  7746  001DC6  C003  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
  7747  001DCA  C004  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
  7748  001DCE  CFDF FFE7          	movff	indf2,indf1
  7749  001DD2  0012               	return		;funcret
  7750  001DD4                     __end_of__CANIDToRegs:
  7751                           	opt callstack 0
  7752                           
  7753 ;; *************** function _ECANReceiveMessage *****************
  7754 ;; Defined at:
  7755 ;;		line 796 in file "can/ECANPoll.c"
  7756 ;; Parameters:    Size  Location     Type
  7757 ;;  id              2   11[COMRAM] PTR unsigned long 
  7758 ;;		 -> uds_get_vin@id(4), uds_get_soc@id(4), 
  7759 ;;  data            2   13[COMRAM] PTR unsigned char 
  7760 ;;		 -> uds_get_vin@msg2(32), uds_get_soc@msg2(32), 
  7761 ;;  dataLen         2   15[COMRAM] PTR unsigned char 
  7762 ;;		 -> uds_get_vin@len(1), uds_get_soc@len(1), 
  7763 ;;  msgFlags        2   17[COMRAM] PTR enum E12054
  7764 ;;		 -> uds_get_vin@flags(1), uds_get_soc@flags(1), 
  7765 ;; Auto vars:     Size  Location     Type
  7766 ;;  ptr             2   22[COMRAM] PTR unsigned char 
  7767 ;;		 -> RXB1CON(1), RXB0CON(1), 
  7768 ;;  savedPtr        2   19[COMRAM] PTR unsigned char 
  7769 ;;		 -> RXB1CON(1), RXB0CON(1), 
  7770 ;;  temp            1   24[COMRAM] struct _BYTE_VAL
  7771 ;;  i               1   21[COMRAM] unsigned char 
  7772 ;; Return value:  Size  Location     Type
  7773 ;;                  1    wreg      enum E12262
  7774 ;; Registers used:
  7775 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7776 ;; Tracked objects:
  7777 ;;		On entry : 0/0
  7778 ;;		On exit  : 0/0
  7779 ;;		Unchanged: 0/0
  7780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7781 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7782 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7784 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7785 ;;Total ram usage:       14 bytes
  7786 ;; Hardware stack levels used:    1
  7787 ;; Hardware stack levels required when called:    3
  7788 ;; This function calls:
  7789 ;;		__RegsToCANID
  7790 ;; This function is called by:
  7791 ;;		_uds_get_soc
  7792 ;;		_uds_get_vin
  7793 ;; This function uses a non-reentrant model
  7794 ;;
  7795                           
  7796                           	psect	text31
  7797  001DD4                     __ptext31:
  7798                           	opt callstack 0
  7799  001DD4                     _ECANReceiveMessage:
  7800                           	opt callstack 25
  7801                           
  7802                           ;ECANPoll.c: 805: BYTE *ptr, *savedPtr;;ECANPoll.c: 806: char i;;ECANPoll.c: 807: BYTE_V
      +                          AL temp;;ECANPoll.c: 809: _ECANRxFilterHitInfo.Val = 0;
  7803                           
  7804                           ;incstack = 0
  7805  001DD4  0E00               	movlw	0
  7806  001DD6  0100               	movlb	0	; () banked
  7807  001DD8  6FCA               	movwf	__ECANRxFilterHitInfo& (0+255),b
  7808                           
  7809                           ; BSR set to: 0
  7810                           ;ECANPoll.c: 819: {;ECANPoll.c: 821: if ( RXB0FUL )
  7811  001DDA  AE60               	btfss	3936,7,c	;volatile
  7812  001DDC  D012               	goto	l389
  7813                           
  7814                           ; BSR set to: 0
  7815                           ;ECANPoll.c: 822: {;ECANPoll.c: 824: RXB0IF = 0;
  7816  001DDE  9077               	bcf	3959,0,c	;volatile
  7817                           
  7818                           ;ECANPoll.c: 827: if ( RXB0OVFL )
  7819  001DE0  AE71               	btfss	3953,7,c	;volatile
  7820  001DE2  D007               	goto	l4127
  7821                           
  7822                           ; BSR set to: 0
  7823                           ;ECANPoll.c: 828: {;ECANPoll.c: 829: *msgFlags |= ECAN_RX_OVERFLOW;
  7824  001DE4  C012  FFD9         	movff	ECANReceiveMessage@msgFlags,fsr2l
  7825  001DE8  C013  FFDA         	movff	ECANReceiveMessage@msgFlags+1,fsr2h
  7826  001DEC  0E00               	movlw	0
  7827  001DEE  86DB               	bsf	plusw2,3,c
  7828                           
  7829                           ; BSR set to: 0
  7830                           ;ECANPoll.c: 830: RXB0OVFL = 0;
  7831  001DF0  9E71               	bcf	3953,7,c	;volatile
  7832  001DF2                     l4127:
  7833                           
  7834                           ; BSR set to: 0
  7835                           ;ECANPoll.c: 831: };ECANPoll.c: 833: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
  7836  001DF2  A060               	btfss	3936,0,c	;volatile
  7837  001DF4  D002               	bra	u4325
  7838  001DF6  81CA               	bsf	__ECANRxFilterHitInfo& (0+255),0,b
  7839  001DF8  D002               	bra	u4327
  7840  001DFA                     u4325:
  7841  001DFA  0100               	movlb	0	; () banked
  7842  001DFC  91CA               	bcf	__ECANRxFilterHitInfo& (0+255),0,b
  7843  001DFE                     u4327:
  7844                           
  7845                           ; BSR set to: 0
  7846                           ;ECANPoll.c: 835: ptr = (BYTE*)&RXB0CON;
  7847  001DFE  0E60               	movlw	96
  7848  001E00  D01C               	goto	L10
  7849  001E02                     l389:
  7850                           
  7851                           ; BSR set to: 0
  7852                           ;ECANPoll.c: 838: else if ( B1CONbits.RXFUL )
  7853  001E02  010E               	movlb	14	; () banked
  7854  001E04  AF90               	btfss	144,7,b	;volatile
  7855  001E06  D01D               	goto	l4145
  7856                           
  7857                           ; BSR set to: 14
  7858                           ;ECANPoll.c: 839: {;ECANPoll.c: 841: RXB1IF = 0;
  7859  001E08  9277               	bcf	3959,1,c	;volatile
  7860                           
  7861                           ;ECANPoll.c: 844: if ( RXB1OVFL )
  7862  001E0A  AC71               	btfss	3953,6,c	;volatile
  7863  001E0C  D007               	goto	l4137
  7864                           
  7865                           ; BSR set to: 14
  7866                           ;ECANPoll.c: 845: {;ECANPoll.c: 846: *msgFlags |= ECAN_RX_OVERFLOW;
  7867  001E0E  C012  FFD9         	movff	ECANReceiveMessage@msgFlags,fsr2l
  7868  001E12  C013  FFDA         	movff	ECANReceiveMessage@msgFlags+1,fsr2h
  7869  001E16  0E00               	movlw	0
  7870  001E18  86DB               	bsf	plusw2,3,c
  7871                           
  7872                           ; BSR set to: 14
  7873                           ;ECANPoll.c: 847: RXB1OVFL = 0;
  7874  001E1A  9C71               	bcf	3953,6,c	;volatile
  7875  001E1C                     l4137:
  7876                           
  7877                           ; BSR set to: 14
  7878                           ;ECANPoll.c: 848: };ECANPoll.c: 850: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
  7879  001E1C  010F               	movlb	15	; () banked
  7880  001E1E  5130               	movf	48,w,b	;volatile
  7881  001E20  0B07               	andlw	7
  7882  001E22  0100               	movlb	0	; () banked
  7883  001E24  6FCA               	movwf	__ECANRxFilterHitInfo& (0+255),b
  7884                           
  7885                           ; BSR set to: 0
  7886                           ;ECANPoll.c: 852: if ( _ECANRxFilterHitInfo.Val < 0x02 )
  7887  001E26  0E02               	movlw	2
  7888  001E28  61CA               	cpfslt	__ECANRxFilterHitInfo& (0+255),b
  7889  001E2A  D006               	goto	l4143
  7890                           
  7891                           ; BSR set to: 0
  7892                           ;ECANPoll.c: 853: *msgFlags |= ECAN_RX_DBL_BUFFERED;
  7893  001E2C  C012  FFD9         	movff	ECANReceiveMessage@msgFlags,fsr2l
  7894  001E30  C013  FFDA         	movff	ECANReceiveMessage@msgFlags+1,fsr2h
  7895  001E34  0E00               	movlw	0
  7896  001E36  8EDB               	bsf	plusw2,7,c
  7897  001E38                     l4143:
  7898                           
  7899                           ; BSR set to: 0
  7900                           ;ECANPoll.c: 856: ptr = (BYTE*)&RXB1CON;
  7901  001E38  0E30               	movlw	48
  7902  001E3A                     L10:
  7903  001E3A  6E17               	movwf	ECANReceiveMessage@ptr,c
  7904  001E3C  0E0F               	movlw	15
  7905  001E3E  6E18               	movwf	ECANReceiveMessage@ptr+1,c
  7906                           
  7907                           ;ECANPoll.c: 857: }
  7908  001E40  D002               	goto	l4149
  7909  001E42                     l4145:
  7910                           
  7911                           ; BSR set to: 14
  7912                           ;ECANPoll.c: 858: else;ECANPoll.c: 859: return FALSE;
  7913  001E42  0E00               	movlw	0
  7914  001E44  0012               	return	
  7915  001E46                     l4149:
  7916                           
  7917                           ; BSR set to: 0
  7918                           ;ECANPoll.c: 939: savedPtr = ptr;
  7919  001E46  C017  F014         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
  7920  001E4A  C018  F015         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
  7921                           
  7922                           ; BSR set to: 0
  7923                           ;ECANPoll.c: 940: *msgFlags = 0;
  7924  001E4E  C012  FFD9         	movff	ECANReceiveMessage@msgFlags,fsr2l
  7925  001E52  C013  FFDA         	movff	ECANReceiveMessage@msgFlags+1,fsr2h
  7926  001E56  0E00               	movlw	0
  7927  001E58  6EDF               	movwf	indf2,c
  7928                           
  7929                           ; BSR set to: 0
  7930                           ;ECANPoll.c: 943: temp.Val = *(ptr+5);
  7931  001E5A  EE20 F005          	lfsr	2,5
  7932  001E5E  5017               	movf	ECANReceiveMessage@ptr,w,c
  7933  001E60  26D9               	addwf	fsr2l,f,c
  7934  001E62  5018               	movf	ECANReceiveMessage@ptr+1,w,c
  7935  001E64  22DA               	addwfc	fsr2h,f,c
  7936  001E66  50DF               	movf	indf2,w,c
  7937  001E68  6E19               	movwf	ECANReceiveMessage@temp,c
  7938                           
  7939                           ; BSR set to: 0
  7940                           ;ECANPoll.c: 944: *dataLen = temp.Val & 0b00001111;
  7941  001E6A  5019               	movf	ECANReceiveMessage@temp,w,c
  7942  001E6C  0B0F               	andlw	15
  7943  001E6E  C010  FFD9         	movff	ECANReceiveMessage@dataLen,fsr2l
  7944  001E72  C011  FFDA         	movff	ECANReceiveMessage@dataLen+1,fsr2h
  7945  001E76  6EDF               	movwf	indf2,c
  7946                           
  7947                           ; BSR set to: 0
  7948                           ;ECANPoll.c: 947: if ( temp.bits.b6 )
  7949  001E78  AC19               	btfss	ECANReceiveMessage@temp,6,c
  7950  001E7A  D006               	goto	l398
  7951                           
  7952                           ; BSR set to: 0
  7953                           ;ECANPoll.c: 948: *msgFlags |= ECAN_RX_RTR_FRAME;
  7954  001E7C  C012  FFD9         	movff	ECANReceiveMessage@msgFlags,fsr2l
  7955  001E80  C013  FFDA         	movff	ECANReceiveMessage@msgFlags+1,fsr2h
  7956  001E84  0E00               	movlw	0
  7957  001E86  8CDB               	bsf	plusw2,6,c
  7958  001E88                     l398:
  7959                           
  7960                           ; BSR set to: 0
  7961                           ;ECANPoll.c: 951: temp.Val = *(ptr+2);
  7962  001E88  EE20 F002          	lfsr	2,2
  7963  001E8C  5017               	movf	ECANReceiveMessage@ptr,w,c
  7964  001E8E  26D9               	addwf	fsr2l,f,c
  7965  001E90  5018               	movf	ECANReceiveMessage@ptr+1,w,c
  7966  001E92  22DA               	addwfc	fsr2h,f,c
  7967  001E94  50DF               	movf	indf2,w,c
  7968  001E96  6E19               	movwf	ECANReceiveMessage@temp,c
  7969                           
  7970                           ; BSR set to: 0
  7971                           ;ECANPoll.c: 952: if ( temp.bits.b3 )
  7972  001E98  A619               	btfss	ECANReceiveMessage@temp,3,c
  7973  001E9A  D008               	goto	l4167
  7974                           
  7975                           ; BSR set to: 0
  7976                           ;ECANPoll.c: 953: {;ECANPoll.c: 954: *msgFlags |= ECAN_RX_XTD_FRAME;
  7977  001E9C  C012  FFD9         	movff	ECANReceiveMessage@msgFlags,fsr2l
  7978  001EA0  C013  FFDA         	movff	ECANReceiveMessage@msgFlags+1,fsr2h
  7979  001EA4  0E00               	movlw	0
  7980  001EA6  8ADB               	bsf	plusw2,5,c
  7981                           
  7982                           ; BSR set to: 0
  7983                           ;ECANPoll.c: 955: temp.Val = 1;
  7984  001EA8  0E01               	movlw	1
  7985  001EAA  D001               	goto	L11
  7986  001EAC                     l4167:
  7987                           
  7988                           ; BSR set to: 0
  7989                           ;ECANPoll.c: 957: else;ECANPoll.c: 958: temp.Val = 0;
  7990  001EAC  0E00               	movlw	0
  7991  001EAE                     L11:
  7992  001EAE  6E19               	movwf	ECANReceiveMessage@temp,c
  7993                           
  7994                           ; BSR set to: 0
  7995                           ;ECANPoll.c: 960: _RegsToCANID(ptr+1, id, temp.Val);
  7996  001EB0  0E01               	movlw	1
  7997  001EB2  2417               	addwf	ECANReceiveMessage@ptr,w,c
  7998  001EB4  6E03               	movwf	__RegsToCANID@ptr,c
  7999  001EB6  0E00               	movlw	0
  8000  001EB8  2018               	addwfc	ECANReceiveMessage@ptr+1,w,c
  8001  001EBA  6E04               	movwf	__RegsToCANID@ptr+1,c
  8002  001EBC  C00C  F005         	movff	ECANReceiveMessage@id,__RegsToCANID@val
  8003  001EC0  C00D  F006         	movff	ECANReceiveMessage@id+1,__RegsToCANID@val+1
  8004  001EC4  C019  F007         	movff	ECANReceiveMessage@temp,__RegsToCANID@type
  8005  001EC8  ECC9  F00C         	call	__RegsToCANID	;wreg free
  8006                           
  8007                           ;ECANPoll.c: 963: ptr += 6;
  8008  001ECC  0E06               	movlw	6
  8009  001ECE  2617               	addwf	ECANReceiveMessage@ptr,f,c
  8010  001ED0  0E00               	movlw	0
  8011  001ED2  2218               	addwfc	ECANReceiveMessage@ptr+1,f,c
  8012                           
  8013                           ;ECANPoll.c: 964: temp.Val = *dataLen;
  8014  001ED4  C010  FFD9         	movff	ECANReceiveMessage@dataLen,fsr2l
  8015  001ED8  C011  FFDA         	movff	ECANReceiveMessage@dataLen+1,fsr2h
  8016  001EDC  50DF               	movf	indf2,w,c
  8017  001EDE  6E19               	movwf	ECANReceiveMessage@temp,c
  8018                           
  8019                           ;ECANPoll.c: 965: for ( i = 0; i < temp.Val; i++ )
  8020  001EE0  0E00               	movlw	0
  8021  001EE2  6E16               	movwf	ECANReceiveMessage@i,c
  8022  001EE4  D00F               	goto	l4185
  8023  001EE6                     l4177:
  8024                           
  8025                           ;ECANPoll.c: 966: *data++ = *ptr++;
  8026  001EE6  C017  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
  8027  001EEA  C018  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
  8028  001EEE  C00E  FFE1         	movff	ECANReceiveMessage@data,fsr1l
  8029  001EF2  C00F  FFE2         	movff	ECANReceiveMessage@data+1,fsr1h
  8030  001EF6  CFDF FFE7          	movff	indf2,indf1
  8031  001EFA  4A17               	infsnz	ECANReceiveMessage@ptr,f,c
  8032  001EFC  2A18               	incf	ECANReceiveMessage@ptr+1,f,c
  8033  001EFE  4A0E               	infsnz	ECANReceiveMessage@data,f,c
  8034  001F00  2A0F               	incf	ECANReceiveMessage@data+1,f,c
  8035  001F02  2A16               	incf	ECANReceiveMessage@i,f,c
  8036  001F04                     l4185:
  8037  001F04  5019               	movf	ECANReceiveMessage@temp,w,c
  8038  001F06  5C16               	subwf	ECANReceiveMessage@i,w,c
  8039  001F08  A0D8               	btfss	status,0,c
  8040  001F0A  D7ED               	goto	l4177
  8041                           
  8042                           ;ECANPoll.c: 969: if ( IRXIF )
  8043  001F0C  AE77               	btfss	3959,7,c	;volatile
  8044  001F0E  D007               	goto	l4191
  8045                           
  8046                           ;ECANPoll.c: 970: {;ECANPoll.c: 971: *msgFlags |= ECAN_RX_INVALID_MSG;
  8047  001F10  C012  FFD9         	movff	ECANReceiveMessage@msgFlags,fsr2l
  8048  001F14  C013  FFDA         	movff	ECANReceiveMessage@msgFlags+1,fsr2h
  8049  001F18  0E00               	movlw	0
  8050  001F1A  88DB               	bsf	plusw2,4,c
  8051                           
  8052                           ;ECANPoll.c: 972: IRXIF = 0;
  8053  001F1C  9E77               	bcf	3959,7,c	;volatile
  8054  001F1E                     l4191:
  8055                           
  8056                           ;ECANPoll.c: 973: };ECANPoll.c: 976: *savedPtr &= 0x7f;
  8057  001F1E  C014  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
  8058  001F22  C015  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
  8059  001F26  0E7F               	movlw	127
  8060  001F28  16DF               	andwf	indf2,f,c
  8061                           
  8062                           ;ECANPoll.c: 991: return TRUE;
  8063  001F2A  0E01               	movlw	1
  8064  001F2C  0012               	return		;funcret
  8065  001F2E                     __end_of_ECANReceiveMessage:
  8066                           	opt callstack 0
  8067                           
  8068 ;; *************** function __RegsToCANID *****************
  8069 ;; Defined at:
  8070 ;;		line 1154 in file "can/ECANPoll.c"
  8071 ;; Parameters:    Size  Location     Type
  8072 ;;  ptr             2    2[COMRAM] PTR unsigned char 
  8073 ;;		 -> RXB1CON(1), RXB0CON(1), 
  8074 ;;  val             2    4[COMRAM] PTR unsigned long 
  8075 ;;		 -> uds_get_vin@id(4), uds_get_soc@id(4), 
  8076 ;;  type            1    6[COMRAM] unsigned char 
  8077 ;; Auto vars:     Size  Location     Type
  8078 ;;  Value           2    9[COMRAM] PTR struct _CAN_MESSAGE_
  8079 ;;		 -> uds_get_vin@id(4), uds_get_soc@id(4), 
  8080 ;; Return value:  Size  Location     Type
  8081 ;;                  1    wreg      void 
  8082 ;; Registers used:
  8083 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8084 ;; Tracked objects:
  8085 ;;		On entry : 0/0
  8086 ;;		On exit  : 0/0
  8087 ;;		Unchanged: 0/0
  8088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8089 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8090 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8091 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8092 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8093 ;;Total ram usage:        9 bytes
  8094 ;; Hardware stack levels used:    1
  8095 ;; Hardware stack levels required when called:    2
  8096 ;; This function calls:
  8097 ;;		Nothing
  8098 ;; This function is called by:
  8099 ;;		_ECANReceiveMessage
  8100 ;; This function uses a non-reentrant model
  8101 ;;
  8102                           
  8103                           	psect	text32
  8104  001992                     __ptext32:
  8105                           	opt callstack 0
  8106  001992                     __RegsToCANID:
  8107                           	opt callstack 25
  8108                           
  8109                           ;ECANPoll.c: 1158: CAN_MESSAGE_ID *Value;;ECANPoll.c: 1160: Value = (CAN_MESSAGE_ID*)val
      +                          ;
  8110                           
  8111                           ;incstack = 0
  8112  001992  C005  F00A         	movff	__RegsToCANID@val,__RegsToCANID@Value
  8113  001996  C006  F00B         	movff	__RegsToCANID@val+1,__RegsToCANID@Value+1
  8114                           
  8115                           ;ECANPoll.c: 1162: if ( type == 0 )
  8116  00199A  5007               	movf	__RegsToCANID@type,w,c
  8117  00199C  A4D8               	btfss	status,2,c
  8118  00199E  D04A               	goto	l3663
  8119                           
  8120                           ;ECANPoll.c: 1163: {;ECANPoll.c: 1165: Value->BYTES.BYTE_1 = (*ptr << 3);
  8121  0019A0  C003  FFD9         	movff	__RegsToCANID@ptr,fsr2l
  8122  0019A4  C004  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
  8123  0019A8  50DF               	movf	indf2,w,c
  8124  0019AA  6E08               	movwf	??__RegsToCANID& (0+255),c
  8125  0019AC  90D8               	bcf	status,0,c
  8126  0019AE  3608               	rlcf	??__RegsToCANID,f,c
  8127  0019B0  90D8               	bcf	status,0,c
  8128  0019B2  3608               	rlcf	??__RegsToCANID,f,c
  8129  0019B4  90D8               	bcf	status,0,c
  8130  0019B6  3408               	rlcf	??__RegsToCANID,w,c
  8131  0019B8  C00A  FFD9         	movff	__RegsToCANID@Value,fsr2l
  8132  0019BC  C00B  FFDA         	movff	__RegsToCANID@Value+1,fsr2h
  8133  0019C0  6EDF               	movwf	indf2,c
  8134                           
  8135                           ;ECANPoll.c: 1166: Value->BYTES.BYTE_2 = *ptr >> 5;
  8136  0019C2  EE20 F001          	lfsr	2,1
  8137  0019C6  500A               	movf	__RegsToCANID@Value,w,c
  8138  0019C8  26D9               	addwf	fsr2l,f,c
  8139  0019CA  500B               	movf	__RegsToCANID@Value+1,w,c
  8140  0019CC  22DA               	addwfc	fsr2h,f,c
  8141  0019CE  C003  FFE1         	movff	__RegsToCANID@ptr,fsr1l
  8142  0019D2  C004  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
  8143  0019D6  50E7               	movf	indf1,w,c
  8144  0019D8  6E08               	movwf	??__RegsToCANID& (0+255),c
  8145  0019DA  0E05               	movlw	5
  8146  0019DC  6E09               	movwf	(??__RegsToCANID+1)& (0+255),c
  8147  0019DE                     u3615:
  8148  0019DE  90D8               	bcf	status,0,c
  8149  0019E0  3208               	rrcf	??__RegsToCANID,f,c
  8150  0019E2  2E09               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
  8151  0019E4  D7FC               	goto	u3615
  8152  0019E6  5008               	movf	??__RegsToCANID,w,c
  8153  0019E8  6EDF               	movwf	indf2,c
  8154                           
  8155                           ;ECANPoll.c: 1167: ptr++;
  8156  0019EA  4A03               	infsnz	__RegsToCANID@ptr,f,c
  8157  0019EC  2A04               	incf	__RegsToCANID@ptr+1,f,c
  8158                           
  8159                           ;ECANPoll.c: 1168: Value->BYTES.BYTE_1 |= (*ptr >> 5);
  8160  0019EE  C003  FFD9         	movff	__RegsToCANID@ptr,fsr2l
  8161  0019F2  C004  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
  8162  0019F6  50DF               	movf	indf2,w,c
  8163  0019F8  6E08               	movwf	??__RegsToCANID& (0+255),c
  8164  0019FA  0E05               	movlw	5
  8165  0019FC  6E09               	movwf	(??__RegsToCANID+1)& (0+255),c
  8166  0019FE                     u3625:
  8167  0019FE  90D8               	bcf	status,0,c
  8168  001A00  3208               	rrcf	??__RegsToCANID,f,c
  8169  001A02  2E09               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
  8170  001A04  D7FC               	goto	u3625
  8171  001A06  C00A  FFD9         	movff	__RegsToCANID@Value,fsr2l
  8172  001A0A  C00B  FFDA         	movff	__RegsToCANID@Value+1,fsr2h
  8173  001A0E  5008               	movf	??__RegsToCANID,w,c
  8174  001A10  12DF               	iorwf	indf2,f,c
  8175                           
  8176                           ;ECANPoll.c: 1169: Value->BYTES.BYTE_3 = 0x00;
  8177  001A12  EE20 F002          	lfsr	2,2
  8178  001A16  500A               	movf	__RegsToCANID@Value,w,c
  8179  001A18  26D9               	addwf	fsr2l,f,c
  8180  001A1A  500B               	movf	__RegsToCANID@Value+1,w,c
  8181  001A1C  22DA               	addwfc	fsr2h,f,c
  8182  001A1E  0E00               	movlw	0
  8183  001A20  6EDF               	movwf	indf2,c
  8184                           
  8185                           ;ECANPoll.c: 1170: Value->BYTES.BYTE_4 = 0x00;
  8186  001A22  EE20 F003          	lfsr	2,3
  8187  001A26  500A               	movf	__RegsToCANID@Value,w,c
  8188  001A28  26D9               	addwf	fsr2l,f,c
  8189  001A2A  500B               	movf	__RegsToCANID@Value+1,w,c
  8190  001A2C  22DA               	addwfc	fsr2h,f,c
  8191  001A2E  0E00               	movlw	0
  8192  001A30  6EDF               	movwf	indf2,c
  8193                           
  8194                           ;ECANPoll.c: 1171: }
  8195  001A32  0012               	return	
  8196  001A34                     l3663:
  8197                           
  8198                           ;ECANPoll.c: 1172: else;ECANPoll.c: 1173: {;ECANPoll.c: 1175: Value->BYTES.BYTE_3 = (*pt
      +                          r << 5);
  8199  001A34  EE20 F002          	lfsr	2,2
  8200  001A38  500A               	movf	__RegsToCANID@Value,w,c
  8201  001A3A  26D9               	addwf	fsr2l,f,c
  8202  001A3C  500B               	movf	__RegsToCANID@Value+1,w,c
  8203  001A3E  22DA               	addwfc	fsr2h,f,c
  8204  001A40  C003  FFE1         	movff	__RegsToCANID@ptr,fsr1l
  8205  001A44  C004  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
  8206  001A48  50E7               	movf	indf1,w,c
  8207  001A4A  6E08               	movwf	??__RegsToCANID& (0+255),c
  8208  001A4C  0E05               	movlw	5
  8209  001A4E  6E09               	movwf	(??__RegsToCANID+1)& (0+255),c
  8210  001A50                     u3635:
  8211  001A50  90D8               	bcf	status,0,c
  8212  001A52  3608               	rlcf	??__RegsToCANID,f,c
  8213  001A54  2E09               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
  8214  001A56  D7FC               	goto	u3635
  8215  001A58  5008               	movf	??__RegsToCANID,w,c
  8216  001A5A  6EDF               	movwf	indf2,c
  8217                           
  8218                           ;ECANPoll.c: 1176: Value->BYTES.BYTE_4 = (*ptr >> 3);
  8219  001A5C  EE20 F003          	lfsr	2,3
  8220  001A60  500A               	movf	__RegsToCANID@Value,w,c
  8221  001A62  26D9               	addwf	fsr2l,f,c
  8222  001A64  500B               	movf	__RegsToCANID@Value+1,w,c
  8223  001A66  22DA               	addwfc	fsr2h,f,c
  8224  001A68  C003  FFE1         	movff	__RegsToCANID@ptr,fsr1l
  8225  001A6C  C004  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
  8226  001A70  50E7               	movf	indf1,w,c
  8227  001A72  6E08               	movwf	??__RegsToCANID& (0+255),c
  8228  001A74  90D8               	bcf	status,0,c
  8229  001A76  3208               	rrcf	??__RegsToCANID,f,c
  8230  001A78  90D8               	bcf	status,0,c
  8231  001A7A  3208               	rrcf	??__RegsToCANID,f,c
  8232  001A7C  90D8               	bcf	status,0,c
  8233  001A7E  3008               	rrcf	??__RegsToCANID,w,c
  8234  001A80  6EDF               	movwf	indf2,c
  8235                           
  8236                           ;ECANPoll.c: 1177: ptr++;
  8237  001A82  4A03               	infsnz	__RegsToCANID@ptr,f,c
  8238  001A84  2A04               	incf	__RegsToCANID@ptr+1,f,c
  8239                           
  8240                           ;ECANPoll.c: 1178: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
  8241  001A86  C003  FFD9         	movff	__RegsToCANID@ptr,fsr2l
  8242  001A8A  C004  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
  8243  001A8E  50DF               	movf	indf2,w,c
  8244  001A90  6E08               	movwf	??__RegsToCANID& (0+255),c
  8245  001A92  0E03               	movlw	3
  8246  001A94  1608               	andwf	??__RegsToCANID,f,c
  8247  001A96  EE20 F002          	lfsr	2,2
  8248  001A9A  500A               	movf	__RegsToCANID@Value,w,c
  8249  001A9C  26D9               	addwf	fsr2l,f,c
  8250  001A9E  500B               	movf	__RegsToCANID@Value+1,w,c
  8251  001AA0  22DA               	addwfc	fsr2h,f,c
  8252  001AA2  5008               	movf	??__RegsToCANID,w,c
  8253  001AA4  12DF               	iorwf	indf2,f,c
  8254                           
  8255                           ;ECANPoll.c: 1180: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
  8256  001AA6  C003  FFD9         	movff	__RegsToCANID@ptr,fsr2l
  8257  001AAA  C004  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
  8258  001AAE  50DF               	movf	indf2,w,c
  8259  001AB0  6E08               	movwf	??__RegsToCANID& (0+255),c
  8260  001AB2  90D8               	bcf	status,0,c
  8261  001AB4  3208               	rrcf	??__RegsToCANID,f,c
  8262  001AB6  90D8               	bcf	status,0,c
  8263  001AB8  3208               	rrcf	??__RegsToCANID,f,c
  8264  001ABA  90D8               	bcf	status,0,c
  8265  001ABC  3208               	rrcf	??__RegsToCANID,f,c
  8266  001ABE  0E1C               	movlw	28
  8267  001AC0  1608               	andwf	??__RegsToCANID,f,c
  8268  001AC2  EE20 F002          	lfsr	2,2
  8269  001AC6  500A               	movf	__RegsToCANID@Value,w,c
  8270  001AC8  26D9               	addwf	fsr2l,f,c
  8271  001ACA  500B               	movf	__RegsToCANID@Value+1,w,c
  8272  001ACC  22DA               	addwfc	fsr2h,f,c
  8273  001ACE  5008               	movf	??__RegsToCANID,w,c
  8274  001AD0  12DF               	iorwf	indf2,f,c
  8275                           
  8276                           ;ECANPoll.c: 1181: ptr++;
  8277  001AD2  4A03               	infsnz	__RegsToCANID@ptr,f,c
  8278  001AD4  2A04               	incf	__RegsToCANID@ptr+1,f,c
  8279                           
  8280                           ;ECANPoll.c: 1182: Value->BYTES.BYTE_2 = *ptr;
  8281  001AD6  C003  FFD9         	movff	__RegsToCANID@ptr,fsr2l
  8282  001ADA  C004  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
  8283  001ADE  EE10 F001          	lfsr	1,1
  8284  001AE2  500A               	movf	__RegsToCANID@Value,w,c
  8285  001AE4  26E1               	addwf	fsr1l,f,c
  8286  001AE6  500B               	movf	__RegsToCANID@Value+1,w,c
  8287  001AE8  22E2               	addwfc	fsr1h,f,c
  8288  001AEA  CFDF FFE7          	movff	indf2,indf1
  8289                           
  8290                           ;ECANPoll.c: 1183: ptr++;
  8291  001AEE  4A03               	infsnz	__RegsToCANID@ptr,f,c
  8292  001AF0  2A04               	incf	__RegsToCANID@ptr+1,f,c
  8293                           
  8294                           ;ECANPoll.c: 1184: Value->BYTES.BYTE_1 = *ptr;
  8295  001AF2  C003  FFD9         	movff	__RegsToCANID@ptr,fsr2l
  8296  001AF6  C004  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
  8297  001AFA  C00A  FFE1         	movff	__RegsToCANID@Value,fsr1l
  8298  001AFE  C00B  FFE2         	movff	__RegsToCANID@Value+1,fsr1h
  8299  001B02  CFDF FFE7          	movff	indf2,indf1
  8300  001B06  0012               	return		;funcret
  8301  001B08                     __end_of__RegsToCANID:
  8302                           	opt callstack 0
  8303                           
  8304 ;; *************** function _alive *****************
  8305 ;; Defined at:
  8306 ;;		line 25 in file "main.c"
  8307 ;; Parameters:    Size  Location     Type
  8308 ;;  j               2    2[COMRAM] int 
  8309 ;; Auto vars:     Size  Location     Type
  8310 ;;  i               2    6[COMRAM] int 
  8311 ;; Return value:  Size  Location     Type
  8312 ;;                  1    wreg      void 
  8313 ;; Registers used:
  8314 ;;		wreg, status,2, status,0
  8315 ;; Tracked objects:
  8316 ;;		On entry : 0/0
  8317 ;;		On exit  : 0/0
  8318 ;;		Unchanged: 0/0
  8319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8320 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8321 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8322 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8323 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8324 ;;Total ram usage:        6 bytes
  8325 ;; Hardware stack levels used:    1
  8326 ;; Hardware stack levels required when called:    2
  8327 ;; This function calls:
  8328 ;;		Nothing
  8329 ;; This function is called by:
  8330 ;;		_shell
  8331 ;;		_main
  8332 ;; This function uses a non-reentrant model
  8333 ;;
  8334                           
  8335                           	psect	text33
  8336  002928                     __ptext33:
  8337                           	opt callstack 0
  8338  002928                     _alive:
  8339                           	opt callstack 27
  8340                           
  8341                           ;main.c: 26: TRISB7 = 0;
  8342                           
  8343                           ;incstack = 0
  8344  002928  9E93               	bcf	3987,7,c	;volatile
  8345                           
  8346                           ;main.c: 27: for(int i = 0; i<j; i++) {
  8347  00292A  0E00               	movlw	0
  8348  00292C  6E08               	movwf	alive@i+1,c
  8349  00292E  0E00               	movlw	0
  8350  002930  6E07               	movwf	alive@i,c
  8351  002932  D01C               	goto	l100
  8352  002934                     l101:
  8353                           
  8354                           ;main.c: 28: RB7 = 1;
  8355  002934  8E81               	bsf	3969,7,c	;volatile
  8356                           
  8357                           ;main.c: 29: _delay((unsigned long)((50)*(16000000/4000.0)));
  8358  002936  0E02               	movlw	2
  8359  002938  6E06               	movwf	(??_alive+1)& (0+255),c
  8360  00293A  0E04               	movlw	4
  8361  00293C  6E05               	movwf	??_alive& (0+255),c
  8362  00293E  0EBA               	movlw	186
  8363  002940                     u5637:
  8364  002940  2EE8               	decfsz	wreg,f,c
  8365  002942  D7FE               	bra	u5637
  8366  002944  2E05               	decfsz	??_alive& (0+255),f,c
  8367  002946  D7FC               	bra	u5637
  8368  002948  2E06               	decfsz	(??_alive+1)& (0+255),f,c
  8369  00294A  D7FA               	bra	u5637
  8370  00294C  D000               	nop2	
  8371                           
  8372                           ;main.c: 30: RB7 = 0;
  8373  00294E  9E81               	bcf	3969,7,c	;volatile
  8374                           
  8375                           ;main.c: 31: _delay((unsigned long)((50)*(16000000/4000.0)));
  8376  002950  0E02               	movlw	2
  8377  002952  6E06               	movwf	(??_alive+1)& (0+255),c
  8378  002954  0E04               	movlw	4
  8379  002956  6E05               	movwf	??_alive& (0+255),c
  8380  002958  0EBA               	movlw	186
  8381  00295A                     u5647:
  8382  00295A  2EE8               	decfsz	wreg,f,c
  8383  00295C  D7FE               	bra	u5647
  8384  00295E  2E05               	decfsz	??_alive& (0+255),f,c
  8385  002960  D7FC               	bra	u5647
  8386  002962  2E06               	decfsz	(??_alive+1)& (0+255),f,c
  8387  002964  D7FA               	bra	u5647
  8388  002966  D000               	nop2	
  8389  002968  4A07               	infsnz	alive@i,f,c
  8390  00296A  2A08               	incf	alive@i+1,f,c
  8391  00296C                     l100:
  8392  00296C  5003               	movf	alive@j,w,c
  8393  00296E  5C07               	subwf	alive@i,w,c
  8394  002970  5008               	movf	alive@i+1,w,c
  8395  002972  0A80               	xorlw	128
  8396  002974  6E05               	movwf	??_alive& (0+255),c
  8397  002976  5004               	movf	alive@j+1,w,c
  8398  002978  0A80               	xorlw	128
  8399  00297A  5805               	subwfb	??_alive& (0+255),w,c
  8400  00297C  B0D8               	btfsc	status,0,c
  8401  00297E  0012               	return	
  8402  002980  D7D9               	goto	l101
  8403  002982                     __end_of_alive:
  8404                           	opt callstack 0
  8405                           
  8406 ;; *************** function _Open1USART *****************
  8407 ;; Defined at:
  8408 ;;		line 124 in file "plib/USART/u1open.c"
  8409 ;; Parameters:    Size  Location     Type
  8410 ;;  config          1    wreg     unsigned char 
  8411 ;;  spbrg           2    2[COMRAM] unsigned int 
  8412 ;; Auto vars:     Size  Location     Type
  8413 ;;  config          1    4[COMRAM] unsigned char 
  8414 ;; Return value:  Size  Location     Type
  8415 ;;                  1    wreg      void 
  8416 ;; Registers used:
  8417 ;;		wreg, status,2
  8418 ;; Tracked objects:
  8419 ;;		On entry : 0/0
  8420 ;;		On exit  : 0/0
  8421 ;;		Unchanged: 0/0
  8422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8423 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8424 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8426 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8427 ;;Total ram usage:        3 bytes
  8428 ;; Hardware stack levels used:    1
  8429 ;; Hardware stack levels required when called:    2
  8430 ;; This function calls:
  8431 ;;		Nothing
  8432 ;; This function is called by:
  8433 ;;		_main
  8434 ;; This function uses a non-reentrant model
  8435 ;;
  8436                           
  8437                           	psect	text34
  8438  002A26                     __ptext34:
  8439                           	opt callstack 0
  8440  002A26                     _Open1USART:
  8441                           	opt callstack 28
  8442                           
  8443                           ;incstack = 0
  8444                           ;Open1USART@config stored from wreg
  8445  002A26  6E05               	movwf	Open1USART@config,c
  8446                           
  8447                           ;u1open.c: 126: TXSTA1 = 0;
  8448  002A28  0E00               	movlw	0
  8449  002A2A  6EAC               	movwf	4012,c	;volatile
  8450                           
  8451                           ;u1open.c: 127: RCSTA1 = 0;
  8452  002A2C  0E00               	movlw	0
  8453  002A2E  6EAB               	movwf	4011,c	;volatile
  8454                           
  8455                           ;u1open.c: 129: if(config&0x01)
  8456  002A30  B005               	btfsc	Open1USART@config,0,c
  8457                           
  8458                           ;u1open.c: 130: TXSTA1bits.SYNC = 1;
  8459  002A32  88AC               	bsf	4012,4,c	;volatile
  8460                           
  8461                           ;u1open.c: 132: if(config&0x02)
  8462  002A34  A205               	btfss	Open1USART@config,1,c
  8463  002A36  D002               	goto	l4825
  8464                           
  8465                           ;u1open.c: 133: {;u1open.c: 134: TXSTA1bits.TX9 = 1;
  8466  002A38  8CAC               	bsf	4012,6,c	;volatile
  8467                           
  8468                           ;u1open.c: 135: RCSTA1bits.RX9 = 1;
  8469  002A3A  8CAB               	bsf	4011,6,c	;volatile
  8470  002A3C                     l4825:
  8471                           
  8472                           ;u1open.c: 136: };u1open.c: 138: if(config&0x04)
  8473  002A3C  B405               	btfsc	Open1USART@config,2,c
  8474                           
  8475                           ;u1open.c: 139: TXSTA1bits.CSRC = 1;
  8476  002A3E  8EAC               	bsf	4012,7,c	;volatile
  8477                           
  8478                           ;u1open.c: 141: if(config&0x08)
  8479  002A40  A605               	btfss	Open1USART@config,3,c
  8480  002A42  D002               	goto	l225
  8481                           
  8482                           ;u1open.c: 142: RCSTA1bits.CREN = 1;
  8483  002A44  88AB               	bsf	4011,4,c	;volatile
  8484  002A46  D001               	goto	l4833
  8485  002A48                     l225:
  8486                           
  8487                           ;u1open.c: 143: else;u1open.c: 144: RCSTA1bits.SREN = 1;
  8488  002A48  8AAB               	bsf	4011,5,c	;volatile
  8489  002A4A                     l4833:
  8490                           
  8491                           ;u1open.c: 146: if(config&0x10)
  8492  002A4A  B805               	btfsc	Open1USART@config,4,c
  8493                           
  8494                           ;u1open.c: 147: TXSTA1bits.BRGH = 1;
  8495  002A4C  84AC               	bsf	4012,2,c	;volatile
  8496                           
  8497                           ;u1open.c: 149: if(config&0x20)
  8498  002A4E  BA05               	btfsc	Open1USART@config,5,c
  8499                           
  8500                           ;u1open.c: 150: RCSTA1bits.ADDEN = 1;
  8501  002A50  86AB               	bsf	4011,3,c	;volatile
  8502                           
  8503                           ;u1open.c: 154: if(config&0x40)
  8504  002A52  AC05               	btfss	Open1USART@config,6,c
  8505  002A54  D002               	goto	l229
  8506                           
  8507                           ;u1open.c: 155: PIE1bits.RCIE = 1;
  8508  002A56  8A9D               	bsf	3997,5,c	;volatile
  8509  002A58  D001               	goto	l4845
  8510  002A5A                     l229:
  8511                           
  8512                           ;u1open.c: 156: else;u1open.c: 157: PIE1bits.RCIE = 0;
  8513  002A5A  9A9D               	bcf	3997,5,c	;volatile
  8514  002A5C                     l4845:
  8515                           
  8516                           ;u1open.c: 159: if(config&0x80)
  8517  002A5C  AE05               	btfss	Open1USART@config,7,c
  8518  002A5E  D002               	goto	l231
  8519                           
  8520                           ;u1open.c: 160: PIE1bits.TXIE = 1;
  8521  002A60  889D               	bsf	3997,4,c	;volatile
  8522  002A62  D001               	goto	l232
  8523  002A64                     l231:
  8524                           
  8525                           ;u1open.c: 161: else;u1open.c: 162: PIE1bits.TXIE = 0;
  8526  002A64  989D               	bcf	3997,4,c	;volatile
  8527  002A66                     l232:
  8528                           
  8529                           ;u1open.c: 164: SPBRG1 = spbrg;
  8530  002A66  C003  FFAF         	movff	Open1USART@spbrg,4015	;volatile
  8531                           
  8532                           ;u1open.c: 165: SPBRGH1 = spbrg >> 8;
  8533  002A6A  5004               	movf	Open1USART@spbrg+1,w,c
  8534  002A6C  6E7D               	movwf	3965,c	;volatile
  8535                           
  8536                           ;u1open.c: 167: TXSTA1bits.TXEN = 1;
  8537  002A6E  8AAC               	bsf	4012,5,c	;volatile
  8538                           
  8539                           ;u1open.c: 168: RCSTA1bits.SPEN = 1;
  8540  002A70  8EAB               	bsf	4011,7,c	;volatile
  8541  002A72  0012               	return		;funcret
  8542  002A74                     __end_of_Open1USART:
  8543                           	opt callstack 0
  8544                           
  8545 ;; *************** function _ECANInitialize *****************
  8546 ;; Defined at:
  8547 ;;		line 164 in file "can/ECANPoll.c"
  8548 ;; Parameters:    Size  Location     Type
  8549 ;;		None
  8550 ;; Auto vars:     Size  Location     Type
  8551 ;;		None
  8552 ;; Return value:  Size  Location     Type
  8553 ;;                  1    wreg      void 
  8554 ;; Registers used:
  8555 ;;		wreg, status,2, status,0, cstack
  8556 ;; Tracked objects:
  8557 ;;		On entry : 0/0
  8558 ;;		On exit  : 0/0
  8559 ;;		Unchanged: 0/0
  8560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8565 ;;Total ram usage:        0 bytes
  8566 ;; Hardware stack levels used:    1
  8567 ;; Hardware stack levels required when called:    3
  8568 ;; This function calls:
  8569 ;;		_ECANSetOperationMode
  8570 ;; This function is called by:
  8571 ;;		_main
  8572 ;; This function uses a non-reentrant model
  8573 ;;
  8574                           
  8575                           	psect	text35
  8576  002780                     __ptext35:
  8577                           	opt callstack 0
  8578  002780                     _ECANInitialize:
  8579                           	opt callstack 27
  8580                           
  8581                           ;ECANPoll.c: 168: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
  8582                           
  8583                           ;incstack = 0
  8584  002780  0E80               	movlw	128
  8585  002782  ECC7  F015         	call	_ECANSetOperationMode
  8586                           
  8587                           ;ECANPoll.c: 172: BRGCON1 = ((2-1) << 6) | (2-1);
  8588  002786  0E41               	movlw	65
  8589  002788  010E               	movlb	14	; () banked
  8590  00278A  6F43               	movwf	67,b	;volatile
  8591                           
  8592                           ; BSR set to: 14
  8593                           ;ECANPoll.c: 173: BRGCON2 = (1 << 7) | (1 << 6) | ((1-1) << 3) | (4-1);
  8594  00278C  0EC3               	movlw	195
  8595  00278E  6F44               	movwf	68,b	;volatile
  8596                           
  8597                           ; BSR set to: 14
  8598                           ;ECANPoll.c: 177: BRGCON3 = (0 << 7) |;ECANPoll.c: 178: (0 << 6) |;ECANPoll.c: 179: (2-1
      +                          );
  8599  002790  0E01               	movlw	1
  8600  002792  6F45               	movwf	69,b	;volatile
  8601                           
  8602                           ; BSR set to: 14
  8603                           ;ECANPoll.c: 182: CIOCON = 0 << 7 | 0 << 6 | 1 << 4 | 0;
  8604  002794  0E10               	movlw	16
  8605  002796  6E70               	movwf	3952,c	;volatile
  8606                           
  8607                           ; BSR set to: 14
  8608                           ;ECANPoll.c: 189: MDSEL1 = 0x00 >> 7;
  8609  002798  9E72               	bcf	3954,7,c	;volatile
  8610                           
  8611                           ; BSR set to: 14
  8612                           ;ECANPoll.c: 190: MDSEL0 = 0x00 >> 6;
  8613  00279A  9C72               	bcf	3954,6,c	;volatile
  8614                           
  8615                           ; BSR set to: 14
  8616                           ;ECANPoll.c: 195: RXB0CON = (0 << 5) | (0 << 2);
  8617  00279C  0E00               	movlw	0
  8618  00279E  6E60               	movwf	3936,c	;volatile
  8619                           
  8620                           ; BSR set to: 14
  8621                           ;ECANPoll.c: 196: RXB1CON = 0 << 5;
  8622  0027A0  0E00               	movlw	0
  8623  0027A2  010F               	movlb	15	; () banked
  8624  0027A4  6F30               	movwf	48,b	;volatile
  8625                           
  8626                           ; BSR set to: 15
  8627                           ;ECANPoll.c: 290: RXF0SIDH = (long)0x0L >> 3L;RXF0SIDL = (long)0x0L << 5L;
  8628  0027A6  0E00               	movlw	0
  8629  0027A8  010E               	movlb	14	; () banked
  8630  0027AA  6FE0               	movwf	224,b	;volatile
  8631                           
  8632                           ; BSR set to: 14
  8633  0027AC  0E00               	movlw	0
  8634  0027AE  6FE1               	movwf	225,b	;volatile
  8635                           
  8636                           ; BSR set to: 14
  8637                           ;ECANPoll.c: 298: RXF1SIDH = (long)0x0L >> 3L;RXF1SIDL = (long)0x0L << 5L;
  8638  0027B0  0E00               	movlw	0
  8639  0027B2  6FE4               	movwf	228,b	;volatile
  8640                           
  8641                           ; BSR set to: 14
  8642  0027B4  0E00               	movlw	0
  8643  0027B6  6FE5               	movwf	229,b	;volatile
  8644                           
  8645                           ; BSR set to: 14
  8646                           ;ECANPoll.c: 307: RXF2SIDH = (long)0x0L >> 3L;RXF2SIDL = (long)0x0L << 5L;
  8647  0027B8  0E00               	movlw	0
  8648  0027BA  6FE8               	movwf	232,b	;volatile
  8649                           
  8650                           ; BSR set to: 14
  8651  0027BC  0E00               	movlw	0
  8652  0027BE  6FE9               	movwf	233,b	;volatile
  8653                           
  8654                           ; BSR set to: 14
  8655                           ;ECANPoll.c: 316: RXF3SIDH = (long)0x0L >> 3L;RXF3SIDL = (long)0x0L << 5L;
  8656  0027C0  0E00               	movlw	0
  8657  0027C2  6FEC               	movwf	236,b	;volatile
  8658                           
  8659                           ; BSR set to: 14
  8660  0027C4  0E00               	movlw	0
  8661  0027C6  6FED               	movwf	237,b	;volatile
  8662                           
  8663                           ; BSR set to: 14
  8664                           ;ECANPoll.c: 325: RXF4SIDH = (long)0x0L >> 3L;RXF4SIDL = (long)0x0L << 5L;
  8665  0027C8  0E00               	movlw	0
  8666  0027CA  6FF0               	movwf	240,b	;volatile
  8667                           
  8668                           ; BSR set to: 14
  8669  0027CC  0E00               	movlw	0
  8670  0027CE  6FF1               	movwf	241,b	;volatile
  8671                           
  8672                           ; BSR set to: 14
  8673                           ;ECANPoll.c: 333: RXF5SIDH = (long)0x0L >> 3L;RXF5SIDL = (long)0x0L << 5L;
  8674  0027D0  0E00               	movlw	0
  8675  0027D2  6FF4               	movwf	244,b	;volatile
  8676                           
  8677                           ; BSR set to: 14
  8678  0027D4  0E00               	movlw	0
  8679  0027D6  6FF5               	movwf	245,b	;volatile
  8680                           
  8681                           ; BSR set to: 14
  8682                           ;ECANPoll.c: 475: RXM0SIDH = (long)0x0L >> 3L; RXM0SIDL = (long)0x0L << 5L;
  8683  0027D8  0E00               	movlw	0
  8684  0027DA  6FF8               	movwf	248,b	;volatile
  8685                           
  8686                           ; BSR set to: 14
  8687  0027DC  0E00               	movlw	0
  8688  0027DE  6FF9               	movwf	249,b	;volatile
  8689                           
  8690                           ; BSR set to: 14
  8691                           ;ECANPoll.c: 476: RXM0EXIDM = 0;
  8692  0027E0  97F9               	bcf	249,3,b	;volatile
  8693                           
  8694                           ; BSR set to: 14
  8695                           ;ECANPoll.c: 483: RXM1SIDH = (long)0x0L >> 3L; RXM1SIDL = (long)0x0L << 5L;
  8696  0027E2  0E00               	movlw	0
  8697  0027E4  6FFC               	movwf	252,b	;volatile
  8698                           
  8699                           ; BSR set to: 14
  8700  0027E6  0E00               	movlw	0
  8701  0027E8  6FFD               	movwf	253,b	;volatile
  8702                           
  8703                           ; BSR set to: 14
  8704                           ;ECANPoll.c: 484: RXM1EXIDEN = 0;
  8705  0027EA  97FD               	bcf	253,3,b	;volatile
  8706                           
  8707                           ;ECANPoll.c: 495: ECANSetOperationMode(0x00);
  8708  0027EC  0E00               	movlw	0
  8709  0027EE  ECC7  F015         	call	_ECANSetOperationMode
  8710  0027F2  0012               	return		;funcret
  8711  0027F4                     __end_of_ECANInitialize:
  8712                           	opt callstack 0
  8713                           
  8714 ;; *************** function _ECANSetOperationMode *****************
  8715 ;; Defined at:
  8716 ;;		line 1012 in file "can/ECANPoll.c"
  8717 ;; Parameters:    Size  Location     Type
  8718 ;;  mode            1    wreg     enum E12067
  8719 ;; Auto vars:     Size  Location     Type
  8720 ;;  mode            1    2[COMRAM] enum E12067
  8721 ;; Return value:  Size  Location     Type
  8722 ;;                  1    wreg      void 
  8723 ;; Registers used:
  8724 ;;		wreg, status,2, status,0
  8725 ;; Tracked objects:
  8726 ;;		On entry : 0/0
  8727 ;;		On exit  : 0/0
  8728 ;;		Unchanged: 0/0
  8729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8731 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8733 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8734 ;;Total ram usage:        1 bytes
  8735 ;; Hardware stack levels used:    1
  8736 ;; Hardware stack levels required when called:    2
  8737 ;; This function calls:
  8738 ;;		Nothing
  8739 ;; This function is called by:
  8740 ;;		_ECANInitialize
  8741 ;; This function uses a non-reentrant model
  8742 ;;
  8743                           
  8744                           	psect	text36
  8745  002B8E                     __ptext36:
  8746                           	opt callstack 0
  8747  002B8E                     _ECANSetOperationMode:
  8748                           	opt callstack 27
  8749                           
  8750                           ;incstack = 0
  8751                           ;ECANSetOperationMode@mode stored from wreg
  8752  002B8E  6E03               	movwf	ECANSetOperationMode@mode,c
  8753                           
  8754                           ;ECANPoll.c: 1014: CANCON &= 0x1F;
  8755  002B90  0E1F               	movlw	31
  8756  002B92  166F               	andwf	3951,f,c	;volatile
  8757                           
  8758                           ;ECANPoll.c: 1015: CANCON |= mode;
  8759  002B94  5003               	movf	ECANSetOperationMode@mode,w,c
  8760  002B96  126F               	iorwf	3951,f,c	;volatile
  8761  002B98                     l4713:
  8762  002B98  506E               	movf	3950,w,c	;volatile
  8763  002B9A  0BE0               	andlw	224
  8764  002B9C  1803               	xorwf	ECANSetOperationMode@mode,w,c
  8765  002B9E  B4D8               	btfsc	status,2,c
  8766  002BA0  0012               	return	
  8767  002BA2  D7FA               	goto	l4713
  8768  002BA4                     __end_of_ECANSetOperationMode:
  8769                           	opt callstack 0
  8770                           
  8771 ;; *************** function _ISR *****************
  8772 ;; Defined at:
  8773 ;;		line 146 in file "main.c"
  8774 ;; Parameters:    Size  Location     Type
  8775 ;;		None
  8776 ;; Auto vars:     Size  Location     Type
  8777 ;;  c2              1    1[COMRAM] unsigned char 
  8778 ;; Return value:  Size  Location     Type
  8779 ;;                  1    wreg      void 
  8780 ;; Registers used:
  8781 ;;		wreg, status,2, status,0, cstack
  8782 ;; Tracked objects:
  8783 ;;		On entry : 0/0
  8784 ;;		On exit  : 0/0
  8785 ;;		Unchanged: 0/0
  8786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8788 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8790 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8791 ;;Total ram usage:        1 bytes
  8792 ;; Hardware stack levels used:    1
  8793 ;; Hardware stack levels required when called:    1
  8794 ;; This function calls:
  8795 ;;		_Read1USART
  8796 ;; This function is called by:
  8797 ;;		Interrupt level 2
  8798 ;; This function uses a non-reentrant model
  8799 ;;
  8800                           
  8801                           	psect	intcode
  8802  000008                     __pintcode:
  8803                           	opt callstack 0
  8804  000008                     _ISR:
  8805                           	opt callstack 24
  8806                           
  8807                           ;incstack = 0
  8808  000008  825D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8809                           
  8810                           ;main.c: 148: GIE=0;
  8811  00000A  9EF2               	bcf	4082,7,c	;volatile
  8812                           
  8813                           ;main.c: 149: RCIE=0;
  8814  00000C  9A9D               	bcf	3997,5,c	;volatile
  8815                           
  8816                           ;main.c: 150: if ((PIR1bits.RC1IF)) {
  8817  00000E  AA9E               	btfss	3998,5,c	;volatile
  8818  000010  D011               	goto	i2l144
  8819                           
  8820                           ;main.c: 151: char c2 = Read1USART();
  8821  000012  ECA8  F015         	call	_Read1USART	;wreg free
  8822  000016  6E02               	movwf	ISR@c2,c
  8823                           
  8824                           ;main.c: 152: if (c2 == '\n') {
  8825  000018  0E0A               	movlw	10
  8826  00001A  1802               	xorwf	ISR@c2,w,c
  8827  00001C  B4D8               	btfsc	status,2,c
  8828                           
  8829                           ;main.c: 153: cmd = ctmp;
  8830  00001E  C05B  F05C         	movff	_ctmp,_cmd
  8831                           
  8832                           ;main.c: 154: };main.c: 155: if (c2 != '\r' && c2 != '\n') {
  8833  000022  0E0D               	movlw	13
  8834  000024  1802               	xorwf	ISR@c2,w,c
  8835  000026  B4D8               	btfsc	status,2,c
  8836  000028  D005               	goto	i2l144
  8837  00002A  0E0A               	movlw	10
  8838  00002C  1802               	xorwf	ISR@c2,w,c
  8839  00002E  A4D8               	btfss	status,2,c
  8840                           
  8841                           ;main.c: 156: ctmp = c2;
  8842  000030  C002  F05B         	movff	ISR@c2,_ctmp
  8843  000034                     i2l144:
  8844                           
  8845                           ;main.c: 157: };main.c: 158: };main.c: 159: RCIE=1;
  8846  000034  8A9D               	bsf	3997,5,c	;volatile
  8847                           
  8848                           ;main.c: 160: GIE=1;
  8849  000036  8EF2               	bsf	4082,7,c	;volatile
  8850  000038  925D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8851  00003A  0011               	retfie		f
  8852  00003C                     __end_of_ISR:
  8853                           	opt callstack 0
  8854                           
  8855 ;; *************** function _Read1USART *****************
  8856 ;; Defined at:
  8857 ;;		line 17 in file "plib/USART/u1read.c"
  8858 ;; Parameters:    Size  Location     Type
  8859 ;;		None
  8860 ;; Auto vars:     Size  Location     Type
  8861 ;;  data            1    0[COMRAM] unsigned char 
  8862 ;; Return value:  Size  Location     Type
  8863 ;;                  1    wreg      unsigned char 
  8864 ;; Registers used:
  8865 ;;		wreg, status,2, status,0
  8866 ;; Tracked objects:
  8867 ;;		On entry : 0/0
  8868 ;;		On exit  : 0/0
  8869 ;;		Unchanged: 0/0
  8870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8872 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8874 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8875 ;;Total ram usage:        1 bytes
  8876 ;; Hardware stack levels used:    1
  8877 ;; This function calls:
  8878 ;;		Nothing
  8879 ;; This function is called by:
  8880 ;;		_ISR
  8881 ;;		_GetcharHW
  8882 ;;		_gets1USART
  8883 ;; This function uses a non-reentrant model
  8884 ;;
  8885                           
  8886                           	psect	text38
  8887  002B50                     __ptext38:
  8888                           	opt callstack 0
  8889  002B50                     _Read1USART:
  8890                           	opt callstack 24
  8891                           
  8892                           ;u1read.c: 19: char data;;u1read.c: 21: USART1_Status.val &= 0xf2;
  8893                           
  8894                           ;incstack = 0
  8895  002B50  0EF2               	movlw	242
  8896  002B52  0100               	movlb	0	; () banked
  8897  002B54  17CB               	andwf	_USART1_Status& (0+255),f,b
  8898                           
  8899                           ; BSR set to: 0
  8900                           ;u1read.c: 23: if(RCSTA1bits.RX9)
  8901  002B56  ACAB               	btfss	4011,6,c	;volatile
  8902  002B58  D003               	goto	i2l266
  8903                           
  8904                           ; BSR set to: 0
  8905                           ;u1read.c: 24: {;u1read.c: 25: USART1_Status.RX_NINE = 0;
  8906  002B5A  91CB               	bcf	_USART1_Status& (0+255),0,b
  8907                           
  8908                           ;u1read.c: 26: if(RCSTA1bits.RX9D)
  8909  002B5C  B0AB               	btfsc	4011,0,c	;volatile
  8910                           
  8911                           ; BSR set to: 0
  8912                           ;u1read.c: 27: USART1_Status.RX_NINE = 1;
  8913  002B5E  81CB               	bsf	_USART1_Status& (0+255),0,b
  8914  002B60                     i2l266:
  8915                           
  8916                           ; BSR set to: 0
  8917                           ;u1read.c: 28: };u1read.c: 30: if(RCSTA1bits.FERR)
  8918  002B60  B4AB               	btfsc	4011,2,c	;volatile
  8919                           
  8920                           ; BSR set to: 0
  8921                           ;u1read.c: 31: USART1_Status.FRAME_ERROR = 1;
  8922  002B62  85CB               	bsf	_USART1_Status& (0+255),2,b
  8923                           
  8924                           ; BSR set to: 0
  8925                           ;u1read.c: 33: if(RCSTA1bits.OERR)
  8926  002B64  B2AB               	btfsc	4011,1,c	;volatile
  8927                           
  8928                           ; BSR set to: 0
  8929                           ;u1read.c: 34: USART1_Status.OVERRUN_ERROR = 1;
  8930  002B66  87CB               	bsf	_USART1_Status& (0+255),3,b
  8931                           
  8932                           ; BSR set to: 0
  8933                           ;u1read.c: 36: data = RCREG1;
  8934  002B68  CFAE F001          	movff	4014,Read1USART@data	;volatile
  8935                           
  8936                           ; BSR set to: 0
  8937                           ;u1read.c: 38: return (data);
  8938  002B6C  5001               	movf	Read1USART@data,w,c
  8939                           
  8940                           ; BSR set to: 0
  8941  002B6E  0012               	return		;funcret
  8942  002B70                     __end_of_Read1USART:
  8943                           	opt callstack 0
  8944                           
  8945                           	psect	rparam
  8946  0000                     
  8947                           	psect	temp
  8948  00005D                     btemp:
  8949                           	opt callstack 0
  8950  00005D                     	ds	1
  8951  0000                     int$flags	set	btemp
  8952  0000                     wtemp8	set	btemp+1
  8953  0000                     ttemp5	set	btemp+1
  8954  0000                     ttemp6	set	btemp+4
  8955  0000                     ttemp7	set	btemp+8
  8956                           tosu	equ	0xFFF
  8957                           tosh	equ	0xFFE
  8958                           tosl	equ	0xFFD
  8959                           stkptr	equ	0xFFC
  8960                           pclatu	equ	0xFFB
  8961                           pclath	equ	0xFFA
  8962                           pcl	equ	0xFF9
  8963                           tblptru	equ	0xFF8
  8964                           tblptrh	equ	0xFF7
  8965                           tblptrl	equ	0xFF6
  8966                           tablat	equ	0xFF5
  8967                           prodh	equ	0xFF4
  8968                           prodl	equ	0xFF3
  8969                           indf0	equ	0xFEF
  8970                           postinc0	equ	0xFEE
  8971                           postdec0	equ	0xFED
  8972                           preinc0	equ	0xFEC
  8973                           plusw0	equ	0xFEB
  8974                           fsr0h	equ	0xFEA
  8975                           fsr0l	equ	0xFE9
  8976                           wreg	equ	0xFE8
  8977                           indf1	equ	0xFE7
  8978                           postinc1	equ	0xFE6
  8979                           postdec1	equ	0xFE5
  8980                           preinc1	equ	0xFE4
  8981                           plusw1	equ	0xFE3
  8982                           fsr1h	equ	0xFE2
  8983                           fsr1l	equ	0xFE1
  8984                           bsr	equ	0xFE0
  8985                           indf2	equ	0xFDF
  8986                           postinc2	equ	0xFDE
  8987                           postdec2	equ	0xFDD
  8988                           preinc2	equ	0xFDC
  8989                           plusw2	equ	0xFDB
  8990                           fsr2h	equ	0xFDA
  8991                           fsr2l	equ	0xFD9
  8992                           status	equ	0xFD8


Data Sizes:
    Strings     123
    Constant    144
    Data        24
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     90      92
    BANK0           160     70     124
    BANK1           256    180     188
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_3(CODE[20]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 128
		 -> uds_get_soc@buf(BANK1[128]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> RXB1CON(SFR_1[1]), RXB0CON(SFR_2[1]), 

    _RegsToCANID@val	PTR unsigned long  size(2) Largest target is 4
		 -> uds_get_vin@id(BANK0[4]), uds_get_soc@id(BANK1[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(2) Largest target is 4
		 -> uds_get_vin@id(BANK0[4]), uds_get_soc@id(BANK1[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(SFR_1[1]), TXB1CON(SFR_1[1]), TXB0CON(SFR_1[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(2) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(2) Largest target is 32
		 -> uds_get_vin@msg2(BANK0[32]), uds_get_soc@msg2(BANK1[32]), 

    ECANReceiveMessage@id	PTR unsigned long  size(2) Largest target is 4
		 -> uds_get_vin@id(BANK0[4]), uds_get_soc@id(BANK1[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(2) Largest target is 1
		 -> uds_get_vin@len(BANK0[1]), uds_get_soc@len(BANK1[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> RXB1CON(SFR_1[1]), RXB0CON(SFR_2[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> RXB1CON(SFR_1[1]), RXB0CON(SFR_2[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E12054 size(2) Largest target is 1
		 -> uds_get_vin@flags(BANK0[1]), uds_get_soc@flags(BANK1[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> uds_get_vin@msg_continue(BANK0[8]), uds_get_vin@msg_start(BANK0[8]), uds_get_soc@msg(BANK1[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(SFR_1[1]), TXB1CON(SFR_1[1]), TXB0CON(SFR_1[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(SFR_1[1]), TXB1CON(SFR_1[1]), TXB0CON(SFR_1[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(SFR_1[1]), TXB1CON(SFR_1[1]), TXB0CON(SFR_1[1]), 

    PutString@mess	PTR const unsigned char  size(2) Largest target is 128
		 -> STR_12(CODE[15]), STR_11(CODE[20]), STR_10(CODE[17]), STR_9(CODE[17]), 
		 -> STR_8(CODE[12]), STR_7(CODE[25]), STR_6(CODE[24]), STR_5(CODE[14]), 
		 -> STR_4(CODE[16]), uds_get_soc@buf(BANK1[128]), STR_2(CODE[24]), STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    _shell->_uds_get_soc
    _uds_get_vin->_ECANSendMessage
    _uds_get_soc->_sprintf
    _sprintf->___flsub
    _scale->___flmul
    ___awdiv->___awmod
    _fround->___flmul
    ___lwdiv->___lwmod
    ___flmul->___awdiv
    ___fltol->___flmul
    ___flsub->___fladd
    ___fladd->_fround
    ___fldiv->___xxtofl
    _PutString->_Putchar
    _Putchar->_Write1USART
    _ECANSendMessage->__CANIDToRegs
    _ECANReceiveMessage->__RegsToCANID
    _ECANInitialize->_ECANSetOperationMode

Critical Paths under _ISR in COMRAM

    _ISR->_Read1USART

Critical Paths under _main in BANK0

    _main->_shell
    _shell->_uds_get_vin
    _uds_get_soc->_sprintf

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _shell->_uds_get_soc

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     3      5   46140
                                             62 BANK0      8     3      5
                     _ECANInitialize
                         _Open1USART
                          _PutString
                              _alive
                              _shell
 ---------------------------------------------------------------------------------
 (1) _shell                                                1     1      0   44457
                                             61 BANK0      1     1      0
                          _PutString
                            _Putchar
                              _alive
                        _uds_get_soc
                        _uds_get_vin
 ---------------------------------------------------------------------------------
 (2) _uds_get_vin                                        194   190      4    6080
                                             47 COMRAM     5     1      4
                                              0 BANK0     61    61      0
                 _ECANReceiveMessage
                    _ECANSendMessage
                          _PutString
                            _Putchar
 ---------------------------------------------------------------------------------
 (2) _uds_get_soc                                        181   181      0   37058
                                             89 COMRAM     1     1      0
                                              0 BANK1    180   180      0
                 _ECANReceiveMessage
                    _ECANSendMessage
                          _PutString
                            ___fldiv
                           ___xxtofl
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             43    35      8   29448
                                             78 COMRAM    11     3      8
                                              0 BANK0     29    29      0
                            ___awdiv
                            ___fladd
                             ___fleq
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                                9     5      4    6735
                                             41 COMRAM     9     5      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1208
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1364
                                              8 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              2 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              13     9      4    5198
                                             41 COMRAM    13     9      4
                            ___flmul
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     615
                                              2 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     618
                                              7 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flmul                                             25    17      8    3720
                                             16 COMRAM    25    17      8
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         17     9      8     455
                                              2 COMRAM    17     9      8
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          14     6      8     455
                                              2 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4     474
                                              2 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     663
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     615
                                              2 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     466
                                              2 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     457
                                             41 COMRAM    10     6      4
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    2737
                                             70 COMRAM     8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             16     8      8    2414
                                             54 COMRAM    16     8      8
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flneg                                              4     0      4     121
                                              2 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) ___flge                                              12     4      8     638
                                              2 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___fleq                                              12     4      8     646
                                              2 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    1399
                                             16 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _PutString                                            2     0      2    1001
                                              4 COMRAM     2     0      2
                            _Putchar
 ---------------------------------------------------------------------------------
 (3) _Putchar                                              1     1      0      44
                                              3 COMRAM     1     1      0
                        _Write1USART
 ---------------------------------------------------------------------------------
 (4) _Write1USART                                          1     1      0      22
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     34    26      8    2207
                                             13 COMRAM    34    26      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        11     4      7     704
                                              2 COMRAM    11     4      7
 ---------------------------------------------------------------------------------
 (3) _ECANReceiveMessage                                  14     6      8    2148
                                             11 COMRAM    14     6      8
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (4) __RegsToCANID                                         9     4      5     717
                                              2 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (2) _alive                                                6     4      2     274
                                              2 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _Open1USART                                           3     1      2     296
                                              2 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      44
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  1     1      0     112
                                              1 COMRAM     1     1      0
                         _Read1USART
 ---------------------------------------------------------------------------------
 (7) _Read1USART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ECANInitialize
     _ECANSetOperationMode
   _Open1USART
   _PutString
     _Putchar
       _Write1USART
   _alive
   _shell
     _PutString
       _Putchar
         _Write1USART
     _Putchar
       _Write1USART
     _alive
     _uds_get_soc
       _ECANReceiveMessage
         __RegsToCANID
       _ECANSendMessage
         __CANIDToRegs
       _PutString
         _Putchar
           _Write1USART
       ___fldiv
         ___xxtofl (ARG)
       ___xxtofl
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___fladd
           _fround (ARG)
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             ___lwdiv
               ___lwmod (ARG)
             ___lwmod
         ___fleq
         ___flge
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         ___flneg
         ___flsub
           ___fladd
             _fround (ARG)
               ___flmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               ___lwdiv
                 ___lwmod (ARG)
               ___lwmod
           ___xxtofl (ARG)
         ___fltol
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
         ___lldiv
         ___llmod
         ___wmul
         ___xxtofl
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           ___lwdiv
             ___lwmod (ARG)
           ___lwmod
         _isdigit
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
     _uds_get_vin
       _ECANReceiveMessage
         __RegsToCANID
       _ECANSendMessage
         __CANIDToRegs
       _PutString
         _Putchar
           _Write1USART
       _Putchar
         _Write1USART

 _ISR (ROOT)
   _Read1USART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     B4      BC       8       73.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     46      7C       5       77.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5A      5C       1       97.9%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     194       6        0.0%
DATA                 0      0     194       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon May  6 15:24:06 2019

                 ___fldiv@aexp 0029                   ___fldiv@bexp 0028                   ___fldiv@sign 0021  
             uds_get_soc@flags 01AF                   ___awdiv@sign 000E            ___wmul@multiplicand 0005  
                  __CFG_BORV$3 000000               uds_get_vin@i_332 0097                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
             uds_get_vin@flags 0098                            l100 296C                            l101 2934  
                          l231 2A64                            l232 2A66                            l225 2A48  
                          l229 2A5A                            l503 0600                            l378 20E2  
                          l548 267C                            l389 1E02                            l398 1E88  
                          l963 28B8                            l886 2202                            l799 2408  
                          l887 222A                            _GIE 007F97                   __CFG_CPB$OFF 000000  
                          _RB7 007C0F                   __CFG_CPD$OFF 000000                            _ISR 0008  
                          _cmd 005C                   ___awmod@sign 0008                            prod 000FF3  
                          wreg 000FE8                     _TXSTA1bits 000FAC                   ___flmul@aexp 0022  
                 ___flmul@bexp 0023                   ___flmul@sign 001D                   ___flmul@temp 0028  
                 ___flmul@prod 0024                           ?_ISR 0001                   ___fltol@exp1 0033  
                         l1034 29CA                           l1044 2AF2                           l1205 1FEA  
                         l1127 1648                           l1072 1082                           l1073 1060  
                         l1138 16B6                           l1139 16B2                           l1157 0C6E  
                         l1174 0F0C                           l1166 0E86                           l1167 0E82  
                         l1088 1154                           l1097 11BA                           l1098 11B6  
                         l3203 0FB4                           l3301 1144                           l4013 1F9A  
                         l1198 1F6C                           l3215 0FD8                           l3207 0FB8  
                         l4015 1FA0                           l4007 1F7C                           l4105 2172  
                         l4025 2010                           l4017 1FAC                           l3401 0C5E  
                         l5001 274E                           l4043 205C                           l4027 201C  
                         l4019 1FD2                           l4203 0060                           l4109 2176  
                         l3165 2BB2                           l4053 29FE                           l3309 1178  
                         l3325 1198                           l3245 1014                           l4213 0090  
                         l4205 0066                           l4143 1E38                           l4127 1DF2  
                         l4063 208A                           l3319 118E                           l3183 0F70  
                         l4303 03BC                           l4231 0108                           l4223 00EA  
                         l4137 1E1C                           l4145 1E42                           l4049 29D6  
                         l3353 1226                           l3345 1200                           l3281 10C8  
                         l3273 10A6                           l3257 106E                           l3409 0C8C  
                         l3521 25CA                           l3513 25AC                           l4401 07A6  
                         l4321 04CA                           l4225 00EE                           l4217 00C8  
                         l4091 2134                           l4083 20FE                           l3283 10CC  
                         l3291 10DE                           l3259 1072                           l3179 0F6C  
                         l3451 0E2E                           l3531 25EA                           l3507 259C  
                         l4323 04CE                           l4307 03EA                           l4219 00DE  
                         l4149 1E46                           l4077 20E6                           l3357 122E  
                         l3381 0C1A                           l3613 2AE8                           l3605 2AC8  
                         l4341 052C                           l4317 0452                           l4253 0180  
                         l4237 0124                           l4245 0148                           l4191 1F1E  
                         l4167 1EAC                           l3631 1CF6                           l4503 1646  
                         l3359 1230                           l3383 0C1E                           l3607 2AD0  
                         l3519 25C2                           l3535 25F4                           l3551 2808  
                         l3711 09E0                           l4351 05C6                           l4335 0506  
                         l4263 01CE                           l4239 0136                           l4247 016C  
                         l4415 07F8                           l4177 1EE6                           l4185 1F04  
                         l3617 2BBA                           l4433 1502                           l3481 0EE8  
                         l3457 0E4C                           l3385 0C2E                           l3561 282A  
                         l3705 0940                           l4099 2152                           l4515 167C  
                         l3539 2602                           l3571 284C                           l3555 2814  
                         l3723 0B24                           l3715 0A0A                           l4371 0622  
                         l4363 0604                           l4291 0304                           l4509 165E  
                         l4453 1542                           l4437 1506                           l3493 0F2A  
                         l3477 0ECA                           l3741 2B86                           l4357 05DC  
                         l4349 05BC                           l4701 1966                           l3663 1A34  
                         l4551 1756                           l4543 1748                           l4535 16FA  
                         l4471 1590                           l3903 2566                           l3807 229E  
                         l3751 21AE                           l3399 0C5A                           l3575 285A  
                         l3567 2842                           l3559 2822                           l4375 0682  
                         l4295 0350                           l4287 02D6                           l4279 0258  
                         l4199 004C                           l4607 1C50                           l4623 17C4  
                         l4713 2B98                           l4465 157A                           l4457 1546  
                         l3585 2998                           l3729 0BC4                           l4393 0784  
                         l4385 0762                           l4539 171E                           l3907 2584  
                         l3923 23F2                           l3915 23A8                           l3851 2348  
                         l3835 231C                           l3827 22EC                           l3587 29A0  
                         l3691 1488                           l4387 076E                           l4395 078E  
                         l4549 1754                           l3597 29C0                           l3685 13AC  
                         l4709 198A                           l4653 1882                           l4637 17E6  
                         l4479 15A8                           l3919 23DC                           l3847 2338  
                         l3791 2254                           l4671 18DA                           l4663 18B6  
                         l4833 2A4A                           l4825 2A3C                           l4497 1620  
                         l4489 15F8                           l3929 2440                           l3937 2B18  
                         l3873 262E                           l3857 2350                           l4577 1B5C  
                         l3963 24AC                           l3947 2462                           l3875 263A  
                         l3859 235C                           l3787 2244                           l4845 2A5C  
                         l3981 24EC                           l3973 24C4                           l3885 266E  
                         l3797 225C                           l4589 1B7E                           l4677 18E4  
                         l3975 24D0                           l3967 24BC                           l3991 2882  
                         l3799 2268                           l4697 195E                           l4689 1936  
                         l3899 2532                           l3997 28AA                           l3989 2876  
                         l4973 26D8                           l4965 26AE                           l4981 2704  
                         l4969 26BA                           l4979 26F0                           STR_1 7FE4  
                         STR_2 7F84                           STR_3 7F9C                           STR_4 7FC5  
                         STR_5 7FE4                           STR_6 7F84                           STR_7 7F83  
                         STR_8 7FF2                           STR_9 7FC4                           u4010 2450  
                         u3140 120C                           u3060 119C                           u4020 2480  
                         u3300 0E7C                           u3080 11B0                           u3400 25CE  
                         u4025 2476                           u4210 29F6                           u3250 0C7A  
                         u4220 2A1E                           u4060 24D6                           u3340 0ED8  
                         u3260 0DF0                           u3500 29A4                           u3350 0EF6  
                         _PIE1 000F9D                           u5040 1C66                           u4217 29EC  
                         u3265 0DE6                           u4090 2886                           u4170 2026  
                         u3530 2AD4                           u4227 2A14                           u5051 1774  
                         u2900 1048                           u3460 282E                           u5140 18CC  
                         u4325 1DFA                           u5061 1786                           u3615 19DE  
                         u4327 1DFE                           u3625 19FE                           u2930 108A  
                         u3810 226E                           u4530 0316                           u3635 1A50  
                         u3731 2192                           _PEIE 007F96                           u3900 263E  
                         u3820 228C                           u3740 219C                           u4540 0362  
                         u5180 1966                           u4630 05EA                           u5190 197C  
                         u3575 1CB8                           u3751 21BE                           u4711 07D6  
                         u2880 1036                           u4640 05FA                           u3585 1CE0  
                         u2890 1046                           u4730 0810                           u4570 03BC  
                         u3595 1D0A                           _RCIE 007CED                           u4900 16AC  
                         u3940 2580                           u5607 17EC                           u3880 2362  
                         u5617 18EA                           u5627 1B84                           u4940 1708  
                         u5637 2940                           u4950 172C                           u5647 295A  
                         u5587 2756                           u4981 1B1E                           u5597 26F8  
             ??_ECANInitialize 0004                 Read1USART@data 0001                           _main 270A  
                         _ctmp 005B                           fsr0h 000FEA                           fsr1h 000FE2  
                         indf0 000FEF                           fsr2h 000FDA                           fsr0l 000FE9  
                         indf1 000FE7                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           btemp 005D                           prodh 000FF4  
                         prodl 000FF3                           start 003C                  __CFG_IESO$OFF 000000  
                __CFG_FOSC$HS1 000000                ___fldiv@new_exp 0022                   _sprintf$1887 0060  
                __CFG_MCLRE$ON 000000                   ___param_bank 000000      ECANReceiveMessage@dataLen 0010  
                        ??_ISR 0002               __RegsToCANID@val 0005               __RegsToCANID@ptr 0003  
                        ISR@c2 0002        uds_get_vin@msg_continue 0068                __end_of_Putchar 2BCA  
                ___fltol@sign1 0032                __end_of___fladd 124C                          ?_main 009E  
              __end_of___fldiv 175E                __end_of___awdiv 260C                __end_of___flneg 2B2A  
                        STR_10 7FC4                          STR_11 7FB0                          STR_12 7FD5  
              __end_of___awmod 2864                __end_of___flmul 0F40                __end_of___flsub 2ABA  
              __end_of___fltol 24FE                __end_of___lldiv 268E                ___awdiv@divisor 000B  
              __end_of___llmod 28CA                __end_of___lwdiv 29D4                __end_of___lwmod 2AFC  
                        i2l144 0034                          i2l266 2B60                ___awdiv@counter 000D  
                        _IRXIF 007BBF                  __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000  
                __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000                 __CFG_EBTR0$OFF 000000  
               __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000  
               __CFG_EBTR3$OFF 000000                  __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000  
                __CFG_WRTD$OFF 000000                 __CFG_EBTRB$OFF 000000                          _alive 2928  
              __end_of_dpowers 7F83                          _scale 081E                __end_of_isdigit 2B8E  
                        _shell 268E                          main@i 00A4                     _Read1USART 2B50  
                        tablat 000FF5                          plusw1 000FE3                          plusw2 000FDB  
                        ttemp5 005E                          ttemp6 0061                          ttemp7 0065  
                        status 000FD8                          wtemp8 005E                __end_of_sprintf 081E  
         _ECANSetOperationMode 2B8E                __initialization 28CA                   __end_of_main 2780  
            ??_ECANSendMessage 0016                     _Open1USART 2A26                         ??_main 00A3  
                __activetblptr 000002              __RegsToCANID@type 0007                 __CFG_PLLCFG$ON 000000  
         __size_of__tdiv_to_l_ 00FE                 __CFG_RETEN$OFF 000000     ECANReceiveMessage@msgFlags 0012  
                       ?_alive 0003     ECANReceiveMessage@savedPtr 0014                         _CANCON 000F6F  
             ___llmod@dividend 0003                         ?_scale 002A                         ?_shell 0001  
             ___awdiv@dividend 0009                         _CIOCON 000F70                         _MDSEL0 007B96  
                       _MDSEL1 007B97                __CFG_BBSIZ$BB2K 000000                 __CFG_WDTEN$OFF 000000  
                       _RCREG1 000FAE                         _RCSTA1 000FAB                         _RXB0IF 007BB8  
                       _RXB1IF 007BB9                         _SPBRG1 000FAF         ECANReceiveMessage@data 000E  
                       _TRISB7 007C9F         ECANReceiveMessage@temp 0019                         _TXREG1 000FAD  
             __end_of___xxtofl 206E                         _TXSTA1 000FAC          ?_ECANSetOperationMode 0001  
           __CANIDToRegs@Value 000C                 __CFG_XINST$OFF 000000               __end_of__powers_ 7F27  
                       ___flge 2374                         ___fleq 24FE                      ??_Putchar 0004  
                    ??___fladd 003F                         ___wmul 2B2A                      ??___fldiv 0019  
                    ??___awdiv 000D                      ??___flneg 0007                 __CFG_STVREN$ON 000000  
                    ??___awmod 0007                      ??___flmul 0019                      ??___flsub 004F  
                    ??___fltol 002E                      ??___lldiv 000B                      ??___llmod 000B  
                    ??___lwdiv 000C                      ??___lwmod 0007                         _fround 124C  
                       clear_0 2910               ___awdiv@quotient 000F                         alive@i 0007  
                       alive@j 0003                ___awmod@divisor 0005                   ?_uds_get_soc 0001  
                 ?_uds_get_vin 0030                ___awmod@counter 0007                      ??_isdigit 0003  
                 __mediumconst 7EF2                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8             __size_of_PutString 0052                      ??_sprintf 0057  
                  ?_Read1USART 0001                     ___flge@ff1 0003                     ___flge@ff2 0007  
                 ___xxtofl@arg 000D                   ___xxtofl@exp 000C                   ___xxtofl@val 0003  
                   ___fleq@ff1 0003                     ___fleq@ff2 0007                     __accesstop 0060  
      __end_of__initialization 291A                     ___flneg@f1 0003                  ___rparam_used 000001  
                   ___fltol@f1 002A                 __pcstackCOMRAM 0001                   __pidataBANK0 2BCA  
                 __pidataBANK1 2BDA                  __end_of_alive 2982                  __end_of_scale 0BEE  
                __end_of_shell 270A                    ?_Open1USART 0003                  ?__RegsToCANID 0003  
  __size_of_ECANReceiveMessage 015A                     __div_to_l_ 2280             __RegsToCANID@Value 000A  
                      ??_alive 0005                __div_to_l_@exp1 0010                __div_to_l_@cntr 000F  
                      ??_scale 002E                        ??_shell 009D                __div_to_l_@quot 000B  
                   __pbssBANK0 00A6                  ??_Write1USART 0003         ??_ECANSetOperationMode 0003  
                __div_to_l_@f1 0003                  __div_to_l_@f2 0007                        ?___flge 0003  
                      ?___fleq 0003              __end_of_PutString 2A26       ECANSetOperationMode@mode 0003  
                      ?___wmul 0003           __ECANRxFilterHitInfo 00CA                        ?_fround 002A  
                    _B1CONbits 000E90            __size_of_Read1USART 0020                        _CANSTAT 000F6E  
               ??__RegsToCANID 0008                        _BRGCON1 000E43                        _BRGCON2 000E44  
                      _BRGCON3 000E45               Open1USART@config 0005               __CFG_CANMX$PORTB 000000  
                    ?___xxtofl 0003                        _RXB0CON 000F60                        _RXB1CON 000F30  
                      _RXB0FUL 007B07                        _SPBRGH1 000F7D                        _TXB0CON 000F20  
                      _TXB1CON 000F10                        _TXB2CON 000F00            __size_of_Open1USART 004E  
         uds_get_vin@msg_start 0060                _ECANSendMessage 206E                __CFG_PWRTEN$OFF 000000  
            __end_of__npowers_ 7F5B                        __Hparam 0000                     _scale$1886 002E  
                      __Lparam 0000            __end_of_Write1USART 2BB8               _uds_get_soc$1883 01A8  
                      _Putchar 2BB8                __size_of___flge 00D0                __size_of___fleq 008A  
                      ___fladd 0F40                        ___fldiv 14D6                        ___awdiv 2588  
                      ___flneg 2AFC                        ___awmod 27F4                        ___flmul 0BEE  
                      ___flsub 2A74                        ___fltol 2444                        ___lldiv 260C  
              __size_of___wmul 0026                        ___llmod 2864                        ___lwdiv 2982  
                      ___lwmod 2ABA                        __pcinit 28CA                __size_of_fround 028A  
                      __ramtop 0F00                        _inIndex 00C8                        __ptext0 270A  
                      __ptext1 268E                        __ptext2 175E                        __ptext3 1B08  
                      __ptext4 0040                        __ptext5 081E                        __ptext6 27F4  
                      __ptext7 2588                        __ptext8 2B70                        __ptext9 124C  
                 __size_of_ISR 0034                    ?__div_to_l_ 0003                        _dpowers 7F5B  
         __size_of_uds_get_soc 016C           __size_of_uds_get_vin 0234                        _isdigit 2B70  
                   ??___xxtofl 0007               ___awmod@dividend 0003              __CFG_MSSPMSK$MSK7 000000  
                      _sprintf 0040           end_of_initialization 291A                  __Lmediumconst 7EF2  
              ___lldiv@divisor 0007                ___lldiv@counter 000F              ECANSendMessage@id 000E  
            ECANSendMessage@pb 0017                        postdec1 000FE5                        postdec2 000FDD  
      __size_of_ECANInitialize 0074                        postinc0 000FEE                        postinc2 000FDE  
               __tdiv_to_l_@f1 0003                 __tdiv_to_l_@f2 0007                  ??__tdiv_to_l_ 000B  
                    _RXM0EXIDM 0077CB                    ___fladd@grs 0046                  ___xxtofl@sign 000B  
                    _TRISCbits 000F94                    ___fldiv@grs 0024                    ___fldiv@rem 001D  
              uds_get_soc@msg2 0180                   ??_Read1USART 0001              __CFG_SOSCSEL$HIGH 000000  
      __end_of_ECANSendMessage 2182                uds_get_vin@msg2 0070                    ___flmul@grs 001E  
                ?__CANIDToRegs 0003           __end_of__RegsToCANID 1B08                    _Write1USART 2BA4  
          __size_of__div_to_l_ 00F4                 __end_of___flge 2444                 __end_of___fleq 2588  
               __end_of___wmul 2B50                   ??_Open1USART 0005             __end_of_Read1USART 2B70  
               __end_of_fround 14D6            start_initialization 28CA                    __end_of_ISR 003C  
          __end_of__tdiv_to_l_ 2280                 ??__CANIDToRegs 000A                ___llmod@divisor 0007  
             Putchar@send_data 0004                ___llmod@counter 000B             __end_of_Open1USART 2A74  
        ECANReceiveMessage@ptr 0017                       ??___flge 000B                       ??___fleq 000B  
            __CANIDToRegs@type 0009                       ??___wmul 0007     __end_of_ECANReceiveMessage 1F2E  
                  __pdataBANK0 00CC                    __pdataBANK1 01B4                       ??_fround 002E  
                    _PutString 29D4                  sprintf@tmpval 0072                      ___fladd@a 003B  
                    ___fladd@b 0037                     fround@prec 0036                      ___fldiv@a 0015  
                    ___fldiv@b 0011                      ___flmul@a 0015                      ___flmul@b 0011  
                  __pbssCOMRAM 005B                      ___flsub@a 004B                      ___flsub@b 0047  
                __pcstackBANK0 0060                  __pcstackBANK1 0100              __size_of___xxtofl 0140  
                 _isdigit$1659 0004               ?_ECANSendMessage 000E                    sprintf@flag 006A  
                  sprintf@eexp 0070                    sprintf@fval 0076                    sprintf@prec 007A  
             ___lwdiv@dividend 0008  __size_of_ECANSetOperationMode 0016                 _ECANInitialize 2780  
                    __pintcode 0008                  __pmediumconst 7EF2                       ?_Putchar 0001  
                     ?___fladd 0037                       ?___fldiv 0011                       ?___awdiv 0009  
                     ?___flneg 0003                       ?___awmod 0003                       ?___flmul 0011  
                     ?___flsub 0047                       ?___fltol 002A                       ?___lldiv 0003  
                     ?___llmod 0003                      __npowers_ 7F27                       ?___lwdiv 0008  
                     ?___lwmod 0003                     ?_PutString 0005                Open1USART@spbrg 0003  
                  __tdiv_to_l_ 2182                   ??__div_to_l_ 000B                       _BAUDCON1 000FA7  
                     ?_isdigit 0001               ___lwdiv@quotient 000C                 __size_of_alive 005A  
        __size_of__RegsToCANID 0176                       ?_sprintf 004F                Write1USART@data 0003  
               __size_of_scale 03D0                 __size_of_shell 007C                 ___wmul@product 0007  
                     _PIE1bits 000F9D         __end_of_ECANInitialize 27F4                       _PIR1bits 000F9E  
           __end_of__div_to_l_ 2374               ECANSendMessage@i 002D               ECANSendMessage@j 0029  
                     _RXB0OVFL 007B8F                       _RXB1OVFL 007B8E                       _RXF0SIDH 000EE0  
                     _RXF0SIDL 000EE1                       _RXF1SIDH 000EE4                       _RXF1SIDL 000EE5  
                     _RXF2SIDH 000EE8                       _RXF2SIDL 000EE9                       _RXF3SIDH 000EEC  
                     _RXF3SIDL 000EED                       _RXF4SIDH 000EF0                       _RXF4SIDL 000EF1  
                     _RXF5SIDH 000EF4                       _RXF5SIDL 000EF5                       _RXM0SIDH 000EF8  
                     _RXM0SIDL 000EF9                       _RXM1SIDH 000EFC                       _RXM1SIDL 000EFD  
                ??_uds_get_soc 005A                  ??_uds_get_vin 0034           __end_of__CANIDToRegs 1DD4  
               uds_get_soc@buf 0100                 uds_get_soc@len 01AC                 uds_get_soc@msg 01A0  
            ___wmul@multiplier 0003                   __RegsToCANID 1992                 uds_get_vin@len 0096  
                    copy_data0 28DE                      copy_data1 28FE                   ?_Write1USART 0001  
                     _RxBuffer 00A6                ?_ECANInitialize 0001                       __Hrparam 0000  
         ECANReceiveMessage@id 000C                       __Lrparam 0000               __CANIDToRegs@val 0005  
             __CANIDToRegs@ptr 0003             __CFG_BOREN$SBORDIS 000000               __size_of_Putchar 0012  
             __size_of___fladd 030C               __size_of___fldiv 0288               __size_of___awdiv 0084  
             __size_of___flneg 002E               __size_of___awmod 0070               __size_of___flmul 0352  
             __size_of___flsub 0046               __size_of___fltol 00BA               __size_of___lldiv 0082  
             __size_of___llmod 0066               __size_of___lwdiv 0052               __size_of___lwmod 0042  
                  ??_PutString 0007                    _fround$1884 0032                    _fround$1885 002E  
                   sprintf@len 0068                     sprintf@val 006C                       ___xxtofl 1F2E  
             __size_of_isdigit 001E            __end_of_uds_get_soc 1C74            __end_of_uds_get_vin 1992  
              ___lwdiv@divisor 000A                ___lwdiv@counter 000E                       __ptext10 2ABA  
                     __ptext11 2982                       __ptext20 2A74                       __ptext12 0BEE  
                     __ptext21 0F40                       __ptext13 2182                       __ptext30 1C74  
                     __ptext22 2AFC                       __ptext14 2280                       __ptext31 1DD4  
                     __ptext23 2374                       __ptext15 1F2E                       __ptext32 1992  
                     __ptext24 24FE                       __ptext16 2B2A                       __ptext33 2928  
                     __ptext25 14D6                       __ptext17 2864                       __ptext34 2A26  
                     __ptext26 29D4                       __ptext18 260C                       __ptext35 2780  
                     __ptext27 2BB8                       __ptext19 2444                       __ptext36 2B8E  
                     __ptext28 2BA4                       __ptext29 206E                       __ptext38 2B50  
                     __powers_ 7EF3          uds_get_vin@total_size 0090               __size_of_sprintf 07DE  
                __size_of_main 0076            ECANSendMessage@data 0012                       _outIndex 00C6  
          ECANSendMessage@temp 002C                       int$flags 005D                  uds_get_soc@id 01B0  
                uds_get_vin@id 0099                       main@argc 009E                       main@argv 00A0  
                  _RXB0FILHIT0 007B00            __CFG_INTOSCSEL$HIGH 000000                  _USART1_Status 00CB  
          ECANReceiveMessage@i 0016                       isdigit@c 0005             _ECANReceiveMessage 1DD4  
                     scale@scl 0032                       intlevel2 0000                      sprintf@ap 0064  
                    sprintf@cp 0066               __tdiv_to_l_@exp1 0013                      sprintf@sp 004F  
             __tdiv_to_l_@cntr 0012               __tdiv_to_l_@quot 000E               ___lwmod@dividend 0003  
          ?_ECANReceiveMessage 000C               ___lldiv@dividend 0003                     _RCSTA1bits 000FAB  
      ECANSendMessage@msgFlags 0015             ECANSendMessage@ptr 002E                   uds_get_soc@i 01AD  
        __size_of__CANIDToRegs 0160                   uds_get_vin@i 0092                   uds_get_vin@t 0094  
           __CFG_WDTPS$1048576 000000         ECANSendMessage@dataLen 0014                   ?__tdiv_to_l_ 0003  
                  _uds_get_soc 1B08                    _uds_get_vin 175E           ??_ECANReceiveMessage 0014  
                     sprintf@c 007C                       sprintf@f 0051               ___lldiv@quotient 000B  
              ___lwmod@divisor 0005   __end_of_ECANSetOperationMode 2BA4                ___lwmod@counter 0007  
                   _RXM1EXIDEN 0077EB         ECANSendMessage@tempPtr 002A              uds_get_soc@F12336 01B4  
                ___fladd@signs 0043                   ___fladd@aexp 0044                   ___fladd@bexp 0045  
          __CFG_BORPWR$ZPBORMV 000000                   __CANIDToRegs 1C74                  PutString@mess 0005  
         __size_of_Write1USART 0014              uds_get_vin@F12346 00D4              uds_get_vin@F12348 00CC  
     __size_of_ECANSendMessage 0114  
